
classifierTest.elf:     file format elf32-littlenios2
classifierTest.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0000cf44 memsz 0x0000cf44 flags r-x
    LOAD off    0x0000df64 vaddr 0x0100cf64 paddr 0x0100ea48 align 2**12
         filesz 0x00001ae4 memsz 0x00001ae4 flags rw-
    LOAD off    0x0001052c vaddr 0x0101052c paddr 0x0101052c align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c928  010001b8  010001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000484  0100cae0  0100cae0  0000dae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ae4  0100cf64  0100ea48  0000df64  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  0101052c  0101052c  0001052c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000fa48  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c78  00000000  00000000  0000fa70  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001491  00000000  00000000  000106e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000231f6  00000000  00000000  00011b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000079af  00000000  00000000  00034d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013766  00000000  00000000  0003c71e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001920  00000000  00000000  0004fe84  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000021d8  00000000  00000000  000517a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000beee  00000000  00000000  0005397c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0005f86c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  0005f8a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00063286  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00063289  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00063295  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00063296  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00063297  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000632a2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000632ad  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000632b8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000017  00000000  00000000  000632c3  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00066211  00000000  00000000  000632da  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b8 l    d  .text	00000000 .text
0100cae0 l    d  .rodata	00000000 .rodata
0100cf64 l    d  .rwdata	00000000 .rwdata
0101052c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 classifier_core.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01000664 l     F .text	00000058 __sprint_r
0100cc62 l     O .rodata	00000010 blanks.3452
0100cc52 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
010026c8 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
010040c4 l     F .text	00000058 std
010041d0 l     F .text	00000008 __fp_lock
010041d8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0100cf64 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0100ea14 l     O .rwdata	00000004 charset
0100cc98 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0100cde0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
01008364 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01009490 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
01009d04 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01009d64 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01009e64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
01009f84 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100a064 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100a1c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100a3ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0100ea38 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100a688 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0100d920 l     O .rwdata	00001060 jtag_uart_0
0100e980 l     O .rwdata	00000030 audio
0100e9b0 l     O .rwdata	0000002c character_lcd_0
0100e9dc l     O .rwdata	0000002c sdcard
0100a7a4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100a9dc l     F .text	0000022c altera_avalon_jtag_uart_irq
0100ac08 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0100b284 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0100bafc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100bce8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0100bfe4 l     F .text	000000dc alt_file_locked
0100c248 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0100c8c8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0100ca7c l     F .text	00000040 alt_sim_halt
01005e80 g     F .text	00000094 _mprec_log10
01005f6c g     F .text	00000088 __any_on
01007678 g     F .text	00000070 _isatty_r
0100cdb8 g     O .rodata	00000028 __mprec_tinytens
0100a220 g     F .text	0000006c alt_main
0100053c g     F .text	000000a0 _puts_r
01010588 g     O .bss	00000100 alt_irq
010076e8 g     F .text	00000078 _lseek_r
0100ea48 g       *ABS*	00000000 __flash_rwdata_start
0100b3fc g     F .text	00000034 alt_up_character_lcd_send_cmd
01008e84 g     F .text	00000088 __eqdf2
01010818 g       *ABS*	00000000 __alt_heap_start
010004c4 g     F .text	00000044 printf
01007144 g     F .text	00000068 __sseek
0100412c g     F .text	000000a4 __sinit
01004e04 g     F .text	00000084 _setlocale_r
0100422c g     F .text	00000068 __sfmoreglue
0100a2ac g     F .text	00000020 __malloc_unlock
010058fc g     F .text	000000e0 memmove
0100421c g     F .text	00000010 _cleanup
01005ff4 g     F .text	000000bc _Balloc
01008f94 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0100b380 g     F .text	0000007c get_DDRAM_addr
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
01007604 g     F .text	00000074 _fstat_r
01010544 g     O .bss	00000004 errno
0101054c g     O .bss	00000004 alt_argv
01016a08 g       *ABS*	00000000 _gp
0100d7a0 g     O .rwdata	00000180 alt_fd_list
0100bc24 g     F .text	00000094 alt_find_dev
0100585c g     F .text	000000a0 memcpy
0100b594 g     F .text	0000004c alt_up_character_lcd_write_fd
01004210 g     F .text	0000000c _cleanup_r
0100912c g     F .text	000000f8 __floatsidf
0100bdac g     F .text	00000078 alt_io_redirect
010090a4 g     F .text	00000088 __ltdf2
0100cae0 g       *ABS*	00000000 __DTOR_END__
010005dc g     F .text	00000014 puts
01005dd0 g     F .text	000000b0 __ratio
0100ae20 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01000508 g     F .text	00000034 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
010095cc g     F .text	00000008 __udivsi3
01009ec4 g     F .text	000000c0 isatty
0100ccc8 g     O .rodata	000000c8 __mprec_tens
01004de0 g     F .text	00000008 __locale_charset
0100c644 g     F .text	00000090 alt_icache_flush
01010538 g     O .bss	00000004 __malloc_top_pad
0100ea10 g     O .rwdata	00000004 __mb_cur_max
01004de8 g     F .text	0000000c _localeconv_r
010066ec g     F .text	0000003c __i2b
010047c4 g     F .text	0000049c __sfvwrite_r
010070cc g     F .text	00000070 _sbrk_r
01007760 g     F .text	00000078 _read_r
0100d364 g     O .rwdata	0000000c __lc_ctype
0100ea30 g     O .rwdata	00000004 alt_max_fd
01009a08 g     F .text	00000138 __unpack_d
010074e0 g     F .text	00000110 _fclose_r
01004090 g     F .text	00000034 fflush
0101053c g     O .bss	00000004 __malloc_max_sbrked_mem
0100be24 g     F .text	000001c0 alt_irq_register
010087f4 g     F .text	00000074 __adddf3
01005cb0 g     F .text	00000120 __b2d
01007db4 g     F .text	000005b0 __umoddi3
0100a0d0 g     F .text	000000f0 lseek
0100ea0c g     O .rwdata	00000004 _global_impure_ptr
01006a68 g     F .text	000005f4 _realloc_r
01010818 g       *ABS*	00000000 __bss_end
0100c340 g     F .text	0000010c alt_tick
010077d8 g     F .text	000005dc __udivdi3
0100cd90 g     O .rodata	00000028 __mprec_bigtens
01006948 g     F .text	00000120 __s2b
010092fc g     F .text	00000194 __floatunsidf
01005bd0 g     F .text	00000060 __mcmp
010041f8 g     F .text	00000018 __fp_lock_all
0100c2a8 g     F .text	00000098 alt_alarm_stop
01010554 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000cc alt_irq_handler
0100d778 g     O .rwdata	00000028 alt_dev_null
0100b87c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0100ba04 g     F .text	00000044 alt_dcache_flush_all
01005a9c g     F .text	00000070 __hi0bits
01009224 g     F .text	000000d8 __fixdfsi
0100ea48 g       *ABS*	00000000 __ram_rwdata_end
0100ea28 g     O .rwdata	00000008 alt_dev_list
0100a568 g     F .text	00000120 write
0100046c g     F .text	00000058 encode
0100cf64 g       *ABS*	00000000 __ram_rodata_end
01009d90 g     F .text	000000d4 fstat
01006828 g     F .text	00000120 __pow5mult
0101052c g     O .bss	00000004 __nlocale_changed
010095d4 g     F .text	00000008 __umodsi3
01010818 g       *ABS*	00000000 end
0100a924 g     F .text	000000b8 altera_avalon_jtag_uart_init
0100cadc g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
0100b2f8 g     F .text	00000088 alt_avalon_timer_sc_init
01009674 g     F .text	00000080 __clzsi2
0100b044 g     F .text	00000240 altera_avalon_jtag_uart_write
0100411c g     F .text	00000004 __sfp_lock_acquire
01005778 g     F .text	000000e4 memchr
0100b4a4 g     F .text	00000078 alt_up_character_lcd_write
010006bc g     F .text	00001eac ___vfprintf_internal_r
010044b0 g     F .text	00000314 _free_r
0100c8cc g     F .text	000001b0 __call_exitprocs
01010530 g     O .bss	00000004 __mlocale_changed
0100ea1c g     O .rwdata	00000004 __malloc_sbrk_base
010001b8 g     F .text	0000004c _start
01010558 g     O .bss	00000004 _alt_tick_rate
010063b8 g     F .text	0000014c __lshift
0101055c g     O .bss	00000004 _alt_nticks
0100a2cc g     F .text	00000120 read
0100a71c g     F .text	00000088 alt_sys_init
0100b708 g     F .text	000000b0 alt_up_character_lcd_shift_display
0100c794 g     F .text	00000134 __register_exitproc
01006504 g     F .text	000001e8 __multiply
0100b7b8 g     F .text	00000090 alt_up_character_lcd_erase_pos
0100acb8 g     F .text	00000074 altera_avalon_jtag_uart_close
0100cf64 g       *ABS*	00000000 __ram_rwdata_start
0100cae0 g       *ABS*	00000000 __ram_rodata_start
01010560 g     O .bss	00000028 __malloc_current_mallinfo
010060b0 g     F .text	0000017c __d2b
0100a7dc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0100c58c g     F .text	000000b8 alt_get_fd
01009b40 g     F .text	000000c8 __fpcmp_parts_d
01007470 g     F .text	00000070 _close_r
0100c720 g     F .text	00000074 memcmp
0100a88c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
01010818 g       *ABS*	00000000 __alt_stack_base
0100a8d4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0100258c g     F .text	0000013c __swsetup_r
01008c2c g     F .text	00000258 __divdf3
01004294 g     F .text	000000f0 __sfp
01005f14 g     F .text	00000058 __copybits
0100d370 g     O .rwdata	00000408 __malloc_av_
01004128 g     F .text	00000004 __sinit_lock_release
01008868 g     F .text	000003c4 __muldf3
01007228 g     F .text	00000060 __sread
0100c46c g     F .text	00000120 alt_find_file
0100ba48 g     F .text	000000b4 alt_dev_llist_insert
0100a28c g     F .text	00000020 __malloc_lock
0100a4ac g     F .text	000000bc sbrk
01003e94 g     F .text	000001fc _fflush_r
010073bc g     F .text	000000b4 _calloc_r
0101052c g       *ABS*	00000000 __bss_start
010059dc g     F .text	00000098 memset
01000204 g     F .text	00000268 main
01010550 g     O .bss	00000004 alt_envp
01010540 g     O .bss	00000004 __malloc_max_total_mem
0100a834 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0100b658 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0100713c g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
010075f0 g     F .text	00000014 fclose
01010688 g     O .bss	00000190 _atexit0
010028e0 g     F .text	000015b4 _dtoa_r
01005038 g     F .text	00000740 _malloc_r
0100ea34 g     O .rwdata	00000004 alt_errno
01004d28 g     F .text	000000b8 _fwalk
0100950c g     F .text	00000060 __divsi3
0100cdec g     O .rodata	00000014 __thenan_df
0100b464 g     F .text	00000040 alt_up_character_lcd_open_dev
01004384 g     F .text	0000012c _malloc_trim_r
0100cae0 g       *ABS*	00000000 __CTOR_END__
0100b430 g     F .text	00000034 alt_up_character_lcd_init
01007288 g     F .text	000000bc strcmp
0100cae0 g       *ABS*	00000000 __flash_rodata_start
0100cae0 g       *ABS*	00000000 __DTOR_LIST__
01008f0c g     F .text	00000088 __nedf2
0100a6e8 g     F .text	00000034 alt_irq_init
0100a44c g     F .text	00000060 alt_release_fd
0100b848 g     F .text	00000034 alt_up_character_lcd_cursor_off
0100ce00 g     O .rodata	00000100 __clz_tab
01010534 g     O .bss	00000004 _PathLocale
0100c6d4 g     F .text	00000014 atexit
01007344 g     F .text	00000078 _write_r
01004e88 g     F .text	0000001c setlocale
0100ea08 g     O .rwdata	00000004 _impure_ptr
01010548 g     O .bss	00000004 alt_argc
0100bbc0 g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01005c30 g     F .text	00000080 __ulp
0100705c g     F .text	00000040 __isinfd
010041e0 g     F .text	00000018 __fp_unlock_all
0100ea20 g     O .rwdata	00000008 alt_fs_list
01000020 g       *ABS*	00000000 __ram_exceptions_start
01004df4 g     F .text	00000010 localeconv
0100ea48 g       *ABS*	00000000 _edata
01010818 g       *ABS*	00000000 _end
010001b8 g       *ABS*	00000000 __ram_exceptions_end
0100ad2c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
010071ac g     F .text	0000007c __swrite
0100ea18 g     O .rwdata	00000004 __malloc_trim_threshold
0100c44c g     F .text	00000020 altera_nios2_qsys_irq_init
0100c6e8 g     F .text	00000038 exit
01004c60 g     F .text	000000c8 _fwalk_reent
0100622c g     F .text	0000018c __mdiff
0100956c g     F .text	00000060 __modsi3
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01004120 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
0100b51c g     F .text	00000078 alt_up_character_lcd_string
0100cabc g     F .text	00000020 _exit
0100709c g     F .text	00000030 __isnand
0100b8b0 g     F .text	00000154 alt_alarm_start
010095dc g     F .text	00000098 __muldi3
01004ea4 g     F .text	00000194 __smakebuf_r
010005f0 g     F .text	00000074 strlen
0100c0c0 g     F .text	00000188 open
0100901c g     F .text	00000088 __gedf2
0100bcb8 g     F .text	00000030 alt_icache_flush_all
0100b5e0 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0100ea3c g     O .rwdata	00000004 alt_priority_mask
01002568 g     F .text	00000024 __vfprintf_internal
01008774 g     F .text	00000080 __subdf3
01005b0c g     F .text	000000c4 __lo0bits
0100ea40 g     O .rwdata	00000008 alt_alarm_list
0100bb5c g     F .text	00000064 _do_ctors
01009c08 g     F .text	000000fc close
01009fe4 g     F .text	00000080 alt_load
010096f4 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
01004124 g     F .text	00000004 __sinit_lock_acquire
01006728 g     F .text	00000100 __multadd
01005a74 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406e14 	ori	at,at,440
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000171e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18c16204 	addi	r3,r3,1416
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11800017 	ldw	r6,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18c16204 	addi	r3,r3,1416
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	e17ffd17 	ldw	r5,-12(fp)
 1000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe21e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fdd06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a4:	e037883a 	mov	sp,fp
 10001a8:	dfc00117 	ldw	ra,4(sp)
 10001ac:	df000017 	ldw	fp,0(sp)
 10001b0:	dec00204 	addi	sp,sp,8
 10001b4:	f800283a 	ret

Disassembly of section .text:

010001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c4:	00bffd16 	blt	zero,r2,10001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c8:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d0:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001d4:	d69a8214 	ori	gp,gp,27144
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d8:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001dc:	10814b14 	ori	r2,r2,1324

    movhi r3, %hi(__bss_end)
 10001e0:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001e4:	18c20614 	ori	r3,r3,2072

    beq r2, r3, 1f
 10001e8:	10c00326 	beq	r2,r3,10001f8 <_start+0x40>

0:
    stw zero, (r2)
 10001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f4:	10fffd36 	bltu	r2,r3,10001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f8:	1009fe40 	call	1009fe4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001fc:	100a2200 	call	100a220 <alt_main>

01000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000200:	003fff06 	br	1000200 <alt_after_alt_main>

01000204 <main>:
#include "classifier_core.h"

int main()
{
 1000204:	defffc04 	addi	sp,sp,-16
 1000208:	dfc00315 	stw	ra,12(sp)
 100020c:	df000215 	stw	fp,8(sp)
 1000210:	df000204 	addi	fp,sp,8
	unsigned int data = 15000;
 1000214:	008ea604 	movi	r2,15000
 1000218:	e0bfff15 	stw	r2,-4(fp)
	printf("Resetting core \n");
 100021c:	01004074 	movhi	r4,257
 1000220:	2132b804 	addi	r4,r4,-13600
 1000224:	10005dc0 	call	10005dc <puts>
	//Reset core
	IOWR_32DIRECT(classifier_core_base,60,data);
 1000228:	e0ffff17 	ldw	r3,-4(fp)
 100022c:	008a0f04 	movi	r2,10300
 1000230:	10c00035 	stwio	r3,0(r2)
	printf("Core reset \n");
 1000234:	01004074 	movhi	r4,257
 1000238:	2132bc04 	addi	r4,r4,-13584
 100023c:	10005dc0 	call	10005dc <puts>

	printf("Write bin 0/1 of test data \n");
 1000240:	01004074 	movhi	r4,257
 1000244:	2132bf04 	addi	r4,r4,-13572
 1000248:	10005dc0 	call	10005dc <puts>
	//Write bin 0/1 of test data
	IOWR_32DIRECT(classifier_core_base,0,data);
 100024c:	e0ffff17 	ldw	r3,-4(fp)
 1000250:	008a0004 	movi	r2,10240
 1000254:	10c00035 	stwio	r3,0(r2)

	printf("Write bin 2/3 of test data \n");
 1000258:	01004074 	movhi	r4,257
 100025c:	2132c604 	addi	r4,r4,-13544
 1000260:	10005dc0 	call	10005dc <puts>
	//Write bin 2/3 of test data
	IOWR_32DIRECT(classifier_core_base,4,data);
 1000264:	e0ffff17 	ldw	r3,-4(fp)
 1000268:	008a0104 	movi	r2,10244
 100026c:	10c00035 	stwio	r3,0(r2)

	printf("Write bin 4/5 of test data \n");
 1000270:	01004074 	movhi	r4,257
 1000274:	2132cd04 	addi	r4,r4,-13516
 1000278:	10005dc0 	call	10005dc <puts>
	//Write bin 4/5 of test data
	IOWR_32DIRECT(classifier_core_base,8,data);
 100027c:	e0ffff17 	ldw	r3,-4(fp)
 1000280:	008a0204 	movi	r2,10248
 1000284:	10c00035 	stwio	r3,0(r2)

	printf("Write bin 6/7 of test data \n");
 1000288:	01004074 	movhi	r4,257
 100028c:	2132d404 	addi	r4,r4,-13488
 1000290:	10005dc0 	call	10005dc <puts>
	//Write bin 6/7 of test data
	IOWR_32DIRECT(classifier_core_base,12,data);
 1000294:	e0ffff17 	ldw	r3,-4(fp)
 1000298:	008a0304 	movi	r2,10252
 100029c:	10c00035 	stwio	r3,0(r2)

	int i;

	for( i = 0; i < 8; i++)
 10002a0:	e03ffe15 	stw	zero,-8(fp)
 10002a4:	00004f06 	br	10003e4 <main+0x1e0>
	{
		printf("Writing bin %i \n", i);
 10002a8:	01004074 	movhi	r4,257
 10002ac:	2132db04 	addi	r4,r4,-13460
 10002b0:	e17ffe17 	ldw	r5,-8(fp)
 10002b4:	10004c40 	call	10004c4 <printf>
		//Write bin 0 of library data
		IOWR_32DIRECT(classifier_core_base,16,encode(i,0));
 10002b8:	e0bffe17 	ldw	r2,-8(fp)
 10002bc:	113fffcc 	andi	r4,r2,65535
 10002c0:	2120001c 	xori	r4,r4,32768
 10002c4:	21200004 	addi	r4,r4,-32768
 10002c8:	000b883a 	mov	r5,zero
 10002cc:	100046c0 	call	100046c <encode>
 10002d0:	1007883a 	mov	r3,r2
 10002d4:	008a0404 	movi	r2,10256
 10002d8:	10c00035 	stwio	r3,0(r2)

		//Write bin 1 of library data
		IOWR_32DIRECT(classifier_core_base,20,encode(i,0));
 10002dc:	e0bffe17 	ldw	r2,-8(fp)
 10002e0:	113fffcc 	andi	r4,r2,65535
 10002e4:	2120001c 	xori	r4,r4,32768
 10002e8:	21200004 	addi	r4,r4,-32768
 10002ec:	000b883a 	mov	r5,zero
 10002f0:	100046c0 	call	100046c <encode>
 10002f4:	1007883a 	mov	r3,r2
 10002f8:	008a0504 	movi	r2,10260
 10002fc:	10c00035 	stwio	r3,0(r2)

		//Write bin 2 of library data
		IOWR_32DIRECT(classifier_core_base,24,encode(i,0));
 1000300:	e0bffe17 	ldw	r2,-8(fp)
 1000304:	113fffcc 	andi	r4,r2,65535
 1000308:	2120001c 	xori	r4,r4,32768
 100030c:	21200004 	addi	r4,r4,-32768
 1000310:	000b883a 	mov	r5,zero
 1000314:	100046c0 	call	100046c <encode>
 1000318:	1007883a 	mov	r3,r2
 100031c:	008a0604 	movi	r2,10264
 1000320:	10c00035 	stwio	r3,0(r2)

		//Write bin 3 of library data
		IOWR_32DIRECT(classifier_core_base,28,encode(i,0));
 1000324:	e0bffe17 	ldw	r2,-8(fp)
 1000328:	113fffcc 	andi	r4,r2,65535
 100032c:	2120001c 	xori	r4,r4,32768
 1000330:	21200004 	addi	r4,r4,-32768
 1000334:	000b883a 	mov	r5,zero
 1000338:	100046c0 	call	100046c <encode>
 100033c:	1007883a 	mov	r3,r2
 1000340:	008a0704 	movi	r2,10268
 1000344:	10c00035 	stwio	r3,0(r2)

		//Write bin 4 of library data
		IOWR_32DIRECT(classifier_core_base,32,encode(i,0));
 1000348:	e0bffe17 	ldw	r2,-8(fp)
 100034c:	113fffcc 	andi	r4,r2,65535
 1000350:	2120001c 	xori	r4,r4,32768
 1000354:	21200004 	addi	r4,r4,-32768
 1000358:	000b883a 	mov	r5,zero
 100035c:	100046c0 	call	100046c <encode>
 1000360:	1007883a 	mov	r3,r2
 1000364:	008a0804 	movi	r2,10272
 1000368:	10c00035 	stwio	r3,0(r2)

		//Write bin 5 of library data
		IOWR_32DIRECT(classifier_core_base,36,encode(i,0));
 100036c:	e0bffe17 	ldw	r2,-8(fp)
 1000370:	113fffcc 	andi	r4,r2,65535
 1000374:	2120001c 	xori	r4,r4,32768
 1000378:	21200004 	addi	r4,r4,-32768
 100037c:	000b883a 	mov	r5,zero
 1000380:	100046c0 	call	100046c <encode>
 1000384:	1007883a 	mov	r3,r2
 1000388:	008a0904 	movi	r2,10276
 100038c:	10c00035 	stwio	r3,0(r2)

		//Write bin 6 of library data
		IOWR_32DIRECT(classifier_core_base,40,encode(i,0));
 1000390:	e0bffe17 	ldw	r2,-8(fp)
 1000394:	113fffcc 	andi	r4,r2,65535
 1000398:	2120001c 	xori	r4,r4,32768
 100039c:	21200004 	addi	r4,r4,-32768
 10003a0:	000b883a 	mov	r5,zero
 10003a4:	100046c0 	call	100046c <encode>
 10003a8:	1007883a 	mov	r3,r2
 10003ac:	008a0a04 	movi	r2,10280
 10003b0:	10c00035 	stwio	r3,0(r2)

		//Write bin 7 of library data
		IOWR_32DIRECT(classifier_core_base,44,encode(i,0));
 10003b4:	e0bffe17 	ldw	r2,-8(fp)
 10003b8:	113fffcc 	andi	r4,r2,65535
 10003bc:	2120001c 	xori	r4,r4,32768
 10003c0:	21200004 	addi	r4,r4,-32768
 10003c4:	000b883a 	mov	r5,zero
 10003c8:	100046c0 	call	100046c <encode>
 10003cc:	1007883a 	mov	r3,r2
 10003d0:	008a0b04 	movi	r2,10284
 10003d4:	10c00035 	stwio	r3,0(r2)
	//Write bin 6/7 of test data
	IOWR_32DIRECT(classifier_core_base,12,data);

	int i;

	for( i = 0; i < 8; i++)
 10003d8:	e0bffe17 	ldw	r2,-8(fp)
 10003dc:	10800044 	addi	r2,r2,1
 10003e0:	e0bffe15 	stw	r2,-8(fp)
 10003e4:	e0bffe17 	ldw	r2,-8(fp)
 10003e8:	10800210 	cmplti	r2,r2,8
 10003ec:	103fae1e 	bne	r2,zero,10002a8 <main+0xa4>
		//Write bin 7 of library data
		IOWR_32DIRECT(classifier_core_base,44,encode(i,0));
	}

	//Start
	printf("Starting \n");
 10003f0:	01004074 	movhi	r4,257
 10003f4:	2132e004 	addi	r4,r4,-13440
 10003f8:	10005dc0 	call	10005dc <puts>
	IOWR_32DIRECT(classifier_core_base,36,0);
 10003fc:	008a0904 	movi	r2,10276
 1000400:	10000035 	stwio	zero,0(r2)

	printf("Waiting for classifiers to finish \n");
 1000404:	01004074 	movhi	r4,257
 1000408:	2132e304 	addi	r4,r4,-13428
 100040c:	10005dc0 	call	10005dc <puts>
	while( (IORD_32DIRECT(classifier_core_base,0) != 255) )
 1000410:	00000506 	br	1000428 <main+0x224>
		{
			printf("Done status is: %i \n", IORD_32DIRECT(classifier_core_base,0));
 1000414:	008a0004 	movi	r2,10240
 1000418:	11400037 	ldwio	r5,0(r2)
 100041c:	01004074 	movhi	r4,257
 1000420:	2132ec04 	addi	r4,r4,-13392
 1000424:	10004c40 	call	10004c4 <printf>
	//Start
	printf("Starting \n");
	IOWR_32DIRECT(classifier_core_base,36,0);

	printf("Waiting for classifiers to finish \n");
	while( (IORD_32DIRECT(classifier_core_base,0) != 255) )
 1000428:	008a0004 	movi	r2,10240
 100042c:	10800037 	ldwio	r2,0(r2)
 1000430:	10803fd8 	cmpnei	r2,r2,255
 1000434:	103ff71e 	bne	r2,zero,1000414 <main+0x210>
		{
			printf("Done status is: %i \n", IORD_32DIRECT(classifier_core_base,0));
		}
	printf("Classifiers finished \n");
 1000438:	01004074 	movhi	r4,257
 100043c:	2132f204 	addi	r4,r4,-13368
 1000440:	10005dc0 	call	10005dc <puts>

	printf("Result is: %i \n", IORD_32DIRECT(classifier_core_base,4));
 1000444:	008a0104 	movi	r2,10244
 1000448:	11400037 	ldwio	r5,0(r2)
 100044c:	01004074 	movhi	r4,257
 1000450:	2132f804 	addi	r4,r4,-13344
 1000454:	10004c40 	call	10004c4 <printf>

}
 1000458:	e037883a 	mov	sp,fp
 100045c:	dfc00117 	ldw	ra,4(sp)
 1000460:	df000017 	ldw	fp,0(sp)
 1000464:	dec00204 	addi	sp,sp,8
 1000468:	f800283a 	ret

0100046c <encode>:

unsigned int encode(short int address, unsigned short int value)
{
 100046c:	defffc04 	addi	sp,sp,-16
 1000470:	df000315 	stw	fp,12(sp)
 1000474:	df000304 	addi	fp,sp,12
 1000478:	e13ffe0d 	sth	r4,-8(fp)
 100047c:	e17fff0d 	sth	r5,-4(fp)
	unsigned int temp = 0;
 1000480:	e03ffd15 	stw	zero,-12(fp)
	temp = temp | address;
 1000484:	e0fffe0f 	ldh	r3,-8(fp)
 1000488:	e0bffd17 	ldw	r2,-12(fp)
 100048c:	10c4b03a 	or	r2,r2,r3
 1000490:	e0bffd15 	stw	r2,-12(fp)
	temp <<= 16;
 1000494:	e0bffd17 	ldw	r2,-12(fp)
 1000498:	1004943a 	slli	r2,r2,16
 100049c:	e0bffd15 	stw	r2,-12(fp)
	temp = temp | value;
 10004a0:	e0ffff0b 	ldhu	r3,-4(fp)
 10004a4:	e0bffd17 	ldw	r2,-12(fp)
 10004a8:	10c4b03a 	or	r2,r2,r3
 10004ac:	e0bffd15 	stw	r2,-12(fp)
	return temp;
 10004b0:	e0bffd17 	ldw	r2,-12(fp)
}
 10004b4:	e037883a 	mov	sp,fp
 10004b8:	df000017 	ldw	fp,0(sp)
 10004bc:	dec00104 	addi	sp,sp,4
 10004c0:	f800283a 	ret

010004c4 <printf>:
 10004c4:	defffb04 	addi	sp,sp,-20
 10004c8:	dfc00115 	stw	ra,4(sp)
 10004cc:	d9400215 	stw	r5,8(sp)
 10004d0:	d9800315 	stw	r6,12(sp)
 10004d4:	d9c00415 	stw	r7,16(sp)
 10004d8:	00804074 	movhi	r2,257
 10004dc:	10ba8204 	addi	r2,r2,-5624
 10004e0:	10c00017 	ldw	r3,0(r2)
 10004e4:	200b883a 	mov	r5,r4
 10004e8:	d8800204 	addi	r2,sp,8
 10004ec:	19000217 	ldw	r4,8(r3)
 10004f0:	100d883a 	mov	r6,r2
 10004f4:	d8800015 	stw	r2,0(sp)
 10004f8:	10025680 	call	1002568 <__vfprintf_internal>
 10004fc:	dfc00117 	ldw	ra,4(sp)
 1000500:	dec00504 	addi	sp,sp,20
 1000504:	f800283a 	ret

01000508 <_printf_r>:
 1000508:	defffc04 	addi	sp,sp,-16
 100050c:	dfc00115 	stw	ra,4(sp)
 1000510:	d9800215 	stw	r6,8(sp)
 1000514:	d9c00315 	stw	r7,12(sp)
 1000518:	280d883a 	mov	r6,r5
 100051c:	21400217 	ldw	r5,8(r4)
 1000520:	d8c00204 	addi	r3,sp,8
 1000524:	180f883a 	mov	r7,r3
 1000528:	d8c00015 	stw	r3,0(sp)
 100052c:	10006bc0 	call	10006bc <___vfprintf_internal_r>
 1000530:	dfc00117 	ldw	ra,4(sp)
 1000534:	dec00404 	addi	sp,sp,16
 1000538:	f800283a 	ret

0100053c <_puts_r>:
 100053c:	defff604 	addi	sp,sp,-40
 1000540:	dc400715 	stw	r17,28(sp)
 1000544:	2023883a 	mov	r17,r4
 1000548:	2809883a 	mov	r4,r5
 100054c:	dfc00915 	stw	ra,36(sp)
 1000550:	dcc00815 	stw	r19,32(sp)
 1000554:	2827883a 	mov	r19,r5
 1000558:	10005f00 	call	10005f0 <strlen>
 100055c:	89400217 	ldw	r5,8(r17)
 1000560:	00c04074 	movhi	r3,257
 1000564:	18f2fc04 	addi	r3,r3,-13328
 1000568:	01c00044 	movi	r7,1
 100056c:	12000044 	addi	r8,r2,1
 1000570:	d8c00515 	stw	r3,20(sp)
 1000574:	d9c00615 	stw	r7,24(sp)
 1000578:	d8c00304 	addi	r3,sp,12
 100057c:	01c00084 	movi	r7,2
 1000580:	8809883a 	mov	r4,r17
 1000584:	d80d883a 	mov	r6,sp
 1000588:	d8c00015 	stw	r3,0(sp)
 100058c:	dcc00315 	stw	r19,12(sp)
 1000590:	da000215 	stw	r8,8(sp)
 1000594:	d9c00115 	stw	r7,4(sp)
 1000598:	d8800415 	stw	r2,16(sp)
 100059c:	10047c40 	call	10047c4 <__sfvwrite_r>
 10005a0:	00ffffc4 	movi	r3,-1
 10005a4:	10000626 	beq	r2,zero,10005c0 <_puts_r+0x84>
 10005a8:	1805883a 	mov	r2,r3
 10005ac:	dfc00917 	ldw	ra,36(sp)
 10005b0:	dcc00817 	ldw	r19,32(sp)
 10005b4:	dc400717 	ldw	r17,28(sp)
 10005b8:	dec00a04 	addi	sp,sp,40
 10005bc:	f800283a 	ret
 10005c0:	00c00284 	movi	r3,10
 10005c4:	1805883a 	mov	r2,r3
 10005c8:	dfc00917 	ldw	ra,36(sp)
 10005cc:	dcc00817 	ldw	r19,32(sp)
 10005d0:	dc400717 	ldw	r17,28(sp)
 10005d4:	dec00a04 	addi	sp,sp,40
 10005d8:	f800283a 	ret

010005dc <puts>:
 10005dc:	00804074 	movhi	r2,257
 10005e0:	10ba8204 	addi	r2,r2,-5624
 10005e4:	200b883a 	mov	r5,r4
 10005e8:	11000017 	ldw	r4,0(r2)
 10005ec:	100053c1 	jmpi	100053c <_puts_r>

010005f0 <strlen>:
 10005f0:	208000cc 	andi	r2,r4,3
 10005f4:	2011883a 	mov	r8,r4
 10005f8:	1000161e 	bne	r2,zero,1000654 <strlen+0x64>
 10005fc:	20c00017 	ldw	r3,0(r4)
 1000600:	017fbff4 	movhi	r5,65279
 1000604:	297fbfc4 	addi	r5,r5,-257
 1000608:	01e02074 	movhi	r7,32897
 100060c:	39e02004 	addi	r7,r7,-32640
 1000610:	1945883a 	add	r2,r3,r5
 1000614:	11c4703a 	and	r2,r2,r7
 1000618:	00c6303a 	nor	r3,zero,r3
 100061c:	1886703a 	and	r3,r3,r2
 1000620:	18000c1e 	bne	r3,zero,1000654 <strlen+0x64>
 1000624:	280d883a 	mov	r6,r5
 1000628:	380b883a 	mov	r5,r7
 100062c:	21000104 	addi	r4,r4,4
 1000630:	20800017 	ldw	r2,0(r4)
 1000634:	1187883a 	add	r3,r2,r6
 1000638:	1946703a 	and	r3,r3,r5
 100063c:	0084303a 	nor	r2,zero,r2
 1000640:	10c4703a 	and	r2,r2,r3
 1000644:	103ff926 	beq	r2,zero,100062c <strlen+0x3c>
 1000648:	20800007 	ldb	r2,0(r4)
 100064c:	10000326 	beq	r2,zero,100065c <strlen+0x6c>
 1000650:	21000044 	addi	r4,r4,1
 1000654:	20800007 	ldb	r2,0(r4)
 1000658:	103ffd1e 	bne	r2,zero,1000650 <strlen+0x60>
 100065c:	2205c83a 	sub	r2,r4,r8
 1000660:	f800283a 	ret

01000664 <__sprint_r>:
 1000664:	30800217 	ldw	r2,8(r6)
 1000668:	defffe04 	addi	sp,sp,-8
 100066c:	dc000015 	stw	r16,0(sp)
 1000670:	dfc00115 	stw	ra,4(sp)
 1000674:	3021883a 	mov	r16,r6
 1000678:	0007883a 	mov	r3,zero
 100067c:	1000061e 	bne	r2,zero,1000698 <__sprint_r+0x34>
 1000680:	1805883a 	mov	r2,r3
 1000684:	30000115 	stw	zero,4(r6)
 1000688:	dfc00117 	ldw	ra,4(sp)
 100068c:	dc000017 	ldw	r16,0(sp)
 1000690:	dec00204 	addi	sp,sp,8
 1000694:	f800283a 	ret
 1000698:	10047c40 	call	10047c4 <__sfvwrite_r>
 100069c:	1007883a 	mov	r3,r2
 10006a0:	1805883a 	mov	r2,r3
 10006a4:	80000115 	stw	zero,4(r16)
 10006a8:	80000215 	stw	zero,8(r16)
 10006ac:	dfc00117 	ldw	ra,4(sp)
 10006b0:	dc000017 	ldw	r16,0(sp)
 10006b4:	dec00204 	addi	sp,sp,8
 10006b8:	f800283a 	ret

010006bc <___vfprintf_internal_r>:
 10006bc:	defea404 	addi	sp,sp,-1392
 10006c0:	dd815815 	stw	r22,1376(sp)
 10006c4:	dc015215 	stw	r16,1352(sp)
 10006c8:	d9c15115 	stw	r7,1348(sp)
 10006cc:	dfc15b15 	stw	ra,1388(sp)
 10006d0:	df015a15 	stw	fp,1384(sp)
 10006d4:	ddc15915 	stw	r23,1380(sp)
 10006d8:	dd415715 	stw	r21,1372(sp)
 10006dc:	dd015615 	stw	r20,1368(sp)
 10006e0:	dcc15515 	stw	r19,1364(sp)
 10006e4:	dc815415 	stw	r18,1360(sp)
 10006e8:	dc415315 	stw	r17,1356(sp)
 10006ec:	282d883a 	mov	r22,r5
 10006f0:	3021883a 	mov	r16,r6
 10006f4:	d9014f15 	stw	r4,1340(sp)
 10006f8:	1004de80 	call	1004de8 <_localeconv_r>
 10006fc:	10800017 	ldw	r2,0(r2)
 1000700:	d9c15117 	ldw	r7,1348(sp)
 1000704:	d8814915 	stw	r2,1316(sp)
 1000708:	d8814f17 	ldw	r2,1340(sp)
 100070c:	10000226 	beq	r2,zero,1000718 <___vfprintf_internal_r+0x5c>
 1000710:	10800e17 	ldw	r2,56(r2)
 1000714:	10020d26 	beq	r2,zero,1000f4c <___vfprintf_internal_r+0x890>
 1000718:	b080030b 	ldhu	r2,12(r22)
 100071c:	1080020c 	andi	r2,r2,8
 1000720:	10020e26 	beq	r2,zero,1000f5c <___vfprintf_internal_r+0x8a0>
 1000724:	b0800417 	ldw	r2,16(r22)
 1000728:	10020c26 	beq	r2,zero,1000f5c <___vfprintf_internal_r+0x8a0>
 100072c:	b200030b 	ldhu	r8,12(r22)
 1000730:	00800284 	movi	r2,10
 1000734:	40c0068c 	andi	r3,r8,26
 1000738:	18802f1e 	bne	r3,r2,10007f8 <___vfprintf_internal_r+0x13c>
 100073c:	b080038f 	ldh	r2,14(r22)
 1000740:	10002d16 	blt	r2,zero,10007f8 <___vfprintf_internal_r+0x13c>
 1000744:	b240038b 	ldhu	r9,14(r22)
 1000748:	b2800717 	ldw	r10,28(r22)
 100074c:	b2c00917 	ldw	r11,36(r22)
 1000750:	d9014f17 	ldw	r4,1340(sp)
 1000754:	dc402904 	addi	r17,sp,164
 1000758:	d8804004 	addi	r2,sp,256
 100075c:	00c10004 	movi	r3,1024
 1000760:	423fff4c 	andi	r8,r8,65533
 1000764:	800d883a 	mov	r6,r16
 1000768:	880b883a 	mov	r5,r17
 100076c:	da002c0d 	sth	r8,176(sp)
 1000770:	da402c8d 	sth	r9,178(sp)
 1000774:	da803015 	stw	r10,192(sp)
 1000778:	dac03215 	stw	r11,200(sp)
 100077c:	d8802d15 	stw	r2,180(sp)
 1000780:	d8c02e15 	stw	r3,184(sp)
 1000784:	d8802915 	stw	r2,164(sp)
 1000788:	d8c02b15 	stw	r3,172(sp)
 100078c:	d8002f15 	stw	zero,188(sp)
 1000790:	10006bc0 	call	10006bc <___vfprintf_internal_r>
 1000794:	d8814b15 	stw	r2,1324(sp)
 1000798:	10000416 	blt	r2,zero,10007ac <___vfprintf_internal_r+0xf0>
 100079c:	d9014f17 	ldw	r4,1340(sp)
 10007a0:	880b883a 	mov	r5,r17
 10007a4:	1003e940 	call	1003e94 <_fflush_r>
 10007a8:	1002321e 	bne	r2,zero,1001074 <___vfprintf_internal_r+0x9b8>
 10007ac:	d8802c0b 	ldhu	r2,176(sp)
 10007b0:	1080100c 	andi	r2,r2,64
 10007b4:	10000326 	beq	r2,zero,10007c4 <___vfprintf_internal_r+0x108>
 10007b8:	b080030b 	ldhu	r2,12(r22)
 10007bc:	10801014 	ori	r2,r2,64
 10007c0:	b080030d 	sth	r2,12(r22)
 10007c4:	d8814b17 	ldw	r2,1324(sp)
 10007c8:	dfc15b17 	ldw	ra,1388(sp)
 10007cc:	df015a17 	ldw	fp,1384(sp)
 10007d0:	ddc15917 	ldw	r23,1380(sp)
 10007d4:	dd815817 	ldw	r22,1376(sp)
 10007d8:	dd415717 	ldw	r21,1372(sp)
 10007dc:	dd015617 	ldw	r20,1368(sp)
 10007e0:	dcc15517 	ldw	r19,1364(sp)
 10007e4:	dc815417 	ldw	r18,1360(sp)
 10007e8:	dc415317 	ldw	r17,1356(sp)
 10007ec:	dc015217 	ldw	r16,1352(sp)
 10007f0:	dec15c04 	addi	sp,sp,1392
 10007f4:	f800283a 	ret
 10007f8:	0005883a 	mov	r2,zero
 10007fc:	0007883a 	mov	r3,zero
 1000800:	dd401904 	addi	r21,sp,100
 1000804:	d8814215 	stw	r2,1288(sp)
 1000808:	802f883a 	mov	r23,r16
 100080c:	d8c14315 	stw	r3,1292(sp)
 1000810:	d8014b15 	stw	zero,1324(sp)
 1000814:	d8014815 	stw	zero,1312(sp)
 1000818:	d8014415 	stw	zero,1296(sp)
 100081c:	d8014715 	stw	zero,1308(sp)
 1000820:	dd400c15 	stw	r21,48(sp)
 1000824:	d8000e15 	stw	zero,56(sp)
 1000828:	d8000d15 	stw	zero,52(sp)
 100082c:	b8800007 	ldb	r2,0(r23)
 1000830:	10001926 	beq	r2,zero,1000898 <___vfprintf_internal_r+0x1dc>
 1000834:	00c00944 	movi	r3,37
 1000838:	10c01726 	beq	r2,r3,1000898 <___vfprintf_internal_r+0x1dc>
 100083c:	b821883a 	mov	r16,r23
 1000840:	00000106 	br	1000848 <___vfprintf_internal_r+0x18c>
 1000844:	10c00326 	beq	r2,r3,1000854 <___vfprintf_internal_r+0x198>
 1000848:	84000044 	addi	r16,r16,1
 100084c:	80800007 	ldb	r2,0(r16)
 1000850:	103ffc1e 	bne	r2,zero,1000844 <___vfprintf_internal_r+0x188>
 1000854:	85e7c83a 	sub	r19,r16,r23
 1000858:	98000e26 	beq	r19,zero,1000894 <___vfprintf_internal_r+0x1d8>
 100085c:	dc800e17 	ldw	r18,56(sp)
 1000860:	dc400d17 	ldw	r17,52(sp)
 1000864:	008001c4 	movi	r2,7
 1000868:	94e5883a 	add	r18,r18,r19
 100086c:	8c400044 	addi	r17,r17,1
 1000870:	adc00015 	stw	r23,0(r21)
 1000874:	dc800e15 	stw	r18,56(sp)
 1000878:	acc00115 	stw	r19,4(r21)
 100087c:	dc400d15 	stw	r17,52(sp)
 1000880:	14428b16 	blt	r2,r17,10012b0 <___vfprintf_internal_r+0xbf4>
 1000884:	ad400204 	addi	r21,r21,8
 1000888:	d9014b17 	ldw	r4,1324(sp)
 100088c:	24c9883a 	add	r4,r4,r19
 1000890:	d9014b15 	stw	r4,1324(sp)
 1000894:	802f883a 	mov	r23,r16
 1000898:	b8800007 	ldb	r2,0(r23)
 100089c:	10013c26 	beq	r2,zero,1000d90 <___vfprintf_internal_r+0x6d4>
 10008a0:	bdc00044 	addi	r23,r23,1
 10008a4:	d8000405 	stb	zero,16(sp)
 10008a8:	b8c00007 	ldb	r3,0(r23)
 10008ac:	04ffffc4 	movi	r19,-1
 10008b0:	d8014c15 	stw	zero,1328(sp)
 10008b4:	d8014a15 	stw	zero,1320(sp)
 10008b8:	d8c14d15 	stw	r3,1332(sp)
 10008bc:	bdc00044 	addi	r23,r23,1
 10008c0:	d9414d17 	ldw	r5,1332(sp)
 10008c4:	00801604 	movi	r2,88
 10008c8:	28fff804 	addi	r3,r5,-32
 10008cc:	10c06036 	bltu	r2,r3,1000a50 <___vfprintf_internal_r+0x394>
 10008d0:	18c5883a 	add	r2,r3,r3
 10008d4:	1085883a 	add	r2,r2,r2
 10008d8:	00c04034 	movhi	r3,256
 10008dc:	18c23b04 	addi	r3,r3,2284
 10008e0:	10c5883a 	add	r2,r2,r3
 10008e4:	11000017 	ldw	r4,0(r2)
 10008e8:	2000683a 	jmp	r4
 10008ec:	01001860 	cmpeqi	r4,zero,97
 10008f0:	01000a50 	cmplti	r4,zero,41
 10008f4:	01000a50 	cmplti	r4,zero,41
 10008f8:	0100184c 	andi	r4,zero,97
 10008fc:	01000a50 	cmplti	r4,zero,41
 1000900:	01000a50 	cmplti	r4,zero,41
 1000904:	01000a50 	cmplti	r4,zero,41
 1000908:	01000a50 	cmplti	r4,zero,41
 100090c:	01000a50 	cmplti	r4,zero,41
 1000910:	01000a50 	cmplti	r4,zero,41
 1000914:	0100162c 	andhi	r4,zero,88
 1000918:	0100183c 	xorhi	r4,zero,96
 100091c:	01000a50 	cmplti	r4,zero,41
 1000920:	01001644 	movi	r4,89
 1000924:	010018d8 	cmpnei	r4,zero,99
 1000928:	01000a50 	cmplti	r4,zero,41
 100092c:	010018c4 	movi	r4,99
 1000930:	0100188c 	andi	r4,zero,98
 1000934:	0100188c 	andi	r4,zero,98
 1000938:	0100188c 	andi	r4,zero,98
 100093c:	0100188c 	andi	r4,zero,98
 1000940:	0100188c 	andi	r4,zero,98
 1000944:	0100188c 	andi	r4,zero,98
 1000948:	0100188c 	andi	r4,zero,98
 100094c:	0100188c 	andi	r4,zero,98
 1000950:	0100188c 	andi	r4,zero,98
 1000954:	01000a50 	cmplti	r4,zero,41
 1000958:	01000a50 	cmplti	r4,zero,41
 100095c:	01000a50 	cmplti	r4,zero,41
 1000960:	01000a50 	cmplti	r4,zero,41
 1000964:	01000a50 	cmplti	r4,zero,41
 1000968:	01000a50 	cmplti	r4,zero,41
 100096c:	01000a50 	cmplti	r4,zero,41
 1000970:	01000a50 	cmplti	r4,zero,41
 1000974:	01000a50 	cmplti	r4,zero,41
 1000978:	01000a50 	cmplti	r4,zero,41
 100097c:	010010a8 	cmpgeui	r4,zero,66
 1000980:	01001714 	movui	r4,92
 1000984:	01000a50 	cmplti	r4,zero,41
 1000988:	01001714 	movui	r4,92
 100098c:	01000a50 	cmplti	r4,zero,41
 1000990:	01000a50 	cmplti	r4,zero,41
 1000994:	01000a50 	cmplti	r4,zero,41
 1000998:	01000a50 	cmplti	r4,zero,41
 100099c:	01001878 	rdprs	r4,zero,97
 10009a0:	01000a50 	cmplti	r4,zero,41
 10009a4:	01000a50 	cmplti	r4,zero,41
 10009a8:	0100115c 	xori	r4,zero,69
 10009ac:	01000a50 	cmplti	r4,zero,41
 10009b0:	01000a50 	cmplti	r4,zero,41
 10009b4:	01000a50 	cmplti	r4,zero,41
 10009b8:	01000a50 	cmplti	r4,zero,41
 10009bc:	01000a50 	cmplti	r4,zero,41
 10009c0:	010011a8 	cmpgeui	r4,zero,70
 10009c4:	01000a50 	cmplti	r4,zero,41
 10009c8:	01000a50 	cmplti	r4,zero,41
 10009cc:	010017c8 	cmpgei	r4,zero,95
 10009d0:	01000a50 	cmplti	r4,zero,41
 10009d4:	01000a50 	cmplti	r4,zero,41
 10009d8:	01000a50 	cmplti	r4,zero,41
 10009dc:	01000a50 	cmplti	r4,zero,41
 10009e0:	01000a50 	cmplti	r4,zero,41
 10009e4:	01000a50 	cmplti	r4,zero,41
 10009e8:	01000a50 	cmplti	r4,zero,41
 10009ec:	01000a50 	cmplti	r4,zero,41
 10009f0:	01000a50 	cmplti	r4,zero,41
 10009f4:	01000a50 	cmplti	r4,zero,41
 10009f8:	0100179c 	xori	r4,zero,94
 10009fc:	010010b4 	movhi	r4,66
 1000a00:	01001714 	movui	r4,92
 1000a04:	01001714 	movui	r4,92
 1000a08:	01001714 	movui	r4,92
 1000a0c:	01001700 	call	100170 <__alt_mem_onchip_memory2_0+0x100170>
 1000a10:	010010b4 	movhi	r4,66
 1000a14:	01000a50 	cmplti	r4,zero,41
 1000a18:	01000a50 	cmplti	r4,zero,41
 1000a1c:	01001688 	cmpgei	r4,zero,90
 1000a20:	01000a50 	cmplti	r4,zero,41
 1000a24:	01001658 	cmpnei	r4,zero,89
 1000a28:	01001168 	cmpgeui	r4,zero,69
 1000a2c:	010016b8 	rdprs	r4,zero,90
 1000a30:	010016a4 	muli	r4,zero,90
 1000a34:	01000a50 	cmplti	r4,zero,41
 1000a38:	01001934 	movhi	r4,100
 1000a3c:	01000a50 	cmplti	r4,zero,41
 1000a40:	010011b4 	movhi	r4,70
 1000a44:	01000a50 	cmplti	r4,zero,41
 1000a48:	01000a50 	cmplti	r4,zero,41
 1000a4c:	0100182c 	andhi	r4,zero,96
 1000a50:	d9014d17 	ldw	r4,1332(sp)
 1000a54:	2000ce26 	beq	r4,zero,1000d90 <___vfprintf_internal_r+0x6d4>
 1000a58:	01400044 	movi	r5,1
 1000a5c:	d9800f04 	addi	r6,sp,60
 1000a60:	d9c14015 	stw	r7,1280(sp)
 1000a64:	d9414515 	stw	r5,1300(sp)
 1000a68:	d9814115 	stw	r6,1284(sp)
 1000a6c:	280f883a 	mov	r7,r5
 1000a70:	d9000f05 	stb	r4,60(sp)
 1000a74:	d8000405 	stb	zero,16(sp)
 1000a78:	d8014615 	stw	zero,1304(sp)
 1000a7c:	d8c14c17 	ldw	r3,1328(sp)
 1000a80:	1880008c 	andi	r2,r3,2
 1000a84:	1005003a 	cmpeq	r2,r2,zero
 1000a88:	d8815015 	stw	r2,1344(sp)
 1000a8c:	1000031e 	bne	r2,zero,1000a9c <___vfprintf_internal_r+0x3e0>
 1000a90:	d9014517 	ldw	r4,1300(sp)
 1000a94:	21000084 	addi	r4,r4,2
 1000a98:	d9014515 	stw	r4,1300(sp)
 1000a9c:	d9414c17 	ldw	r5,1328(sp)
 1000aa0:	2940210c 	andi	r5,r5,132
 1000aa4:	d9414e15 	stw	r5,1336(sp)
 1000aa8:	28002d1e 	bne	r5,zero,1000b60 <___vfprintf_internal_r+0x4a4>
 1000aac:	d9814a17 	ldw	r6,1320(sp)
 1000ab0:	d8814517 	ldw	r2,1300(sp)
 1000ab4:	30a1c83a 	sub	r16,r6,r2
 1000ab8:	0400290e 	bge	zero,r16,1000b60 <___vfprintf_internal_r+0x4a4>
 1000abc:	00800404 	movi	r2,16
 1000ac0:	1404580e 	bge	r2,r16,1001c24 <___vfprintf_internal_r+0x1568>
 1000ac4:	dc800e17 	ldw	r18,56(sp)
 1000ac8:	dc400d17 	ldw	r17,52(sp)
 1000acc:	1027883a 	mov	r19,r2
 1000ad0:	07004074 	movhi	fp,257
 1000ad4:	e7331884 	addi	fp,fp,-13214
 1000ad8:	050001c4 	movi	r20,7
 1000adc:	00000306 	br	1000aec <___vfprintf_internal_r+0x430>
 1000ae0:	843ffc04 	addi	r16,r16,-16
 1000ae4:	ad400204 	addi	r21,r21,8
 1000ae8:	9c00130e 	bge	r19,r16,1000b38 <___vfprintf_internal_r+0x47c>
 1000aec:	94800404 	addi	r18,r18,16
 1000af0:	8c400044 	addi	r17,r17,1
 1000af4:	af000015 	stw	fp,0(r21)
 1000af8:	acc00115 	stw	r19,4(r21)
 1000afc:	dc800e15 	stw	r18,56(sp)
 1000b00:	dc400d15 	stw	r17,52(sp)
 1000b04:	a47ff60e 	bge	r20,r17,1000ae0 <___vfprintf_internal_r+0x424>
 1000b08:	d9014f17 	ldw	r4,1340(sp)
 1000b0c:	b00b883a 	mov	r5,r22
 1000b10:	d9800c04 	addi	r6,sp,48
 1000b14:	d9c15115 	stw	r7,1348(sp)
 1000b18:	10006640 	call	1000664 <__sprint_r>
 1000b1c:	d9c15117 	ldw	r7,1348(sp)
 1000b20:	10009e1e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 1000b24:	843ffc04 	addi	r16,r16,-16
 1000b28:	dc800e17 	ldw	r18,56(sp)
 1000b2c:	dc400d17 	ldw	r17,52(sp)
 1000b30:	dd401904 	addi	r21,sp,100
 1000b34:	9c3fed16 	blt	r19,r16,1000aec <___vfprintf_internal_r+0x430>
 1000b38:	9425883a 	add	r18,r18,r16
 1000b3c:	8c400044 	addi	r17,r17,1
 1000b40:	008001c4 	movi	r2,7
 1000b44:	af000015 	stw	fp,0(r21)
 1000b48:	ac000115 	stw	r16,4(r21)
 1000b4c:	dc800e15 	stw	r18,56(sp)
 1000b50:	dc400d15 	stw	r17,52(sp)
 1000b54:	1441f516 	blt	r2,r17,100132c <___vfprintf_internal_r+0xc70>
 1000b58:	ad400204 	addi	r21,r21,8
 1000b5c:	00000206 	br	1000b68 <___vfprintf_internal_r+0x4ac>
 1000b60:	dc800e17 	ldw	r18,56(sp)
 1000b64:	dc400d17 	ldw	r17,52(sp)
 1000b68:	d8800407 	ldb	r2,16(sp)
 1000b6c:	10000b26 	beq	r2,zero,1000b9c <___vfprintf_internal_r+0x4e0>
 1000b70:	00800044 	movi	r2,1
 1000b74:	94800044 	addi	r18,r18,1
 1000b78:	8c400044 	addi	r17,r17,1
 1000b7c:	a8800115 	stw	r2,4(r21)
 1000b80:	d8c00404 	addi	r3,sp,16
 1000b84:	008001c4 	movi	r2,7
 1000b88:	a8c00015 	stw	r3,0(r21)
 1000b8c:	dc800e15 	stw	r18,56(sp)
 1000b90:	dc400d15 	stw	r17,52(sp)
 1000b94:	1441da16 	blt	r2,r17,1001300 <___vfprintf_internal_r+0xc44>
 1000b98:	ad400204 	addi	r21,r21,8
 1000b9c:	d9015017 	ldw	r4,1344(sp)
 1000ba0:	20000b1e 	bne	r4,zero,1000bd0 <___vfprintf_internal_r+0x514>
 1000ba4:	d8800444 	addi	r2,sp,17
 1000ba8:	94800084 	addi	r18,r18,2
 1000bac:	8c400044 	addi	r17,r17,1
 1000bb0:	a8800015 	stw	r2,0(r21)
 1000bb4:	00c00084 	movi	r3,2
 1000bb8:	008001c4 	movi	r2,7
 1000bbc:	a8c00115 	stw	r3,4(r21)
 1000bc0:	dc800e15 	stw	r18,56(sp)
 1000bc4:	dc400d15 	stw	r17,52(sp)
 1000bc8:	1441c216 	blt	r2,r17,10012d4 <___vfprintf_internal_r+0xc18>
 1000bcc:	ad400204 	addi	r21,r21,8
 1000bd0:	d9414e17 	ldw	r5,1336(sp)
 1000bd4:	00802004 	movi	r2,128
 1000bd8:	2880b126 	beq	r5,r2,1000ea0 <___vfprintf_internal_r+0x7e4>
 1000bdc:	d8c14617 	ldw	r3,1304(sp)
 1000be0:	19e1c83a 	sub	r16,r3,r7
 1000be4:	0400260e 	bge	zero,r16,1000c80 <___vfprintf_internal_r+0x5c4>
 1000be8:	00800404 	movi	r2,16
 1000bec:	1403c90e 	bge	r2,r16,1001b14 <___vfprintf_internal_r+0x1458>
 1000bf0:	1027883a 	mov	r19,r2
 1000bf4:	07004074 	movhi	fp,257
 1000bf8:	e7331484 	addi	fp,fp,-13230
 1000bfc:	050001c4 	movi	r20,7
 1000c00:	00000306 	br	1000c10 <___vfprintf_internal_r+0x554>
 1000c04:	843ffc04 	addi	r16,r16,-16
 1000c08:	ad400204 	addi	r21,r21,8
 1000c0c:	9c00130e 	bge	r19,r16,1000c5c <___vfprintf_internal_r+0x5a0>
 1000c10:	94800404 	addi	r18,r18,16
 1000c14:	8c400044 	addi	r17,r17,1
 1000c18:	af000015 	stw	fp,0(r21)
 1000c1c:	acc00115 	stw	r19,4(r21)
 1000c20:	dc800e15 	stw	r18,56(sp)
 1000c24:	dc400d15 	stw	r17,52(sp)
 1000c28:	a47ff60e 	bge	r20,r17,1000c04 <___vfprintf_internal_r+0x548>
 1000c2c:	d9014f17 	ldw	r4,1340(sp)
 1000c30:	b00b883a 	mov	r5,r22
 1000c34:	d9800c04 	addi	r6,sp,48
 1000c38:	d9c15115 	stw	r7,1348(sp)
 1000c3c:	10006640 	call	1000664 <__sprint_r>
 1000c40:	d9c15117 	ldw	r7,1348(sp)
 1000c44:	1000551e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 1000c48:	843ffc04 	addi	r16,r16,-16
 1000c4c:	dc800e17 	ldw	r18,56(sp)
 1000c50:	dc400d17 	ldw	r17,52(sp)
 1000c54:	dd401904 	addi	r21,sp,100
 1000c58:	9c3fed16 	blt	r19,r16,1000c10 <___vfprintf_internal_r+0x554>
 1000c5c:	9425883a 	add	r18,r18,r16
 1000c60:	8c400044 	addi	r17,r17,1
 1000c64:	008001c4 	movi	r2,7
 1000c68:	af000015 	stw	fp,0(r21)
 1000c6c:	ac000115 	stw	r16,4(r21)
 1000c70:	dc800e15 	stw	r18,56(sp)
 1000c74:	dc400d15 	stw	r17,52(sp)
 1000c78:	14418216 	blt	r2,r17,1001284 <___vfprintf_internal_r+0xbc8>
 1000c7c:	ad400204 	addi	r21,r21,8
 1000c80:	d9014c17 	ldw	r4,1328(sp)
 1000c84:	2080400c 	andi	r2,r4,256
 1000c88:	10004a1e 	bne	r2,zero,1000db4 <___vfprintf_internal_r+0x6f8>
 1000c8c:	d9414117 	ldw	r5,1284(sp)
 1000c90:	91e5883a 	add	r18,r18,r7
 1000c94:	8c400044 	addi	r17,r17,1
 1000c98:	008001c4 	movi	r2,7
 1000c9c:	a9400015 	stw	r5,0(r21)
 1000ca0:	a9c00115 	stw	r7,4(r21)
 1000ca4:	dc800e15 	stw	r18,56(sp)
 1000ca8:	dc400d15 	stw	r17,52(sp)
 1000cac:	14416716 	blt	r2,r17,100124c <___vfprintf_internal_r+0xb90>
 1000cb0:	a8c00204 	addi	r3,r21,8
 1000cb4:	d9814c17 	ldw	r6,1328(sp)
 1000cb8:	3080010c 	andi	r2,r6,4
 1000cbc:	10002826 	beq	r2,zero,1000d60 <___vfprintf_internal_r+0x6a4>
 1000cc0:	d8814a17 	ldw	r2,1320(sp)
 1000cc4:	d9014517 	ldw	r4,1300(sp)
 1000cc8:	1121c83a 	sub	r16,r2,r4
 1000ccc:	0400240e 	bge	zero,r16,1000d60 <___vfprintf_internal_r+0x6a4>
 1000cd0:	00800404 	movi	r2,16
 1000cd4:	14044f0e 	bge	r2,r16,1001e14 <___vfprintf_internal_r+0x1758>
 1000cd8:	dc400d17 	ldw	r17,52(sp)
 1000cdc:	1027883a 	mov	r19,r2
 1000ce0:	07004074 	movhi	fp,257
 1000ce4:	e7331884 	addi	fp,fp,-13214
 1000ce8:	050001c4 	movi	r20,7
 1000cec:	00000306 	br	1000cfc <___vfprintf_internal_r+0x640>
 1000cf0:	843ffc04 	addi	r16,r16,-16
 1000cf4:	18c00204 	addi	r3,r3,8
 1000cf8:	9c00110e 	bge	r19,r16,1000d40 <___vfprintf_internal_r+0x684>
 1000cfc:	94800404 	addi	r18,r18,16
 1000d00:	8c400044 	addi	r17,r17,1
 1000d04:	1f000015 	stw	fp,0(r3)
 1000d08:	1cc00115 	stw	r19,4(r3)
 1000d0c:	dc800e15 	stw	r18,56(sp)
 1000d10:	dc400d15 	stw	r17,52(sp)
 1000d14:	a47ff60e 	bge	r20,r17,1000cf0 <___vfprintf_internal_r+0x634>
 1000d18:	d9014f17 	ldw	r4,1340(sp)
 1000d1c:	b00b883a 	mov	r5,r22
 1000d20:	d9800c04 	addi	r6,sp,48
 1000d24:	10006640 	call	1000664 <__sprint_r>
 1000d28:	10001c1e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 1000d2c:	843ffc04 	addi	r16,r16,-16
 1000d30:	dc800e17 	ldw	r18,56(sp)
 1000d34:	dc400d17 	ldw	r17,52(sp)
 1000d38:	d8c01904 	addi	r3,sp,100
 1000d3c:	9c3fef16 	blt	r19,r16,1000cfc <___vfprintf_internal_r+0x640>
 1000d40:	9425883a 	add	r18,r18,r16
 1000d44:	8c400044 	addi	r17,r17,1
 1000d48:	008001c4 	movi	r2,7
 1000d4c:	1f000015 	stw	fp,0(r3)
 1000d50:	1c000115 	stw	r16,4(r3)
 1000d54:	dc800e15 	stw	r18,56(sp)
 1000d58:	dc400d15 	stw	r17,52(sp)
 1000d5c:	1440cb16 	blt	r2,r17,100108c <___vfprintf_internal_r+0x9d0>
 1000d60:	d8814a17 	ldw	r2,1320(sp)
 1000d64:	d9414517 	ldw	r5,1300(sp)
 1000d68:	1140010e 	bge	r2,r5,1000d70 <___vfprintf_internal_r+0x6b4>
 1000d6c:	2805883a 	mov	r2,r5
 1000d70:	d9814b17 	ldw	r6,1324(sp)
 1000d74:	308d883a 	add	r6,r6,r2
 1000d78:	d9814b15 	stw	r6,1324(sp)
 1000d7c:	90013b1e 	bne	r18,zero,100126c <___vfprintf_internal_r+0xbb0>
 1000d80:	d9c14017 	ldw	r7,1280(sp)
 1000d84:	dd401904 	addi	r21,sp,100
 1000d88:	d8000d15 	stw	zero,52(sp)
 1000d8c:	003ea706 	br	100082c <___vfprintf_internal_r+0x170>
 1000d90:	d8800e17 	ldw	r2,56(sp)
 1000d94:	10053f1e 	bne	r2,zero,1002294 <___vfprintf_internal_r+0x1bd8>
 1000d98:	d8000d15 	stw	zero,52(sp)
 1000d9c:	b080030b 	ldhu	r2,12(r22)
 1000da0:	1080100c 	andi	r2,r2,64
 1000da4:	103e8726 	beq	r2,zero,10007c4 <___vfprintf_internal_r+0x108>
 1000da8:	00bfffc4 	movi	r2,-1
 1000dac:	d8814b15 	stw	r2,1324(sp)
 1000db0:	003e8406 	br	10007c4 <___vfprintf_internal_r+0x108>
 1000db4:	d9814d17 	ldw	r6,1332(sp)
 1000db8:	00801944 	movi	r2,101
 1000dbc:	11806e16 	blt	r2,r6,1000f78 <___vfprintf_internal_r+0x8bc>
 1000dc0:	d9414717 	ldw	r5,1308(sp)
 1000dc4:	00c00044 	movi	r3,1
 1000dc8:	1943430e 	bge	r3,r5,1001ad8 <___vfprintf_internal_r+0x141c>
 1000dcc:	d8814117 	ldw	r2,1284(sp)
 1000dd0:	94800044 	addi	r18,r18,1
 1000dd4:	8c400044 	addi	r17,r17,1
 1000dd8:	a8800015 	stw	r2,0(r21)
 1000ddc:	008001c4 	movi	r2,7
 1000de0:	a8c00115 	stw	r3,4(r21)
 1000de4:	dc800e15 	stw	r18,56(sp)
 1000de8:	dc400d15 	stw	r17,52(sp)
 1000dec:	1441ca16 	blt	r2,r17,1001518 <___vfprintf_internal_r+0xe5c>
 1000df0:	a8c00204 	addi	r3,r21,8
 1000df4:	d9014917 	ldw	r4,1316(sp)
 1000df8:	00800044 	movi	r2,1
 1000dfc:	94800044 	addi	r18,r18,1
 1000e00:	8c400044 	addi	r17,r17,1
 1000e04:	18800115 	stw	r2,4(r3)
 1000e08:	008001c4 	movi	r2,7
 1000e0c:	19000015 	stw	r4,0(r3)
 1000e10:	dc800e15 	stw	r18,56(sp)
 1000e14:	dc400d15 	stw	r17,52(sp)
 1000e18:	1441b616 	blt	r2,r17,10014f4 <___vfprintf_internal_r+0xe38>
 1000e1c:	1cc00204 	addi	r19,r3,8
 1000e20:	d9014217 	ldw	r4,1288(sp)
 1000e24:	d9414317 	ldw	r5,1292(sp)
 1000e28:	000d883a 	mov	r6,zero
 1000e2c:	000f883a 	mov	r7,zero
 1000e30:	1008f0c0 	call	1008f0c <__nedf2>
 1000e34:	10017426 	beq	r2,zero,1001408 <___vfprintf_internal_r+0xd4c>
 1000e38:	d9414717 	ldw	r5,1308(sp)
 1000e3c:	d9814117 	ldw	r6,1284(sp)
 1000e40:	8c400044 	addi	r17,r17,1
 1000e44:	2c85883a 	add	r2,r5,r18
 1000e48:	14bfffc4 	addi	r18,r2,-1
 1000e4c:	28bfffc4 	addi	r2,r5,-1
 1000e50:	30c00044 	addi	r3,r6,1
 1000e54:	98800115 	stw	r2,4(r19)
 1000e58:	008001c4 	movi	r2,7
 1000e5c:	98c00015 	stw	r3,0(r19)
 1000e60:	dc800e15 	stw	r18,56(sp)
 1000e64:	dc400d15 	stw	r17,52(sp)
 1000e68:	14418e16 	blt	r2,r17,10014a4 <___vfprintf_internal_r+0xde8>
 1000e6c:	9cc00204 	addi	r19,r19,8
 1000e70:	d9414817 	ldw	r5,1312(sp)
 1000e74:	d8800804 	addi	r2,sp,32
 1000e78:	8c400044 	addi	r17,r17,1
 1000e7c:	9165883a 	add	r18,r18,r5
 1000e80:	98800015 	stw	r2,0(r19)
 1000e84:	008001c4 	movi	r2,7
 1000e88:	99400115 	stw	r5,4(r19)
 1000e8c:	dc800e15 	stw	r18,56(sp)
 1000e90:	dc400d15 	stw	r17,52(sp)
 1000e94:	1440ed16 	blt	r2,r17,100124c <___vfprintf_internal_r+0xb90>
 1000e98:	98c00204 	addi	r3,r19,8
 1000e9c:	003f8506 	br	1000cb4 <___vfprintf_internal_r+0x5f8>
 1000ea0:	d9814a17 	ldw	r6,1320(sp)
 1000ea4:	d8814517 	ldw	r2,1300(sp)
 1000ea8:	30a1c83a 	sub	r16,r6,r2
 1000eac:	043f4b0e 	bge	zero,r16,1000bdc <___vfprintf_internal_r+0x520>
 1000eb0:	00800404 	movi	r2,16
 1000eb4:	1404340e 	bge	r2,r16,1001f88 <___vfprintf_internal_r+0x18cc>
 1000eb8:	1027883a 	mov	r19,r2
 1000ebc:	07004074 	movhi	fp,257
 1000ec0:	e7331484 	addi	fp,fp,-13230
 1000ec4:	050001c4 	movi	r20,7
 1000ec8:	00000306 	br	1000ed8 <___vfprintf_internal_r+0x81c>
 1000ecc:	843ffc04 	addi	r16,r16,-16
 1000ed0:	ad400204 	addi	r21,r21,8
 1000ed4:	9c00130e 	bge	r19,r16,1000f24 <___vfprintf_internal_r+0x868>
 1000ed8:	94800404 	addi	r18,r18,16
 1000edc:	8c400044 	addi	r17,r17,1
 1000ee0:	af000015 	stw	fp,0(r21)
 1000ee4:	acc00115 	stw	r19,4(r21)
 1000ee8:	dc800e15 	stw	r18,56(sp)
 1000eec:	dc400d15 	stw	r17,52(sp)
 1000ef0:	a47ff60e 	bge	r20,r17,1000ecc <___vfprintf_internal_r+0x810>
 1000ef4:	d9014f17 	ldw	r4,1340(sp)
 1000ef8:	b00b883a 	mov	r5,r22
 1000efc:	d9800c04 	addi	r6,sp,48
 1000f00:	d9c15115 	stw	r7,1348(sp)
 1000f04:	10006640 	call	1000664 <__sprint_r>
 1000f08:	d9c15117 	ldw	r7,1348(sp)
 1000f0c:	103fa31e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 1000f10:	843ffc04 	addi	r16,r16,-16
 1000f14:	dc800e17 	ldw	r18,56(sp)
 1000f18:	dc400d17 	ldw	r17,52(sp)
 1000f1c:	dd401904 	addi	r21,sp,100
 1000f20:	9c3fed16 	blt	r19,r16,1000ed8 <___vfprintf_internal_r+0x81c>
 1000f24:	9425883a 	add	r18,r18,r16
 1000f28:	8c400044 	addi	r17,r17,1
 1000f2c:	008001c4 	movi	r2,7
 1000f30:	af000015 	stw	fp,0(r21)
 1000f34:	ac000115 	stw	r16,4(r21)
 1000f38:	dc800e15 	stw	r18,56(sp)
 1000f3c:	dc400d15 	stw	r17,52(sp)
 1000f40:	14416116 	blt	r2,r17,10014c8 <___vfprintf_internal_r+0xe0c>
 1000f44:	ad400204 	addi	r21,r21,8
 1000f48:	003f2406 	br	1000bdc <___vfprintf_internal_r+0x520>
 1000f4c:	d9014f17 	ldw	r4,1340(sp)
 1000f50:	100412c0 	call	100412c <__sinit>
 1000f54:	d9c15117 	ldw	r7,1348(sp)
 1000f58:	003def06 	br	1000718 <___vfprintf_internal_r+0x5c>
 1000f5c:	d9014f17 	ldw	r4,1340(sp)
 1000f60:	b00b883a 	mov	r5,r22
 1000f64:	d9c15115 	stw	r7,1348(sp)
 1000f68:	100258c0 	call	100258c <__swsetup_r>
 1000f6c:	d9c15117 	ldw	r7,1348(sp)
 1000f70:	103dee26 	beq	r2,zero,100072c <___vfprintf_internal_r+0x70>
 1000f74:	003f8c06 	br	1000da8 <___vfprintf_internal_r+0x6ec>
 1000f78:	d9014217 	ldw	r4,1288(sp)
 1000f7c:	d9414317 	ldw	r5,1292(sp)
 1000f80:	000d883a 	mov	r6,zero
 1000f84:	000f883a 	mov	r7,zero
 1000f88:	1008e840 	call	1008e84 <__eqdf2>
 1000f8c:	1000f21e 	bne	r2,zero,1001358 <___vfprintf_internal_r+0xc9c>
 1000f90:	00804074 	movhi	r2,257
 1000f94:	10b31404 	addi	r2,r2,-13232
 1000f98:	94800044 	addi	r18,r18,1
 1000f9c:	8c400044 	addi	r17,r17,1
 1000fa0:	a8800015 	stw	r2,0(r21)
 1000fa4:	00c00044 	movi	r3,1
 1000fa8:	008001c4 	movi	r2,7
 1000fac:	a8c00115 	stw	r3,4(r21)
 1000fb0:	dc800e15 	stw	r18,56(sp)
 1000fb4:	dc400d15 	stw	r17,52(sp)
 1000fb8:	1442fa16 	blt	r2,r17,1001ba4 <___vfprintf_internal_r+0x14e8>
 1000fbc:	a8c00204 	addi	r3,r21,8
 1000fc0:	d8800517 	ldw	r2,20(sp)
 1000fc4:	d9014717 	ldw	r4,1308(sp)
 1000fc8:	11015c0e 	bge	r2,r4,100153c <___vfprintf_internal_r+0xe80>
 1000fcc:	dc400d17 	ldw	r17,52(sp)
 1000fd0:	d9814917 	ldw	r6,1316(sp)
 1000fd4:	00800044 	movi	r2,1
 1000fd8:	94800044 	addi	r18,r18,1
 1000fdc:	8c400044 	addi	r17,r17,1
 1000fe0:	18800115 	stw	r2,4(r3)
 1000fe4:	008001c4 	movi	r2,7
 1000fe8:	19800015 	stw	r6,0(r3)
 1000fec:	dc800e15 	stw	r18,56(sp)
 1000ff0:	dc400d15 	stw	r17,52(sp)
 1000ff4:	14431016 	blt	r2,r17,1001c38 <___vfprintf_internal_r+0x157c>
 1000ff8:	18c00204 	addi	r3,r3,8
 1000ffc:	d8814717 	ldw	r2,1308(sp)
 1001000:	143fffc4 	addi	r16,r2,-1
 1001004:	043f2b0e 	bge	zero,r16,1000cb4 <___vfprintf_internal_r+0x5f8>
 1001008:	00800404 	movi	r2,16
 100100c:	1402a20e 	bge	r2,r16,1001a98 <___vfprintf_internal_r+0x13dc>
 1001010:	dc400d17 	ldw	r17,52(sp)
 1001014:	1027883a 	mov	r19,r2
 1001018:	07004074 	movhi	fp,257
 100101c:	e7331484 	addi	fp,fp,-13230
 1001020:	050001c4 	movi	r20,7
 1001024:	00000306 	br	1001034 <___vfprintf_internal_r+0x978>
 1001028:	18c00204 	addi	r3,r3,8
 100102c:	843ffc04 	addi	r16,r16,-16
 1001030:	9c029c0e 	bge	r19,r16,1001aa4 <___vfprintf_internal_r+0x13e8>
 1001034:	94800404 	addi	r18,r18,16
 1001038:	8c400044 	addi	r17,r17,1
 100103c:	1f000015 	stw	fp,0(r3)
 1001040:	1cc00115 	stw	r19,4(r3)
 1001044:	dc800e15 	stw	r18,56(sp)
 1001048:	dc400d15 	stw	r17,52(sp)
 100104c:	a47ff60e 	bge	r20,r17,1001028 <___vfprintf_internal_r+0x96c>
 1001050:	d9014f17 	ldw	r4,1340(sp)
 1001054:	b00b883a 	mov	r5,r22
 1001058:	d9800c04 	addi	r6,sp,48
 100105c:	10006640 	call	1000664 <__sprint_r>
 1001060:	103f4e1e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 1001064:	dc800e17 	ldw	r18,56(sp)
 1001068:	dc400d17 	ldw	r17,52(sp)
 100106c:	d8c01904 	addi	r3,sp,100
 1001070:	003fee06 	br	100102c <___vfprintf_internal_r+0x970>
 1001074:	d8802c0b 	ldhu	r2,176(sp)
 1001078:	00ffffc4 	movi	r3,-1
 100107c:	d8c14b15 	stw	r3,1324(sp)
 1001080:	1080100c 	andi	r2,r2,64
 1001084:	103dcc1e 	bne	r2,zero,10007b8 <___vfprintf_internal_r+0xfc>
 1001088:	003dce06 	br	10007c4 <___vfprintf_internal_r+0x108>
 100108c:	d9014f17 	ldw	r4,1340(sp)
 1001090:	b00b883a 	mov	r5,r22
 1001094:	d9800c04 	addi	r6,sp,48
 1001098:	10006640 	call	1000664 <__sprint_r>
 100109c:	103f3f1e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 10010a0:	dc800e17 	ldw	r18,56(sp)
 10010a4:	003f2e06 	br	1000d60 <___vfprintf_internal_r+0x6a4>
 10010a8:	d9414c17 	ldw	r5,1328(sp)
 10010ac:	29400414 	ori	r5,r5,16
 10010b0:	d9414c15 	stw	r5,1328(sp)
 10010b4:	d9814c17 	ldw	r6,1328(sp)
 10010b8:	3080080c 	andi	r2,r6,32
 10010bc:	10014f1e 	bne	r2,zero,10015fc <___vfprintf_internal_r+0xf40>
 10010c0:	d8c14c17 	ldw	r3,1328(sp)
 10010c4:	1880040c 	andi	r2,r3,16
 10010c8:	1002ea1e 	bne	r2,zero,1001c74 <___vfprintf_internal_r+0x15b8>
 10010cc:	d9014c17 	ldw	r4,1328(sp)
 10010d0:	2080100c 	andi	r2,r4,64
 10010d4:	1002e726 	beq	r2,zero,1001c74 <___vfprintf_internal_r+0x15b8>
 10010d8:	3880000f 	ldh	r2,0(r7)
 10010dc:	39c00104 	addi	r7,r7,4
 10010e0:	d9c14015 	stw	r7,1280(sp)
 10010e4:	1023d7fa 	srai	r17,r2,31
 10010e8:	1021883a 	mov	r16,r2
 10010ec:	88037216 	blt	r17,zero,1001eb8 <___vfprintf_internal_r+0x17fc>
 10010f0:	01000044 	movi	r4,1
 10010f4:	98000416 	blt	r19,zero,1001108 <___vfprintf_internal_r+0xa4c>
 10010f8:	d8c14c17 	ldw	r3,1328(sp)
 10010fc:	00bfdfc4 	movi	r2,-129
 1001100:	1886703a 	and	r3,r3,r2
 1001104:	d8c14c15 	stw	r3,1328(sp)
 1001108:	8444b03a 	or	r2,r16,r17
 100110c:	1002261e 	bne	r2,zero,10019a8 <___vfprintf_internal_r+0x12ec>
 1001110:	9802251e 	bne	r19,zero,10019a8 <___vfprintf_internal_r+0x12ec>
 1001114:	20803fcc 	andi	r2,r4,255
 1001118:	10029b26 	beq	r2,zero,1001b88 <___vfprintf_internal_r+0x14cc>
 100111c:	d8c01904 	addi	r3,sp,100
 1001120:	dd000f04 	addi	r20,sp,60
 1001124:	d8c14115 	stw	r3,1284(sp)
 1001128:	d8c14117 	ldw	r3,1284(sp)
 100112c:	dcc14515 	stw	r19,1300(sp)
 1001130:	a0c5c83a 	sub	r2,r20,r3
 1001134:	11c00a04 	addi	r7,r2,40
 1001138:	99c0010e 	bge	r19,r7,1001140 <___vfprintf_internal_r+0xa84>
 100113c:	d9c14515 	stw	r7,1300(sp)
 1001140:	dcc14615 	stw	r19,1304(sp)
 1001144:	d8800407 	ldb	r2,16(sp)
 1001148:	103e4c26 	beq	r2,zero,1000a7c <___vfprintf_internal_r+0x3c0>
 100114c:	d8814517 	ldw	r2,1300(sp)
 1001150:	10800044 	addi	r2,r2,1
 1001154:	d8814515 	stw	r2,1300(sp)
 1001158:	003e4806 	br	1000a7c <___vfprintf_internal_r+0x3c0>
 100115c:	d9814c17 	ldw	r6,1328(sp)
 1001160:	31800414 	ori	r6,r6,16
 1001164:	d9814c15 	stw	r6,1328(sp)
 1001168:	d8c14c17 	ldw	r3,1328(sp)
 100116c:	1880080c 	andi	r2,r3,32
 1001170:	1001271e 	bne	r2,zero,1001610 <___vfprintf_internal_r+0xf54>
 1001174:	d9414c17 	ldw	r5,1328(sp)
 1001178:	2880040c 	andi	r2,r5,16
 100117c:	1002b61e 	bne	r2,zero,1001c58 <___vfprintf_internal_r+0x159c>
 1001180:	d9814c17 	ldw	r6,1328(sp)
 1001184:	3080100c 	andi	r2,r6,64
 1001188:	1002b326 	beq	r2,zero,1001c58 <___vfprintf_internal_r+0x159c>
 100118c:	3c00000b 	ldhu	r16,0(r7)
 1001190:	0009883a 	mov	r4,zero
 1001194:	39c00104 	addi	r7,r7,4
 1001198:	0023883a 	mov	r17,zero
 100119c:	d9c14015 	stw	r7,1280(sp)
 10011a0:	d8000405 	stb	zero,16(sp)
 10011a4:	003fd306 	br	10010f4 <___vfprintf_internal_r+0xa38>
 10011a8:	d9014c17 	ldw	r4,1328(sp)
 10011ac:	21000414 	ori	r4,r4,16
 10011b0:	d9014c15 	stw	r4,1328(sp)
 10011b4:	d9414c17 	ldw	r5,1328(sp)
 10011b8:	2880080c 	andi	r2,r5,32
 10011bc:	1001081e 	bne	r2,zero,10015e0 <___vfprintf_internal_r+0xf24>
 10011c0:	d8c14c17 	ldw	r3,1328(sp)
 10011c4:	1880040c 	andi	r2,r3,16
 10011c8:	1002b01e 	bne	r2,zero,1001c8c <___vfprintf_internal_r+0x15d0>
 10011cc:	d9014c17 	ldw	r4,1328(sp)
 10011d0:	2080100c 	andi	r2,r4,64
 10011d4:	1002ad26 	beq	r2,zero,1001c8c <___vfprintf_internal_r+0x15d0>
 10011d8:	3c00000b 	ldhu	r16,0(r7)
 10011dc:	01000044 	movi	r4,1
 10011e0:	39c00104 	addi	r7,r7,4
 10011e4:	0023883a 	mov	r17,zero
 10011e8:	d9c14015 	stw	r7,1280(sp)
 10011ec:	d8000405 	stb	zero,16(sp)
 10011f0:	003fc006 	br	10010f4 <___vfprintf_internal_r+0xa38>
 10011f4:	d9014f17 	ldw	r4,1340(sp)
 10011f8:	b00b883a 	mov	r5,r22
 10011fc:	d9800c04 	addi	r6,sp,48
 1001200:	10006640 	call	1000664 <__sprint_r>
 1001204:	103ee51e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 1001208:	dc800e17 	ldw	r18,56(sp)
 100120c:	d8c01904 	addi	r3,sp,100
 1001210:	d9814c17 	ldw	r6,1328(sp)
 1001214:	3080004c 	andi	r2,r6,1
 1001218:	1005003a 	cmpeq	r2,r2,zero
 100121c:	103ea51e 	bne	r2,zero,1000cb4 <___vfprintf_internal_r+0x5f8>
 1001220:	00800044 	movi	r2,1
 1001224:	dc400d17 	ldw	r17,52(sp)
 1001228:	18800115 	stw	r2,4(r3)
 100122c:	d8814917 	ldw	r2,1316(sp)
 1001230:	94800044 	addi	r18,r18,1
 1001234:	8c400044 	addi	r17,r17,1
 1001238:	18800015 	stw	r2,0(r3)
 100123c:	008001c4 	movi	r2,7
 1001240:	dc800e15 	stw	r18,56(sp)
 1001244:	dc400d15 	stw	r17,52(sp)
 1001248:	14421e0e 	bge	r2,r17,1001ac4 <___vfprintf_internal_r+0x1408>
 100124c:	d9014f17 	ldw	r4,1340(sp)
 1001250:	b00b883a 	mov	r5,r22
 1001254:	d9800c04 	addi	r6,sp,48
 1001258:	10006640 	call	1000664 <__sprint_r>
 100125c:	103ecf1e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 1001260:	dc800e17 	ldw	r18,56(sp)
 1001264:	d8c01904 	addi	r3,sp,100
 1001268:	003e9206 	br	1000cb4 <___vfprintf_internal_r+0x5f8>
 100126c:	d9014f17 	ldw	r4,1340(sp)
 1001270:	b00b883a 	mov	r5,r22
 1001274:	d9800c04 	addi	r6,sp,48
 1001278:	10006640 	call	1000664 <__sprint_r>
 100127c:	103ec026 	beq	r2,zero,1000d80 <___vfprintf_internal_r+0x6c4>
 1001280:	003ec606 	br	1000d9c <___vfprintf_internal_r+0x6e0>
 1001284:	d9014f17 	ldw	r4,1340(sp)
 1001288:	b00b883a 	mov	r5,r22
 100128c:	d9800c04 	addi	r6,sp,48
 1001290:	d9c15115 	stw	r7,1348(sp)
 1001294:	10006640 	call	1000664 <__sprint_r>
 1001298:	d9c15117 	ldw	r7,1348(sp)
 100129c:	103ebf1e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 10012a0:	dc800e17 	ldw	r18,56(sp)
 10012a4:	dc400d17 	ldw	r17,52(sp)
 10012a8:	dd401904 	addi	r21,sp,100
 10012ac:	003e7406 	br	1000c80 <___vfprintf_internal_r+0x5c4>
 10012b0:	d9014f17 	ldw	r4,1340(sp)
 10012b4:	b00b883a 	mov	r5,r22
 10012b8:	d9800c04 	addi	r6,sp,48
 10012bc:	d9c15115 	stw	r7,1348(sp)
 10012c0:	10006640 	call	1000664 <__sprint_r>
 10012c4:	d9c15117 	ldw	r7,1348(sp)
 10012c8:	103eb41e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 10012cc:	dd401904 	addi	r21,sp,100
 10012d0:	003d6d06 	br	1000888 <___vfprintf_internal_r+0x1cc>
 10012d4:	d9014f17 	ldw	r4,1340(sp)
 10012d8:	b00b883a 	mov	r5,r22
 10012dc:	d9800c04 	addi	r6,sp,48
 10012e0:	d9c15115 	stw	r7,1348(sp)
 10012e4:	10006640 	call	1000664 <__sprint_r>
 10012e8:	d9c15117 	ldw	r7,1348(sp)
 10012ec:	103eab1e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 10012f0:	dc800e17 	ldw	r18,56(sp)
 10012f4:	dc400d17 	ldw	r17,52(sp)
 10012f8:	dd401904 	addi	r21,sp,100
 10012fc:	003e3406 	br	1000bd0 <___vfprintf_internal_r+0x514>
 1001300:	d9014f17 	ldw	r4,1340(sp)
 1001304:	b00b883a 	mov	r5,r22
 1001308:	d9800c04 	addi	r6,sp,48
 100130c:	d9c15115 	stw	r7,1348(sp)
 1001310:	10006640 	call	1000664 <__sprint_r>
 1001314:	d9c15117 	ldw	r7,1348(sp)
 1001318:	103ea01e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 100131c:	dc800e17 	ldw	r18,56(sp)
 1001320:	dc400d17 	ldw	r17,52(sp)
 1001324:	dd401904 	addi	r21,sp,100
 1001328:	003e1c06 	br	1000b9c <___vfprintf_internal_r+0x4e0>
 100132c:	d9014f17 	ldw	r4,1340(sp)
 1001330:	b00b883a 	mov	r5,r22
 1001334:	d9800c04 	addi	r6,sp,48
 1001338:	d9c15115 	stw	r7,1348(sp)
 100133c:	10006640 	call	1000664 <__sprint_r>
 1001340:	d9c15117 	ldw	r7,1348(sp)
 1001344:	103e951e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 1001348:	dc800e17 	ldw	r18,56(sp)
 100134c:	dc400d17 	ldw	r17,52(sp)
 1001350:	dd401904 	addi	r21,sp,100
 1001354:	003e0406 	br	1000b68 <___vfprintf_internal_r+0x4ac>
 1001358:	d9000517 	ldw	r4,20(sp)
 100135c:	0102520e 	bge	zero,r4,1001ca8 <___vfprintf_internal_r+0x15ec>
 1001360:	d9814717 	ldw	r6,1308(sp)
 1001364:	21807a16 	blt	r4,r6,1001550 <___vfprintf_internal_r+0xe94>
 1001368:	d8814117 	ldw	r2,1284(sp)
 100136c:	91a5883a 	add	r18,r18,r6
 1001370:	8c400044 	addi	r17,r17,1
 1001374:	a8800015 	stw	r2,0(r21)
 1001378:	008001c4 	movi	r2,7
 100137c:	a9800115 	stw	r6,4(r21)
 1001380:	dc800e15 	stw	r18,56(sp)
 1001384:	dc400d15 	stw	r17,52(sp)
 1001388:	1442f616 	blt	r2,r17,1001f64 <___vfprintf_internal_r+0x18a8>
 100138c:	a8c00204 	addi	r3,r21,8
 1001390:	d9414717 	ldw	r5,1308(sp)
 1001394:	2161c83a 	sub	r16,r4,r5
 1001398:	043f9d0e 	bge	zero,r16,1001210 <___vfprintf_internal_r+0xb54>
 100139c:	00800404 	movi	r2,16
 10013a0:	1402130e 	bge	r2,r16,1001bf0 <___vfprintf_internal_r+0x1534>
 10013a4:	dc400d17 	ldw	r17,52(sp)
 10013a8:	1027883a 	mov	r19,r2
 10013ac:	07004074 	movhi	fp,257
 10013b0:	e7331484 	addi	fp,fp,-13230
 10013b4:	050001c4 	movi	r20,7
 10013b8:	00000306 	br	10013c8 <___vfprintf_internal_r+0xd0c>
 10013bc:	18c00204 	addi	r3,r3,8
 10013c0:	843ffc04 	addi	r16,r16,-16
 10013c4:	9c020d0e 	bge	r19,r16,1001bfc <___vfprintf_internal_r+0x1540>
 10013c8:	94800404 	addi	r18,r18,16
 10013cc:	8c400044 	addi	r17,r17,1
 10013d0:	1f000015 	stw	fp,0(r3)
 10013d4:	1cc00115 	stw	r19,4(r3)
 10013d8:	dc800e15 	stw	r18,56(sp)
 10013dc:	dc400d15 	stw	r17,52(sp)
 10013e0:	a47ff60e 	bge	r20,r17,10013bc <___vfprintf_internal_r+0xd00>
 10013e4:	d9014f17 	ldw	r4,1340(sp)
 10013e8:	b00b883a 	mov	r5,r22
 10013ec:	d9800c04 	addi	r6,sp,48
 10013f0:	10006640 	call	1000664 <__sprint_r>
 10013f4:	103e691e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 10013f8:	dc800e17 	ldw	r18,56(sp)
 10013fc:	dc400d17 	ldw	r17,52(sp)
 1001400:	d8c01904 	addi	r3,sp,100
 1001404:	003fee06 	br	10013c0 <___vfprintf_internal_r+0xd04>
 1001408:	d8814717 	ldw	r2,1308(sp)
 100140c:	143fffc4 	addi	r16,r2,-1
 1001410:	043e970e 	bge	zero,r16,1000e70 <___vfprintf_internal_r+0x7b4>
 1001414:	00800404 	movi	r2,16
 1001418:	1400180e 	bge	r2,r16,100147c <___vfprintf_internal_r+0xdc0>
 100141c:	1029883a 	mov	r20,r2
 1001420:	07004074 	movhi	fp,257
 1001424:	e7331484 	addi	fp,fp,-13230
 1001428:	054001c4 	movi	r21,7
 100142c:	00000306 	br	100143c <___vfprintf_internal_r+0xd80>
 1001430:	9cc00204 	addi	r19,r19,8
 1001434:	843ffc04 	addi	r16,r16,-16
 1001438:	a400120e 	bge	r20,r16,1001484 <___vfprintf_internal_r+0xdc8>
 100143c:	94800404 	addi	r18,r18,16
 1001440:	8c400044 	addi	r17,r17,1
 1001444:	9f000015 	stw	fp,0(r19)
 1001448:	9d000115 	stw	r20,4(r19)
 100144c:	dc800e15 	stw	r18,56(sp)
 1001450:	dc400d15 	stw	r17,52(sp)
 1001454:	ac7ff60e 	bge	r21,r17,1001430 <___vfprintf_internal_r+0xd74>
 1001458:	d9014f17 	ldw	r4,1340(sp)
 100145c:	b00b883a 	mov	r5,r22
 1001460:	d9800c04 	addi	r6,sp,48
 1001464:	10006640 	call	1000664 <__sprint_r>
 1001468:	103e4c1e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 100146c:	dc800e17 	ldw	r18,56(sp)
 1001470:	dc400d17 	ldw	r17,52(sp)
 1001474:	dcc01904 	addi	r19,sp,100
 1001478:	003fee06 	br	1001434 <___vfprintf_internal_r+0xd78>
 100147c:	07004074 	movhi	fp,257
 1001480:	e7331484 	addi	fp,fp,-13230
 1001484:	9425883a 	add	r18,r18,r16
 1001488:	8c400044 	addi	r17,r17,1
 100148c:	008001c4 	movi	r2,7
 1001490:	9f000015 	stw	fp,0(r19)
 1001494:	9c000115 	stw	r16,4(r19)
 1001498:	dc800e15 	stw	r18,56(sp)
 100149c:	dc400d15 	stw	r17,52(sp)
 10014a0:	147e720e 	bge	r2,r17,1000e6c <___vfprintf_internal_r+0x7b0>
 10014a4:	d9014f17 	ldw	r4,1340(sp)
 10014a8:	b00b883a 	mov	r5,r22
 10014ac:	d9800c04 	addi	r6,sp,48
 10014b0:	10006640 	call	1000664 <__sprint_r>
 10014b4:	103e391e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 10014b8:	dc800e17 	ldw	r18,56(sp)
 10014bc:	dc400d17 	ldw	r17,52(sp)
 10014c0:	dcc01904 	addi	r19,sp,100
 10014c4:	003e6a06 	br	1000e70 <___vfprintf_internal_r+0x7b4>
 10014c8:	d9014f17 	ldw	r4,1340(sp)
 10014cc:	b00b883a 	mov	r5,r22
 10014d0:	d9800c04 	addi	r6,sp,48
 10014d4:	d9c15115 	stw	r7,1348(sp)
 10014d8:	10006640 	call	1000664 <__sprint_r>
 10014dc:	d9c15117 	ldw	r7,1348(sp)
 10014e0:	103e2e1e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 10014e4:	dc800e17 	ldw	r18,56(sp)
 10014e8:	dc400d17 	ldw	r17,52(sp)
 10014ec:	dd401904 	addi	r21,sp,100
 10014f0:	003dba06 	br	1000bdc <___vfprintf_internal_r+0x520>
 10014f4:	d9014f17 	ldw	r4,1340(sp)
 10014f8:	b00b883a 	mov	r5,r22
 10014fc:	d9800c04 	addi	r6,sp,48
 1001500:	10006640 	call	1000664 <__sprint_r>
 1001504:	103e251e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 1001508:	dc800e17 	ldw	r18,56(sp)
 100150c:	dc400d17 	ldw	r17,52(sp)
 1001510:	dcc01904 	addi	r19,sp,100
 1001514:	003e4206 	br	1000e20 <___vfprintf_internal_r+0x764>
 1001518:	d9014f17 	ldw	r4,1340(sp)
 100151c:	b00b883a 	mov	r5,r22
 1001520:	d9800c04 	addi	r6,sp,48
 1001524:	10006640 	call	1000664 <__sprint_r>
 1001528:	103e1c1e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 100152c:	dc800e17 	ldw	r18,56(sp)
 1001530:	dc400d17 	ldw	r17,52(sp)
 1001534:	d8c01904 	addi	r3,sp,100
 1001538:	003e2e06 	br	1000df4 <___vfprintf_internal_r+0x738>
 100153c:	d9414c17 	ldw	r5,1328(sp)
 1001540:	2880004c 	andi	r2,r5,1
 1001544:	1005003a 	cmpeq	r2,r2,zero
 1001548:	103dda1e 	bne	r2,zero,1000cb4 <___vfprintf_internal_r+0x5f8>
 100154c:	003e9f06 	br	1000fcc <___vfprintf_internal_r+0x910>
 1001550:	d8c14117 	ldw	r3,1284(sp)
 1001554:	9125883a 	add	r18,r18,r4
 1001558:	8c400044 	addi	r17,r17,1
 100155c:	008001c4 	movi	r2,7
 1001560:	a8c00015 	stw	r3,0(r21)
 1001564:	a9000115 	stw	r4,4(r21)
 1001568:	dc800e15 	stw	r18,56(sp)
 100156c:	dc400d15 	stw	r17,52(sp)
 1001570:	14426616 	blt	r2,r17,1001f0c <___vfprintf_internal_r+0x1850>
 1001574:	a8c00204 	addi	r3,r21,8
 1001578:	d9414917 	ldw	r5,1316(sp)
 100157c:	00800044 	movi	r2,1
 1001580:	94800044 	addi	r18,r18,1
 1001584:	8c400044 	addi	r17,r17,1
 1001588:	18800115 	stw	r2,4(r3)
 100158c:	008001c4 	movi	r2,7
 1001590:	19400015 	stw	r5,0(r3)
 1001594:	dc800e15 	stw	r18,56(sp)
 1001598:	dc400d15 	stw	r17,52(sp)
 100159c:	2021883a 	mov	r16,r4
 10015a0:	14425016 	blt	r2,r17,1001ee4 <___vfprintf_internal_r+0x1828>
 10015a4:	19400204 	addi	r5,r3,8
 10015a8:	d9814717 	ldw	r6,1308(sp)
 10015ac:	8c400044 	addi	r17,r17,1
 10015b0:	dc400d15 	stw	r17,52(sp)
 10015b4:	3107c83a 	sub	r3,r6,r4
 10015b8:	d9014117 	ldw	r4,1284(sp)
 10015bc:	90e5883a 	add	r18,r18,r3
 10015c0:	28c00115 	stw	r3,4(r5)
 10015c4:	8105883a 	add	r2,r16,r4
 10015c8:	28800015 	stw	r2,0(r5)
 10015cc:	008001c4 	movi	r2,7
 10015d0:	dc800e15 	stw	r18,56(sp)
 10015d4:	147f1d16 	blt	r2,r17,100124c <___vfprintf_internal_r+0xb90>
 10015d8:	28c00204 	addi	r3,r5,8
 10015dc:	003db506 	br	1000cb4 <___vfprintf_internal_r+0x5f8>
 10015e0:	3c000017 	ldw	r16,0(r7)
 10015e4:	3c400117 	ldw	r17,4(r7)
 10015e8:	39800204 	addi	r6,r7,8
 10015ec:	01000044 	movi	r4,1
 10015f0:	d9814015 	stw	r6,1280(sp)
 10015f4:	d8000405 	stb	zero,16(sp)
 10015f8:	003ebe06 	br	10010f4 <___vfprintf_internal_r+0xa38>
 10015fc:	3c000017 	ldw	r16,0(r7)
 1001600:	3c400117 	ldw	r17,4(r7)
 1001604:	38800204 	addi	r2,r7,8
 1001608:	d8814015 	stw	r2,1280(sp)
 100160c:	003eb706 	br	10010ec <___vfprintf_internal_r+0xa30>
 1001610:	3c000017 	ldw	r16,0(r7)
 1001614:	3c400117 	ldw	r17,4(r7)
 1001618:	39000204 	addi	r4,r7,8
 100161c:	d9014015 	stw	r4,1280(sp)
 1001620:	0009883a 	mov	r4,zero
 1001624:	d8000405 	stb	zero,16(sp)
 1001628:	003eb206 	br	10010f4 <___vfprintf_internal_r+0xa38>
 100162c:	38c00017 	ldw	r3,0(r7)
 1001630:	39c00104 	addi	r7,r7,4
 1001634:	d8c14a15 	stw	r3,1320(sp)
 1001638:	1800d10e 	bge	r3,zero,1001980 <___vfprintf_internal_r+0x12c4>
 100163c:	00c7c83a 	sub	r3,zero,r3
 1001640:	d8c14a15 	stw	r3,1320(sp)
 1001644:	d9014c17 	ldw	r4,1328(sp)
 1001648:	b8c00007 	ldb	r3,0(r23)
 100164c:	21000114 	ori	r4,r4,4
 1001650:	d9014c15 	stw	r4,1328(sp)
 1001654:	003c9806 	br	10008b8 <___vfprintf_internal_r+0x1fc>
 1001658:	d9814c17 	ldw	r6,1328(sp)
 100165c:	3080080c 	andi	r2,r6,32
 1001660:	1001f026 	beq	r2,zero,1001e24 <___vfprintf_internal_r+0x1768>
 1001664:	d9014b17 	ldw	r4,1324(sp)
 1001668:	38800017 	ldw	r2,0(r7)
 100166c:	39c00104 	addi	r7,r7,4
 1001670:	d9c14015 	stw	r7,1280(sp)
 1001674:	2007d7fa 	srai	r3,r4,31
 1001678:	d9c14017 	ldw	r7,1280(sp)
 100167c:	11000015 	stw	r4,0(r2)
 1001680:	10c00115 	stw	r3,4(r2)
 1001684:	003c6906 	br	100082c <___vfprintf_internal_r+0x170>
 1001688:	b8c00007 	ldb	r3,0(r23)
 100168c:	00801b04 	movi	r2,108
 1001690:	18824f26 	beq	r3,r2,1001fd0 <___vfprintf_internal_r+0x1914>
 1001694:	d9414c17 	ldw	r5,1328(sp)
 1001698:	29400414 	ori	r5,r5,16
 100169c:	d9414c15 	stw	r5,1328(sp)
 10016a0:	003c8506 	br	10008b8 <___vfprintf_internal_r+0x1fc>
 10016a4:	d9814c17 	ldw	r6,1328(sp)
 10016a8:	b8c00007 	ldb	r3,0(r23)
 10016ac:	31800814 	ori	r6,r6,32
 10016b0:	d9814c15 	stw	r6,1328(sp)
 10016b4:	003c8006 	br	10008b8 <___vfprintf_internal_r+0x1fc>
 10016b8:	d8814c17 	ldw	r2,1328(sp)
 10016bc:	3c000017 	ldw	r16,0(r7)
 10016c0:	00c01e04 	movi	r3,120
 10016c4:	10800094 	ori	r2,r2,2
 10016c8:	d8814c15 	stw	r2,1328(sp)
 10016cc:	39c00104 	addi	r7,r7,4
 10016d0:	01404074 	movhi	r5,257
 10016d4:	2972fd04 	addi	r5,r5,-13324
 10016d8:	00800c04 	movi	r2,48
 10016dc:	0023883a 	mov	r17,zero
 10016e0:	01000084 	movi	r4,2
 10016e4:	d9c14015 	stw	r7,1280(sp)
 10016e8:	d8c14d15 	stw	r3,1332(sp)
 10016ec:	d9414415 	stw	r5,1296(sp)
 10016f0:	d8800445 	stb	r2,17(sp)
 10016f4:	d8c00485 	stb	r3,18(sp)
 10016f8:	d8000405 	stb	zero,16(sp)
 10016fc:	003e7d06 	br	10010f4 <___vfprintf_internal_r+0xa38>
 1001700:	d8814c17 	ldw	r2,1328(sp)
 1001704:	b8c00007 	ldb	r3,0(r23)
 1001708:	10801014 	ori	r2,r2,64
 100170c:	d8814c15 	stw	r2,1328(sp)
 1001710:	003c6906 	br	10008b8 <___vfprintf_internal_r+0x1fc>
 1001714:	d9414c17 	ldw	r5,1328(sp)
 1001718:	2880020c 	andi	r2,r5,8
 100171c:	1001df26 	beq	r2,zero,1001e9c <___vfprintf_internal_r+0x17e0>
 1001720:	39800017 	ldw	r6,0(r7)
 1001724:	38800204 	addi	r2,r7,8
 1001728:	d8814015 	stw	r2,1280(sp)
 100172c:	d9814215 	stw	r6,1288(sp)
 1001730:	39c00117 	ldw	r7,4(r7)
 1001734:	d9c14315 	stw	r7,1292(sp)
 1001738:	d9014217 	ldw	r4,1288(sp)
 100173c:	d9414317 	ldw	r5,1292(sp)
 1001740:	100705c0 	call	100705c <__isinfd>
 1001744:	10021726 	beq	r2,zero,1001fa4 <___vfprintf_internal_r+0x18e8>
 1001748:	d9014217 	ldw	r4,1288(sp)
 100174c:	d9414317 	ldw	r5,1292(sp)
 1001750:	000d883a 	mov	r6,zero
 1001754:	000f883a 	mov	r7,zero
 1001758:	10090a40 	call	10090a4 <__ltdf2>
 100175c:	1002ca16 	blt	r2,zero,1002288 <___vfprintf_internal_r+0x1bcc>
 1001760:	d9414d17 	ldw	r5,1332(sp)
 1001764:	008011c4 	movi	r2,71
 1001768:	11420a16 	blt	r2,r5,1001f94 <___vfprintf_internal_r+0x18d8>
 100176c:	01804074 	movhi	r6,257
 1001770:	31b30204 	addi	r6,r6,-13304
 1001774:	d9814115 	stw	r6,1284(sp)
 1001778:	d9014c17 	ldw	r4,1328(sp)
 100177c:	00c000c4 	movi	r3,3
 1001780:	00bfdfc4 	movi	r2,-129
 1001784:	2088703a 	and	r4,r4,r2
 1001788:	180f883a 	mov	r7,r3
 100178c:	d8c14515 	stw	r3,1300(sp)
 1001790:	d9014c15 	stw	r4,1328(sp)
 1001794:	d8014615 	stw	zero,1304(sp)
 1001798:	003e6a06 	br	1001144 <___vfprintf_internal_r+0xa88>
 100179c:	38800017 	ldw	r2,0(r7)
 10017a0:	00c00044 	movi	r3,1
 10017a4:	39c00104 	addi	r7,r7,4
 10017a8:	d9c14015 	stw	r7,1280(sp)
 10017ac:	d9000f04 	addi	r4,sp,60
 10017b0:	180f883a 	mov	r7,r3
 10017b4:	d8c14515 	stw	r3,1300(sp)
 10017b8:	d9014115 	stw	r4,1284(sp)
 10017bc:	d8800f05 	stb	r2,60(sp)
 10017c0:	d8000405 	stb	zero,16(sp)
 10017c4:	003cac06 	br	1000a78 <___vfprintf_internal_r+0x3bc>
 10017c8:	01404074 	movhi	r5,257
 10017cc:	29730804 	addi	r5,r5,-13280
 10017d0:	d9414415 	stw	r5,1296(sp)
 10017d4:	d9814c17 	ldw	r6,1328(sp)
 10017d8:	3080080c 	andi	r2,r6,32
 10017dc:	1000f926 	beq	r2,zero,1001bc4 <___vfprintf_internal_r+0x1508>
 10017e0:	3c000017 	ldw	r16,0(r7)
 10017e4:	3c400117 	ldw	r17,4(r7)
 10017e8:	38800204 	addi	r2,r7,8
 10017ec:	d8814015 	stw	r2,1280(sp)
 10017f0:	d9414c17 	ldw	r5,1328(sp)
 10017f4:	2880004c 	andi	r2,r5,1
 10017f8:	1005003a 	cmpeq	r2,r2,zero
 10017fc:	1000b31e 	bne	r2,zero,1001acc <___vfprintf_internal_r+0x1410>
 1001800:	8444b03a 	or	r2,r16,r17
 1001804:	1000b126 	beq	r2,zero,1001acc <___vfprintf_internal_r+0x1410>
 1001808:	d9814d17 	ldw	r6,1332(sp)
 100180c:	29400094 	ori	r5,r5,2
 1001810:	00800c04 	movi	r2,48
 1001814:	01000084 	movi	r4,2
 1001818:	d9414c15 	stw	r5,1328(sp)
 100181c:	d8800445 	stb	r2,17(sp)
 1001820:	d9800485 	stb	r6,18(sp)
 1001824:	d8000405 	stb	zero,16(sp)
 1001828:	003e3206 	br	10010f4 <___vfprintf_internal_r+0xa38>
 100182c:	01804074 	movhi	r6,257
 1001830:	31b2fd04 	addi	r6,r6,-13324
 1001834:	d9814415 	stw	r6,1296(sp)
 1001838:	003fe606 	br	10017d4 <___vfprintf_internal_r+0x1118>
 100183c:	00800ac4 	movi	r2,43
 1001840:	d8800405 	stb	r2,16(sp)
 1001844:	b8c00007 	ldb	r3,0(r23)
 1001848:	003c1b06 	br	10008b8 <___vfprintf_internal_r+0x1fc>
 100184c:	d8814c17 	ldw	r2,1328(sp)
 1001850:	b8c00007 	ldb	r3,0(r23)
 1001854:	10800054 	ori	r2,r2,1
 1001858:	d8814c15 	stw	r2,1328(sp)
 100185c:	003c1606 	br	10008b8 <___vfprintf_internal_r+0x1fc>
 1001860:	d8800407 	ldb	r2,16(sp)
 1001864:	1000461e 	bne	r2,zero,1001980 <___vfprintf_internal_r+0x12c4>
 1001868:	00800804 	movi	r2,32
 100186c:	d8800405 	stb	r2,16(sp)
 1001870:	b8c00007 	ldb	r3,0(r23)
 1001874:	003c1006 	br	10008b8 <___vfprintf_internal_r+0x1fc>
 1001878:	d9814c17 	ldw	r6,1328(sp)
 100187c:	b8c00007 	ldb	r3,0(r23)
 1001880:	31800214 	ori	r6,r6,8
 1001884:	d9814c15 	stw	r6,1328(sp)
 1001888:	003c0b06 	br	10008b8 <___vfprintf_internal_r+0x1fc>
 100188c:	0007883a 	mov	r3,zero
 1001890:	01000244 	movi	r4,9
 1001894:	188002a4 	muli	r2,r3,10
 1001898:	b8c00007 	ldb	r3,0(r23)
 100189c:	d9814d17 	ldw	r6,1332(sp)
 10018a0:	bdc00044 	addi	r23,r23,1
 10018a4:	d8c14d15 	stw	r3,1332(sp)
 10018a8:	d9414d17 	ldw	r5,1332(sp)
 10018ac:	3085883a 	add	r2,r6,r2
 10018b0:	10fff404 	addi	r3,r2,-48
 10018b4:	28bff404 	addi	r2,r5,-48
 10018b8:	20bff62e 	bgeu	r4,r2,1001894 <___vfprintf_internal_r+0x11d8>
 10018bc:	d8c14a15 	stw	r3,1320(sp)
 10018c0:	003bff06 	br	10008c0 <___vfprintf_internal_r+0x204>
 10018c4:	d9414c17 	ldw	r5,1328(sp)
 10018c8:	b8c00007 	ldb	r3,0(r23)
 10018cc:	29402014 	ori	r5,r5,128
 10018d0:	d9414c15 	stw	r5,1328(sp)
 10018d4:	003bf806 	br	10008b8 <___vfprintf_internal_r+0x1fc>
 10018d8:	b8c00007 	ldb	r3,0(r23)
 10018dc:	00800a84 	movi	r2,42
 10018e0:	bdc00044 	addi	r23,r23,1
 10018e4:	18831526 	beq	r3,r2,100253c <___vfprintf_internal_r+0x1e80>
 10018e8:	d8c14d15 	stw	r3,1332(sp)
 10018ec:	18bff404 	addi	r2,r3,-48
 10018f0:	00c00244 	movi	r3,9
 10018f4:	18827836 	bltu	r3,r2,10022d8 <___vfprintf_internal_r+0x1c1c>
 10018f8:	000d883a 	mov	r6,zero
 10018fc:	308002a4 	muli	r2,r6,10
 1001900:	b9800007 	ldb	r6,0(r23)
 1001904:	d9414d17 	ldw	r5,1332(sp)
 1001908:	bdc00044 	addi	r23,r23,1
 100190c:	d9814d15 	stw	r6,1332(sp)
 1001910:	d9014d17 	ldw	r4,1332(sp)
 1001914:	1145883a 	add	r2,r2,r5
 1001918:	11bff404 	addi	r6,r2,-48
 100191c:	20bff404 	addi	r2,r4,-48
 1001920:	18bff62e 	bgeu	r3,r2,10018fc <___vfprintf_internal_r+0x1240>
 1001924:	3027883a 	mov	r19,r6
 1001928:	303be50e 	bge	r6,zero,10008c0 <___vfprintf_internal_r+0x204>
 100192c:	04ffffc4 	movi	r19,-1
 1001930:	003be306 	br	10008c0 <___vfprintf_internal_r+0x204>
 1001934:	d8000405 	stb	zero,16(sp)
 1001938:	39800017 	ldw	r6,0(r7)
 100193c:	39c00104 	addi	r7,r7,4
 1001940:	d9c14015 	stw	r7,1280(sp)
 1001944:	d9814115 	stw	r6,1284(sp)
 1001948:	3001c926 	beq	r6,zero,1002070 <___vfprintf_internal_r+0x19b4>
 100194c:	98000e16 	blt	r19,zero,1001988 <___vfprintf_internal_r+0x12cc>
 1001950:	d9014117 	ldw	r4,1284(sp)
 1001954:	000b883a 	mov	r5,zero
 1001958:	980d883a 	mov	r6,r19
 100195c:	10057780 	call	1005778 <memchr>
 1001960:	10025926 	beq	r2,zero,10022c8 <___vfprintf_internal_r+0x1c0c>
 1001964:	d8c14117 	ldw	r3,1284(sp)
 1001968:	10cfc83a 	sub	r7,r2,r3
 100196c:	99c19e16 	blt	r19,r7,1001fe8 <___vfprintf_internal_r+0x192c>
 1001970:	d9c14515 	stw	r7,1300(sp)
 1001974:	38000916 	blt	r7,zero,100199c <___vfprintf_internal_r+0x12e0>
 1001978:	d8014615 	stw	zero,1304(sp)
 100197c:	003df106 	br	1001144 <___vfprintf_internal_r+0xa88>
 1001980:	b8c00007 	ldb	r3,0(r23)
 1001984:	003bcc06 	br	10008b8 <___vfprintf_internal_r+0x1fc>
 1001988:	d9014117 	ldw	r4,1284(sp)
 100198c:	10005f00 	call	10005f0 <strlen>
 1001990:	d8814515 	stw	r2,1300(sp)
 1001994:	100f883a 	mov	r7,r2
 1001998:	103ff70e 	bge	r2,zero,1001978 <___vfprintf_internal_r+0x12bc>
 100199c:	d8014515 	stw	zero,1300(sp)
 10019a0:	d8014615 	stw	zero,1304(sp)
 10019a4:	003de706 	br	1001144 <___vfprintf_internal_r+0xa88>
 10019a8:	20c03fcc 	andi	r3,r4,255
 10019ac:	00800044 	movi	r2,1
 10019b0:	18802d26 	beq	r3,r2,1001a68 <___vfprintf_internal_r+0x13ac>
 10019b4:	18800e36 	bltu	r3,r2,10019f0 <___vfprintf_internal_r+0x1334>
 10019b8:	00800084 	movi	r2,2
 10019bc:	1880fa26 	beq	r3,r2,1001da8 <___vfprintf_internal_r+0x16ec>
 10019c0:	01004074 	movhi	r4,257
 10019c4:	21330d04 	addi	r4,r4,-13260
 10019c8:	10005f00 	call	10005f0 <strlen>
 10019cc:	100f883a 	mov	r7,r2
 10019d0:	dcc14515 	stw	r19,1300(sp)
 10019d4:	9880010e 	bge	r19,r2,10019dc <___vfprintf_internal_r+0x1320>
 10019d8:	d8814515 	stw	r2,1300(sp)
 10019dc:	00804074 	movhi	r2,257
 10019e0:	10b30d04 	addi	r2,r2,-13260
 10019e4:	dcc14615 	stw	r19,1304(sp)
 10019e8:	d8814115 	stw	r2,1284(sp)
 10019ec:	003dd506 	br	1001144 <___vfprintf_internal_r+0xa88>
 10019f0:	d9401904 	addi	r5,sp,100
 10019f4:	dd000f04 	addi	r20,sp,60
 10019f8:	d9414115 	stw	r5,1284(sp)
 10019fc:	880a977a 	slli	r5,r17,29
 1001a00:	d9814117 	ldw	r6,1284(sp)
 1001a04:	8004d0fa 	srli	r2,r16,3
 1001a08:	8806d0fa 	srli	r3,r17,3
 1001a0c:	810001cc 	andi	r4,r16,7
 1001a10:	2884b03a 	or	r2,r5,r2
 1001a14:	31bfffc4 	addi	r6,r6,-1
 1001a18:	21000c04 	addi	r4,r4,48
 1001a1c:	d9814115 	stw	r6,1284(sp)
 1001a20:	10cab03a 	or	r5,r2,r3
 1001a24:	31000005 	stb	r4,0(r6)
 1001a28:	1021883a 	mov	r16,r2
 1001a2c:	1823883a 	mov	r17,r3
 1001a30:	283ff21e 	bne	r5,zero,10019fc <___vfprintf_internal_r+0x1340>
 1001a34:	d8c14c17 	ldw	r3,1328(sp)
 1001a38:	1880004c 	andi	r2,r3,1
 1001a3c:	1005003a 	cmpeq	r2,r2,zero
 1001a40:	103db91e 	bne	r2,zero,1001128 <___vfprintf_internal_r+0xa6c>
 1001a44:	20803fcc 	andi	r2,r4,255
 1001a48:	1080201c 	xori	r2,r2,128
 1001a4c:	10bfe004 	addi	r2,r2,-128
 1001a50:	00c00c04 	movi	r3,48
 1001a54:	10fdb426 	beq	r2,r3,1001128 <___vfprintf_internal_r+0xa6c>
 1001a58:	31bfffc4 	addi	r6,r6,-1
 1001a5c:	d9814115 	stw	r6,1284(sp)
 1001a60:	30c00005 	stb	r3,0(r6)
 1001a64:	003db006 	br	1001128 <___vfprintf_internal_r+0xa6c>
 1001a68:	88800068 	cmpgeui	r2,r17,1
 1001a6c:	10002c1e 	bne	r2,zero,1001b20 <___vfprintf_internal_r+0x1464>
 1001a70:	8800021e 	bne	r17,zero,1001a7c <___vfprintf_internal_r+0x13c0>
 1001a74:	00800244 	movi	r2,9
 1001a78:	14002936 	bltu	r2,r16,1001b20 <___vfprintf_internal_r+0x1464>
 1001a7c:	d90018c4 	addi	r4,sp,99
 1001a80:	dd000f04 	addi	r20,sp,60
 1001a84:	d9014115 	stw	r4,1284(sp)
 1001a88:	d9014117 	ldw	r4,1284(sp)
 1001a8c:	80800c04 	addi	r2,r16,48
 1001a90:	20800005 	stb	r2,0(r4)
 1001a94:	003da406 	br	1001128 <___vfprintf_internal_r+0xa6c>
 1001a98:	dc400d17 	ldw	r17,52(sp)
 1001a9c:	07004074 	movhi	fp,257
 1001aa0:	e7331484 	addi	fp,fp,-13230
 1001aa4:	9425883a 	add	r18,r18,r16
 1001aa8:	8c400044 	addi	r17,r17,1
 1001aac:	008001c4 	movi	r2,7
 1001ab0:	1f000015 	stw	fp,0(r3)
 1001ab4:	1c000115 	stw	r16,4(r3)
 1001ab8:	dc800e15 	stw	r18,56(sp)
 1001abc:	dc400d15 	stw	r17,52(sp)
 1001ac0:	147de216 	blt	r2,r17,100124c <___vfprintf_internal_r+0xb90>
 1001ac4:	18c00204 	addi	r3,r3,8
 1001ac8:	003c7a06 	br	1000cb4 <___vfprintf_internal_r+0x5f8>
 1001acc:	01000084 	movi	r4,2
 1001ad0:	d8000405 	stb	zero,16(sp)
 1001ad4:	003d8706 	br	10010f4 <___vfprintf_internal_r+0xa38>
 1001ad8:	d9814c17 	ldw	r6,1328(sp)
 1001adc:	30c4703a 	and	r2,r6,r3
 1001ae0:	1005003a 	cmpeq	r2,r2,zero
 1001ae4:	103cb926 	beq	r2,zero,1000dcc <___vfprintf_internal_r+0x710>
 1001ae8:	d9014117 	ldw	r4,1284(sp)
 1001aec:	94800044 	addi	r18,r18,1
 1001af0:	8c400044 	addi	r17,r17,1
 1001af4:	008001c4 	movi	r2,7
 1001af8:	a9000015 	stw	r4,0(r21)
 1001afc:	a8c00115 	stw	r3,4(r21)
 1001b00:	dc800e15 	stw	r18,56(sp)
 1001b04:	dc400d15 	stw	r17,52(sp)
 1001b08:	147e6616 	blt	r2,r17,10014a4 <___vfprintf_internal_r+0xde8>
 1001b0c:	acc00204 	addi	r19,r21,8
 1001b10:	003cd706 	br	1000e70 <___vfprintf_internal_r+0x7b4>
 1001b14:	07004074 	movhi	fp,257
 1001b18:	e7331484 	addi	fp,fp,-13230
 1001b1c:	003c4f06 	br	1000c5c <___vfprintf_internal_r+0x5a0>
 1001b20:	dd000f04 	addi	r20,sp,60
 1001b24:	dc801904 	addi	r18,sp,100
 1001b28:	8009883a 	mov	r4,r16
 1001b2c:	880b883a 	mov	r5,r17
 1001b30:	01800284 	movi	r6,10
 1001b34:	000f883a 	mov	r7,zero
 1001b38:	1007db40 	call	1007db4 <__umoddi3>
 1001b3c:	12000c04 	addi	r8,r2,48
 1001b40:	94bfffc4 	addi	r18,r18,-1
 1001b44:	8009883a 	mov	r4,r16
 1001b48:	880b883a 	mov	r5,r17
 1001b4c:	01800284 	movi	r6,10
 1001b50:	000f883a 	mov	r7,zero
 1001b54:	92000005 	stb	r8,0(r18)
 1001b58:	10077d80 	call	10077d8 <__udivdi3>
 1001b5c:	1009883a 	mov	r4,r2
 1001b60:	1021883a 	mov	r16,r2
 1001b64:	18800068 	cmpgeui	r2,r3,1
 1001b68:	1823883a 	mov	r17,r3
 1001b6c:	103fee1e 	bne	r2,zero,1001b28 <___vfprintf_internal_r+0x146c>
 1001b70:	1800021e 	bne	r3,zero,1001b7c <___vfprintf_internal_r+0x14c0>
 1001b74:	00800244 	movi	r2,9
 1001b78:	113feb36 	bltu	r2,r4,1001b28 <___vfprintf_internal_r+0x146c>
 1001b7c:	94bfffc4 	addi	r18,r18,-1
 1001b80:	dc814115 	stw	r18,1284(sp)
 1001b84:	003fc006 	br	1001a88 <___vfprintf_internal_r+0x13cc>
 1001b88:	d9014c17 	ldw	r4,1328(sp)
 1001b8c:	2080004c 	andi	r2,r4,1
 1001b90:	10009a1e 	bne	r2,zero,1001dfc <___vfprintf_internal_r+0x1740>
 1001b94:	d9401904 	addi	r5,sp,100
 1001b98:	dd000f04 	addi	r20,sp,60
 1001b9c:	d9414115 	stw	r5,1284(sp)
 1001ba0:	003d6106 	br	1001128 <___vfprintf_internal_r+0xa6c>
 1001ba4:	d9014f17 	ldw	r4,1340(sp)
 1001ba8:	b00b883a 	mov	r5,r22
 1001bac:	d9800c04 	addi	r6,sp,48
 1001bb0:	10006640 	call	1000664 <__sprint_r>
 1001bb4:	103c791e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 1001bb8:	dc800e17 	ldw	r18,56(sp)
 1001bbc:	d8c01904 	addi	r3,sp,100
 1001bc0:	003cff06 	br	1000fc0 <___vfprintf_internal_r+0x904>
 1001bc4:	d8c14c17 	ldw	r3,1328(sp)
 1001bc8:	1880040c 	andi	r2,r3,16
 1001bcc:	1000711e 	bne	r2,zero,1001d94 <___vfprintf_internal_r+0x16d8>
 1001bd0:	d9014c17 	ldw	r4,1328(sp)
 1001bd4:	2080100c 	andi	r2,r4,64
 1001bd8:	10006e26 	beq	r2,zero,1001d94 <___vfprintf_internal_r+0x16d8>
 1001bdc:	3c00000b 	ldhu	r16,0(r7)
 1001be0:	0023883a 	mov	r17,zero
 1001be4:	39c00104 	addi	r7,r7,4
 1001be8:	d9c14015 	stw	r7,1280(sp)
 1001bec:	003f0006 	br	10017f0 <___vfprintf_internal_r+0x1134>
 1001bf0:	dc400d17 	ldw	r17,52(sp)
 1001bf4:	07004074 	movhi	fp,257
 1001bf8:	e7331484 	addi	fp,fp,-13230
 1001bfc:	9425883a 	add	r18,r18,r16
 1001c00:	8c400044 	addi	r17,r17,1
 1001c04:	008001c4 	movi	r2,7
 1001c08:	1f000015 	stw	fp,0(r3)
 1001c0c:	1c000115 	stw	r16,4(r3)
 1001c10:	dc800e15 	stw	r18,56(sp)
 1001c14:	dc400d15 	stw	r17,52(sp)
 1001c18:	147d7616 	blt	r2,r17,10011f4 <___vfprintf_internal_r+0xb38>
 1001c1c:	18c00204 	addi	r3,r3,8
 1001c20:	003d7b06 	br	1001210 <___vfprintf_internal_r+0xb54>
 1001c24:	dc800e17 	ldw	r18,56(sp)
 1001c28:	dc400d17 	ldw	r17,52(sp)
 1001c2c:	07004074 	movhi	fp,257
 1001c30:	e7331884 	addi	fp,fp,-13214
 1001c34:	003bc006 	br	1000b38 <___vfprintf_internal_r+0x47c>
 1001c38:	d9014f17 	ldw	r4,1340(sp)
 1001c3c:	b00b883a 	mov	r5,r22
 1001c40:	d9800c04 	addi	r6,sp,48
 1001c44:	10006640 	call	1000664 <__sprint_r>
 1001c48:	103c541e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 1001c4c:	dc800e17 	ldw	r18,56(sp)
 1001c50:	d8c01904 	addi	r3,sp,100
 1001c54:	003ce906 	br	1000ffc <___vfprintf_internal_r+0x940>
 1001c58:	3c000017 	ldw	r16,0(r7)
 1001c5c:	0009883a 	mov	r4,zero
 1001c60:	39c00104 	addi	r7,r7,4
 1001c64:	0023883a 	mov	r17,zero
 1001c68:	d9c14015 	stw	r7,1280(sp)
 1001c6c:	d8000405 	stb	zero,16(sp)
 1001c70:	003d2006 	br	10010f4 <___vfprintf_internal_r+0xa38>
 1001c74:	38800017 	ldw	r2,0(r7)
 1001c78:	39c00104 	addi	r7,r7,4
 1001c7c:	d9c14015 	stw	r7,1280(sp)
 1001c80:	1023d7fa 	srai	r17,r2,31
 1001c84:	1021883a 	mov	r16,r2
 1001c88:	003d1806 	br	10010ec <___vfprintf_internal_r+0xa30>
 1001c8c:	3c000017 	ldw	r16,0(r7)
 1001c90:	01000044 	movi	r4,1
 1001c94:	39c00104 	addi	r7,r7,4
 1001c98:	0023883a 	mov	r17,zero
 1001c9c:	d9c14015 	stw	r7,1280(sp)
 1001ca0:	d8000405 	stb	zero,16(sp)
 1001ca4:	003d1306 	br	10010f4 <___vfprintf_internal_r+0xa38>
 1001ca8:	00804074 	movhi	r2,257
 1001cac:	10b31404 	addi	r2,r2,-13232
 1001cb0:	94800044 	addi	r18,r18,1
 1001cb4:	8c400044 	addi	r17,r17,1
 1001cb8:	a8800015 	stw	r2,0(r21)
 1001cbc:	00c00044 	movi	r3,1
 1001cc0:	008001c4 	movi	r2,7
 1001cc4:	a8c00115 	stw	r3,4(r21)
 1001cc8:	dc800e15 	stw	r18,56(sp)
 1001ccc:	dc400d15 	stw	r17,52(sp)
 1001cd0:	1440ca16 	blt	r2,r17,1001ffc <___vfprintf_internal_r+0x1940>
 1001cd4:	a8c00204 	addi	r3,r21,8
 1001cd8:	2000061e 	bne	r4,zero,1001cf4 <___vfprintf_internal_r+0x1638>
 1001cdc:	d9414717 	ldw	r5,1308(sp)
 1001ce0:	2800041e 	bne	r5,zero,1001cf4 <___vfprintf_internal_r+0x1638>
 1001ce4:	d9814c17 	ldw	r6,1328(sp)
 1001ce8:	3080004c 	andi	r2,r6,1
 1001cec:	1005003a 	cmpeq	r2,r2,zero
 1001cf0:	103bf01e 	bne	r2,zero,1000cb4 <___vfprintf_internal_r+0x5f8>
 1001cf4:	00800044 	movi	r2,1
 1001cf8:	dc400d17 	ldw	r17,52(sp)
 1001cfc:	18800115 	stw	r2,4(r3)
 1001d00:	d8814917 	ldw	r2,1316(sp)
 1001d04:	94800044 	addi	r18,r18,1
 1001d08:	8c400044 	addi	r17,r17,1
 1001d0c:	18800015 	stw	r2,0(r3)
 1001d10:	008001c4 	movi	r2,7
 1001d14:	dc800e15 	stw	r18,56(sp)
 1001d18:	dc400d15 	stw	r17,52(sp)
 1001d1c:	1440ca16 	blt	r2,r17,1002048 <___vfprintf_internal_r+0x198c>
 1001d20:	18c00204 	addi	r3,r3,8
 1001d24:	0121c83a 	sub	r16,zero,r4
 1001d28:	0400500e 	bge	zero,r16,1001e6c <___vfprintf_internal_r+0x17b0>
 1001d2c:	00800404 	movi	r2,16
 1001d30:	1400800e 	bge	r2,r16,1001f34 <___vfprintf_internal_r+0x1878>
 1001d34:	1027883a 	mov	r19,r2
 1001d38:	07004074 	movhi	fp,257
 1001d3c:	e7331484 	addi	fp,fp,-13230
 1001d40:	050001c4 	movi	r20,7
 1001d44:	00000306 	br	1001d54 <___vfprintf_internal_r+0x1698>
 1001d48:	18c00204 	addi	r3,r3,8
 1001d4c:	843ffc04 	addi	r16,r16,-16
 1001d50:	9c007a0e 	bge	r19,r16,1001f3c <___vfprintf_internal_r+0x1880>
 1001d54:	94800404 	addi	r18,r18,16
 1001d58:	8c400044 	addi	r17,r17,1
 1001d5c:	1f000015 	stw	fp,0(r3)
 1001d60:	1cc00115 	stw	r19,4(r3)
 1001d64:	dc800e15 	stw	r18,56(sp)
 1001d68:	dc400d15 	stw	r17,52(sp)
 1001d6c:	a47ff60e 	bge	r20,r17,1001d48 <___vfprintf_internal_r+0x168c>
 1001d70:	d9014f17 	ldw	r4,1340(sp)
 1001d74:	b00b883a 	mov	r5,r22
 1001d78:	d9800c04 	addi	r6,sp,48
 1001d7c:	10006640 	call	1000664 <__sprint_r>
 1001d80:	103c061e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 1001d84:	dc800e17 	ldw	r18,56(sp)
 1001d88:	dc400d17 	ldw	r17,52(sp)
 1001d8c:	d8c01904 	addi	r3,sp,100
 1001d90:	003fee06 	br	1001d4c <___vfprintf_internal_r+0x1690>
 1001d94:	3c000017 	ldw	r16,0(r7)
 1001d98:	0023883a 	mov	r17,zero
 1001d9c:	39c00104 	addi	r7,r7,4
 1001da0:	d9c14015 	stw	r7,1280(sp)
 1001da4:	003e9206 	br	10017f0 <___vfprintf_internal_r+0x1134>
 1001da8:	d9401904 	addi	r5,sp,100
 1001dac:	dd000f04 	addi	r20,sp,60
 1001db0:	d9414115 	stw	r5,1284(sp)
 1001db4:	d9814417 	ldw	r6,1296(sp)
 1001db8:	880a973a 	slli	r5,r17,28
 1001dbc:	8004d13a 	srli	r2,r16,4
 1001dc0:	810003cc 	andi	r4,r16,15
 1001dc4:	3109883a 	add	r4,r6,r4
 1001dc8:	2884b03a 	or	r2,r5,r2
 1001dcc:	21400003 	ldbu	r5,0(r4)
 1001dd0:	d9014117 	ldw	r4,1284(sp)
 1001dd4:	8806d13a 	srli	r3,r17,4
 1001dd8:	1021883a 	mov	r16,r2
 1001ddc:	213fffc4 	addi	r4,r4,-1
 1001de0:	d9014115 	stw	r4,1284(sp)
 1001de4:	d9814117 	ldw	r6,1284(sp)
 1001de8:	10c8b03a 	or	r4,r2,r3
 1001dec:	1823883a 	mov	r17,r3
 1001df0:	31400005 	stb	r5,0(r6)
 1001df4:	203fef1e 	bne	r4,zero,1001db4 <___vfprintf_internal_r+0x16f8>
 1001df8:	003ccb06 	br	1001128 <___vfprintf_internal_r+0xa6c>
 1001dfc:	00800c04 	movi	r2,48
 1001e00:	d98018c4 	addi	r6,sp,99
 1001e04:	dd000f04 	addi	r20,sp,60
 1001e08:	d88018c5 	stb	r2,99(sp)
 1001e0c:	d9814115 	stw	r6,1284(sp)
 1001e10:	003cc506 	br	1001128 <___vfprintf_internal_r+0xa6c>
 1001e14:	dc400d17 	ldw	r17,52(sp)
 1001e18:	07004074 	movhi	fp,257
 1001e1c:	e7331884 	addi	fp,fp,-13214
 1001e20:	003bc706 	br	1000d40 <___vfprintf_internal_r+0x684>
 1001e24:	d9414c17 	ldw	r5,1328(sp)
 1001e28:	2880040c 	andi	r2,r5,16
 1001e2c:	10007c26 	beq	r2,zero,1002020 <___vfprintf_internal_r+0x1964>
 1001e30:	38800017 	ldw	r2,0(r7)
 1001e34:	39c00104 	addi	r7,r7,4
 1001e38:	d9c14015 	stw	r7,1280(sp)
 1001e3c:	d9814b17 	ldw	r6,1324(sp)
 1001e40:	d9c14017 	ldw	r7,1280(sp)
 1001e44:	11800015 	stw	r6,0(r2)
 1001e48:	003a7806 	br	100082c <___vfprintf_internal_r+0x170>
 1001e4c:	d9014f17 	ldw	r4,1340(sp)
 1001e50:	b00b883a 	mov	r5,r22
 1001e54:	d9800c04 	addi	r6,sp,48
 1001e58:	10006640 	call	1000664 <__sprint_r>
 1001e5c:	103bcf1e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 1001e60:	dc800e17 	ldw	r18,56(sp)
 1001e64:	dc400d17 	ldw	r17,52(sp)
 1001e68:	d8c01904 	addi	r3,sp,100
 1001e6c:	d9014717 	ldw	r4,1308(sp)
 1001e70:	d9414117 	ldw	r5,1284(sp)
 1001e74:	8c400044 	addi	r17,r17,1
 1001e78:	9125883a 	add	r18,r18,r4
 1001e7c:	008001c4 	movi	r2,7
 1001e80:	19400015 	stw	r5,0(r3)
 1001e84:	19000115 	stw	r4,4(r3)
 1001e88:	dc800e15 	stw	r18,56(sp)
 1001e8c:	dc400d15 	stw	r17,52(sp)
 1001e90:	147cee16 	blt	r2,r17,100124c <___vfprintf_internal_r+0xb90>
 1001e94:	18c00204 	addi	r3,r3,8
 1001e98:	003b8606 	br	1000cb4 <___vfprintf_internal_r+0x5f8>
 1001e9c:	38c00017 	ldw	r3,0(r7)
 1001ea0:	39000204 	addi	r4,r7,8
 1001ea4:	d9014015 	stw	r4,1280(sp)
 1001ea8:	d8c14215 	stw	r3,1288(sp)
 1001eac:	39c00117 	ldw	r7,4(r7)
 1001eb0:	d9c14315 	stw	r7,1292(sp)
 1001eb4:	003e2006 	br	1001738 <___vfprintf_internal_r+0x107c>
 1001eb8:	0005883a 	mov	r2,zero
 1001ebc:	1409c83a 	sub	r4,r2,r16
 1001ec0:	1105803a 	cmpltu	r2,r2,r4
 1001ec4:	044bc83a 	sub	r5,zero,r17
 1001ec8:	2885c83a 	sub	r2,r5,r2
 1001ecc:	2021883a 	mov	r16,r4
 1001ed0:	1023883a 	mov	r17,r2
 1001ed4:	01000044 	movi	r4,1
 1001ed8:	00800b44 	movi	r2,45
 1001edc:	d8800405 	stb	r2,16(sp)
 1001ee0:	003c8406 	br	10010f4 <___vfprintf_internal_r+0xa38>
 1001ee4:	d9014f17 	ldw	r4,1340(sp)
 1001ee8:	b00b883a 	mov	r5,r22
 1001eec:	d9800c04 	addi	r6,sp,48
 1001ef0:	10006640 	call	1000664 <__sprint_r>
 1001ef4:	103ba91e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 1001ef8:	dc800e17 	ldw	r18,56(sp)
 1001efc:	dc400d17 	ldw	r17,52(sp)
 1001f00:	d9000517 	ldw	r4,20(sp)
 1001f04:	d9401904 	addi	r5,sp,100
 1001f08:	003da706 	br	10015a8 <___vfprintf_internal_r+0xeec>
 1001f0c:	d9014f17 	ldw	r4,1340(sp)
 1001f10:	b00b883a 	mov	r5,r22
 1001f14:	d9800c04 	addi	r6,sp,48
 1001f18:	10006640 	call	1000664 <__sprint_r>
 1001f1c:	103b9f1e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 1001f20:	dc800e17 	ldw	r18,56(sp)
 1001f24:	dc400d17 	ldw	r17,52(sp)
 1001f28:	d9000517 	ldw	r4,20(sp)
 1001f2c:	d8c01904 	addi	r3,sp,100
 1001f30:	003d9106 	br	1001578 <___vfprintf_internal_r+0xebc>
 1001f34:	07004074 	movhi	fp,257
 1001f38:	e7331484 	addi	fp,fp,-13230
 1001f3c:	9425883a 	add	r18,r18,r16
 1001f40:	8c400044 	addi	r17,r17,1
 1001f44:	008001c4 	movi	r2,7
 1001f48:	1f000015 	stw	fp,0(r3)
 1001f4c:	1c000115 	stw	r16,4(r3)
 1001f50:	dc800e15 	stw	r18,56(sp)
 1001f54:	dc400d15 	stw	r17,52(sp)
 1001f58:	147fbc16 	blt	r2,r17,1001e4c <___vfprintf_internal_r+0x1790>
 1001f5c:	18c00204 	addi	r3,r3,8
 1001f60:	003fc206 	br	1001e6c <___vfprintf_internal_r+0x17b0>
 1001f64:	d9014f17 	ldw	r4,1340(sp)
 1001f68:	b00b883a 	mov	r5,r22
 1001f6c:	d9800c04 	addi	r6,sp,48
 1001f70:	10006640 	call	1000664 <__sprint_r>
 1001f74:	103b891e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 1001f78:	dc800e17 	ldw	r18,56(sp)
 1001f7c:	d9000517 	ldw	r4,20(sp)
 1001f80:	d8c01904 	addi	r3,sp,100
 1001f84:	003d0206 	br	1001390 <___vfprintf_internal_r+0xcd4>
 1001f88:	07004074 	movhi	fp,257
 1001f8c:	e7331484 	addi	fp,fp,-13230
 1001f90:	003be406 	br	1000f24 <___vfprintf_internal_r+0x868>
 1001f94:	00804074 	movhi	r2,257
 1001f98:	10b30304 	addi	r2,r2,-13300
 1001f9c:	d8814115 	stw	r2,1284(sp)
 1001fa0:	003df506 	br	1001778 <___vfprintf_internal_r+0x10bc>
 1001fa4:	d9014217 	ldw	r4,1288(sp)
 1001fa8:	d9414317 	ldw	r5,1292(sp)
 1001fac:	100709c0 	call	100709c <__isnand>
 1001fb0:	10003926 	beq	r2,zero,1002098 <___vfprintf_internal_r+0x19dc>
 1001fb4:	d9414d17 	ldw	r5,1332(sp)
 1001fb8:	008011c4 	movi	r2,71
 1001fbc:	1140ce16 	blt	r2,r5,10022f8 <___vfprintf_internal_r+0x1c3c>
 1001fc0:	01804074 	movhi	r6,257
 1001fc4:	31b30404 	addi	r6,r6,-13296
 1001fc8:	d9814115 	stw	r6,1284(sp)
 1001fcc:	003dea06 	br	1001778 <___vfprintf_internal_r+0x10bc>
 1001fd0:	d9014c17 	ldw	r4,1328(sp)
 1001fd4:	bdc00044 	addi	r23,r23,1
 1001fd8:	b8c00007 	ldb	r3,0(r23)
 1001fdc:	21000814 	ori	r4,r4,32
 1001fe0:	d9014c15 	stw	r4,1328(sp)
 1001fe4:	003a3406 	br	10008b8 <___vfprintf_internal_r+0x1fc>
 1001fe8:	dcc14515 	stw	r19,1300(sp)
 1001fec:	98011016 	blt	r19,zero,1002430 <___vfprintf_internal_r+0x1d74>
 1001ff0:	980f883a 	mov	r7,r19
 1001ff4:	d8014615 	stw	zero,1304(sp)
 1001ff8:	003c5206 	br	1001144 <___vfprintf_internal_r+0xa88>
 1001ffc:	d9014f17 	ldw	r4,1340(sp)
 1002000:	b00b883a 	mov	r5,r22
 1002004:	d9800c04 	addi	r6,sp,48
 1002008:	10006640 	call	1000664 <__sprint_r>
 100200c:	103b631e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 1002010:	dc800e17 	ldw	r18,56(sp)
 1002014:	d9000517 	ldw	r4,20(sp)
 1002018:	d8c01904 	addi	r3,sp,100
 100201c:	003f2e06 	br	1001cd8 <___vfprintf_internal_r+0x161c>
 1002020:	d8c14c17 	ldw	r3,1328(sp)
 1002024:	1880100c 	andi	r2,r3,64
 1002028:	1000a026 	beq	r2,zero,10022ac <___vfprintf_internal_r+0x1bf0>
 100202c:	38800017 	ldw	r2,0(r7)
 1002030:	39c00104 	addi	r7,r7,4
 1002034:	d9c14015 	stw	r7,1280(sp)
 1002038:	d9014b17 	ldw	r4,1324(sp)
 100203c:	d9c14017 	ldw	r7,1280(sp)
 1002040:	1100000d 	sth	r4,0(r2)
 1002044:	0039f906 	br	100082c <___vfprintf_internal_r+0x170>
 1002048:	d9014f17 	ldw	r4,1340(sp)
 100204c:	b00b883a 	mov	r5,r22
 1002050:	d9800c04 	addi	r6,sp,48
 1002054:	10006640 	call	1000664 <__sprint_r>
 1002058:	103b501e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 100205c:	dc800e17 	ldw	r18,56(sp)
 1002060:	dc400d17 	ldw	r17,52(sp)
 1002064:	d9000517 	ldw	r4,20(sp)
 1002068:	d8c01904 	addi	r3,sp,100
 100206c:	003f2d06 	br	1001d24 <___vfprintf_internal_r+0x1668>
 1002070:	00800184 	movi	r2,6
 1002074:	14c09a36 	bltu	r2,r19,10022e0 <___vfprintf_internal_r+0x1c24>
 1002078:	dcc14515 	stw	r19,1300(sp)
 100207c:	9800010e 	bge	r19,zero,1002084 <___vfprintf_internal_r+0x19c8>
 1002080:	d8014515 	stw	zero,1300(sp)
 1002084:	00804074 	movhi	r2,257
 1002088:	10b30604 	addi	r2,r2,-13288
 100208c:	980f883a 	mov	r7,r19
 1002090:	d8814115 	stw	r2,1284(sp)
 1002094:	003a7806 	br	1000a78 <___vfprintf_internal_r+0x3bc>
 1002098:	00bfffc4 	movi	r2,-1
 100209c:	9880e226 	beq	r19,r2,1002428 <___vfprintf_internal_r+0x1d6c>
 10020a0:	d9414d17 	ldw	r5,1332(sp)
 10020a4:	008019c4 	movi	r2,103
 10020a8:	2880dc26 	beq	r5,r2,100241c <___vfprintf_internal_r+0x1d60>
 10020ac:	008011c4 	movi	r2,71
 10020b0:	2880da26 	beq	r5,r2,100241c <___vfprintf_internal_r+0x1d60>
 10020b4:	d9414c17 	ldw	r5,1328(sp)
 10020b8:	d9014317 	ldw	r4,1292(sp)
 10020bc:	d9814217 	ldw	r6,1288(sp)
 10020c0:	29404014 	ori	r5,r5,256
 10020c4:	d9414c15 	stw	r5,1328(sp)
 10020c8:	2000cc16 	blt	r4,zero,10023fc <___vfprintf_internal_r+0x1d40>
 10020cc:	3021883a 	mov	r16,r6
 10020d0:	2023883a 	mov	r17,r4
 10020d4:	0039883a 	mov	fp,zero
 10020d8:	d9414d17 	ldw	r5,1332(sp)
 10020dc:	00801984 	movi	r2,102
 10020e0:	2880b726 	beq	r5,r2,10023c0 <___vfprintf_internal_r+0x1d04>
 10020e4:	00801184 	movi	r2,70
 10020e8:	2880b526 	beq	r5,r2,10023c0 <___vfprintf_internal_r+0x1d04>
 10020ec:	00801944 	movi	r2,101
 10020f0:	2880c826 	beq	r5,r2,1002414 <___vfprintf_internal_r+0x1d58>
 10020f4:	00801144 	movi	r2,69
 10020f8:	2880c626 	beq	r5,r2,1002414 <___vfprintf_internal_r+0x1d58>
 10020fc:	9829883a 	mov	r20,r19
 1002100:	d9014f17 	ldw	r4,1340(sp)
 1002104:	d8800504 	addi	r2,sp,20
 1002108:	880d883a 	mov	r6,r17
 100210c:	d8800115 	stw	r2,4(sp)
 1002110:	d8c00604 	addi	r3,sp,24
 1002114:	d8800704 	addi	r2,sp,28
 1002118:	800b883a 	mov	r5,r16
 100211c:	01c00084 	movi	r7,2
 1002120:	d8c00215 	stw	r3,8(sp)
 1002124:	d8800315 	stw	r2,12(sp)
 1002128:	dd000015 	stw	r20,0(sp)
 100212c:	10028e00 	call	10028e0 <_dtoa_r>
 1002130:	d9814d17 	ldw	r6,1332(sp)
 1002134:	d8814115 	stw	r2,1284(sp)
 1002138:	008019c4 	movi	r2,103
 100213c:	30809526 	beq	r6,r2,1002394 <___vfprintf_internal_r+0x1cd8>
 1002140:	d8c14d17 	ldw	r3,1332(sp)
 1002144:	008011c4 	movi	r2,71
 1002148:	18809226 	beq	r3,r2,1002394 <___vfprintf_internal_r+0x1cd8>
 100214c:	d9414117 	ldw	r5,1284(sp)
 1002150:	d9814d17 	ldw	r6,1332(sp)
 1002154:	00801984 	movi	r2,102
 1002158:	2d25883a 	add	r18,r5,r20
 100215c:	30808626 	beq	r6,r2,1002378 <___vfprintf_internal_r+0x1cbc>
 1002160:	00801184 	movi	r2,70
 1002164:	30808426 	beq	r6,r2,1002378 <___vfprintf_internal_r+0x1cbc>
 1002168:	000d883a 	mov	r6,zero
 100216c:	000f883a 	mov	r7,zero
 1002170:	880b883a 	mov	r5,r17
 1002174:	8009883a 	mov	r4,r16
 1002178:	1008e840 	call	1008e84 <__eqdf2>
 100217c:	1000751e 	bne	r2,zero,1002354 <___vfprintf_internal_r+0x1c98>
 1002180:	9005883a 	mov	r2,r18
 1002184:	dc800715 	stw	r18,28(sp)
 1002188:	d9014117 	ldw	r4,1284(sp)
 100218c:	d9414d17 	ldw	r5,1332(sp)
 1002190:	00c019c4 	movi	r3,103
 1002194:	1125c83a 	sub	r18,r2,r4
 1002198:	28c06826 	beq	r5,r3,100233c <___vfprintf_internal_r+0x1c80>
 100219c:	008011c4 	movi	r2,71
 10021a0:	28806626 	beq	r5,r2,100233c <___vfprintf_internal_r+0x1c80>
 10021a4:	d9000517 	ldw	r4,20(sp)
 10021a8:	d8c14d17 	ldw	r3,1332(sp)
 10021ac:	00801944 	movi	r2,101
 10021b0:	10c05516 	blt	r2,r3,1002308 <___vfprintf_internal_r+0x1c4c>
 10021b4:	213fffc4 	addi	r4,r4,-1
 10021b8:	d9000515 	stw	r4,20(sp)
 10021bc:	d8c00805 	stb	r3,32(sp)
 10021c0:	2021883a 	mov	r16,r4
 10021c4:	2000c116 	blt	r4,zero,10024cc <___vfprintf_internal_r+0x1e10>
 10021c8:	00800ac4 	movi	r2,43
 10021cc:	d8800845 	stb	r2,33(sp)
 10021d0:	00800244 	movi	r2,9
 10021d4:	1400af0e 	bge	r2,r16,1002494 <___vfprintf_internal_r+0x1dd8>
 10021d8:	1027883a 	mov	r19,r2
 10021dc:	dc400b84 	addi	r17,sp,46
 10021e0:	8009883a 	mov	r4,r16
 10021e4:	01400284 	movi	r5,10
 10021e8:	100956c0 	call	100956c <__modsi3>
 10021ec:	10800c04 	addi	r2,r2,48
 10021f0:	8c7fffc4 	addi	r17,r17,-1
 10021f4:	8009883a 	mov	r4,r16
 10021f8:	01400284 	movi	r5,10
 10021fc:	88800005 	stb	r2,0(r17)
 1002200:	100950c0 	call	100950c <__divsi3>
 1002204:	1021883a 	mov	r16,r2
 1002208:	98bff516 	blt	r19,r2,10021e0 <___vfprintf_internal_r+0x1b24>
 100220c:	10c00c04 	addi	r3,r2,48
 1002210:	d88009c4 	addi	r2,sp,39
 1002214:	108001c4 	addi	r2,r2,7
 1002218:	897fffc4 	addi	r5,r17,-1
 100221c:	88ffffc5 	stb	r3,-1(r17)
 1002220:	2880a72e 	bgeu	r5,r2,10024c0 <___vfprintf_internal_r+0x1e04>
 1002224:	1009883a 	mov	r4,r2
 1002228:	d9800804 	addi	r6,sp,32
 100222c:	d8c00884 	addi	r3,sp,34
 1002230:	28800003 	ldbu	r2,0(r5)
 1002234:	29400044 	addi	r5,r5,1
 1002238:	18800005 	stb	r2,0(r3)
 100223c:	18c00044 	addi	r3,r3,1
 1002240:	293ffb36 	bltu	r5,r4,1002230 <___vfprintf_internal_r+0x1b74>
 1002244:	1987c83a 	sub	r3,r3,r6
 1002248:	00800044 	movi	r2,1
 100224c:	d8c14815 	stw	r3,1312(sp)
 1002250:	90cf883a 	add	r7,r18,r3
 1002254:	1480960e 	bge	r2,r18,10024b0 <___vfprintf_internal_r+0x1df4>
 1002258:	39c00044 	addi	r7,r7,1
 100225c:	d9c14515 	stw	r7,1300(sp)
 1002260:	38003416 	blt	r7,zero,1002334 <___vfprintf_internal_r+0x1c78>
 1002264:	e0803fcc 	andi	r2,fp,255
 1002268:	1080201c 	xori	r2,r2,128
 100226c:	10bfe004 	addi	r2,r2,-128
 1002270:	10004e26 	beq	r2,zero,10023ac <___vfprintf_internal_r+0x1cf0>
 1002274:	00800b44 	movi	r2,45
 1002278:	dc814715 	stw	r18,1308(sp)
 100227c:	d8014615 	stw	zero,1304(sp)
 1002280:	d8800405 	stb	r2,16(sp)
 1002284:	003bb106 	br	100114c <___vfprintf_internal_r+0xa90>
 1002288:	00800b44 	movi	r2,45
 100228c:	d8800405 	stb	r2,16(sp)
 1002290:	003d3306 	br	1001760 <___vfprintf_internal_r+0x10a4>
 1002294:	d9014f17 	ldw	r4,1340(sp)
 1002298:	b00b883a 	mov	r5,r22
 100229c:	d9800c04 	addi	r6,sp,48
 10022a0:	10006640 	call	1000664 <__sprint_r>
 10022a4:	103abd1e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x6e0>
 10022a8:	003abb06 	br	1000d98 <___vfprintf_internal_r+0x6dc>
 10022ac:	38800017 	ldw	r2,0(r7)
 10022b0:	39c00104 	addi	r7,r7,4
 10022b4:	d9c14015 	stw	r7,1280(sp)
 10022b8:	d9414b17 	ldw	r5,1324(sp)
 10022bc:	d9c14017 	ldw	r7,1280(sp)
 10022c0:	11400015 	stw	r5,0(r2)
 10022c4:	00395906 	br	100082c <___vfprintf_internal_r+0x170>
 10022c8:	980f883a 	mov	r7,r19
 10022cc:	dcc14515 	stw	r19,1300(sp)
 10022d0:	d8014615 	stw	zero,1304(sp)
 10022d4:	003b9b06 	br	1001144 <___vfprintf_internal_r+0xa88>
 10022d8:	0027883a 	mov	r19,zero
 10022dc:	00397806 	br	10008c0 <___vfprintf_internal_r+0x204>
 10022e0:	00c04074 	movhi	r3,257
 10022e4:	18f30604 	addi	r3,r3,-13288
 10022e8:	100f883a 	mov	r7,r2
 10022ec:	d8814515 	stw	r2,1300(sp)
 10022f0:	d8c14115 	stw	r3,1284(sp)
 10022f4:	0039e006 	br	1000a78 <___vfprintf_internal_r+0x3bc>
 10022f8:	00804074 	movhi	r2,257
 10022fc:	10b30504 	addi	r2,r2,-13292
 1002300:	d8814115 	stw	r2,1284(sp)
 1002304:	003d1c06 	br	1001778 <___vfprintf_internal_r+0x10bc>
 1002308:	d9414d17 	ldw	r5,1332(sp)
 100230c:	00801984 	movi	r2,102
 1002310:	28804926 	beq	r5,r2,1002438 <___vfprintf_internal_r+0x1d7c>
 1002314:	200f883a 	mov	r7,r4
 1002318:	24805716 	blt	r4,r18,1002478 <___vfprintf_internal_r+0x1dbc>
 100231c:	d9414c17 	ldw	r5,1328(sp)
 1002320:	2880004c 	andi	r2,r5,1
 1002324:	10000126 	beq	r2,zero,100232c <___vfprintf_internal_r+0x1c70>
 1002328:	21c00044 	addi	r7,r4,1
 100232c:	d9c14515 	stw	r7,1300(sp)
 1002330:	383fcc0e 	bge	r7,zero,1002264 <___vfprintf_internal_r+0x1ba8>
 1002334:	d8014515 	stw	zero,1300(sp)
 1002338:	003fca06 	br	1002264 <___vfprintf_internal_r+0x1ba8>
 100233c:	d9000517 	ldw	r4,20(sp)
 1002340:	00bfff04 	movi	r2,-4
 1002344:	1100480e 	bge	r2,r4,1002468 <___vfprintf_internal_r+0x1dac>
 1002348:	99004716 	blt	r19,r4,1002468 <___vfprintf_internal_r+0x1dac>
 100234c:	d8c14d15 	stw	r3,1332(sp)
 1002350:	003ff006 	br	1002314 <___vfprintf_internal_r+0x1c58>
 1002354:	d8800717 	ldw	r2,28(sp)
 1002358:	14bf8b2e 	bgeu	r2,r18,1002188 <___vfprintf_internal_r+0x1acc>
 100235c:	9007883a 	mov	r3,r18
 1002360:	01000c04 	movi	r4,48
 1002364:	11000005 	stb	r4,0(r2)
 1002368:	10800044 	addi	r2,r2,1
 100236c:	d8800715 	stw	r2,28(sp)
 1002370:	18bffc1e 	bne	r3,r2,1002364 <___vfprintf_internal_r+0x1ca8>
 1002374:	003f8406 	br	1002188 <___vfprintf_internal_r+0x1acc>
 1002378:	d8814117 	ldw	r2,1284(sp)
 100237c:	10c00007 	ldb	r3,0(r2)
 1002380:	00800c04 	movi	r2,48
 1002384:	18805b26 	beq	r3,r2,10024f4 <___vfprintf_internal_r+0x1e38>
 1002388:	d9000517 	ldw	r4,20(sp)
 100238c:	9125883a 	add	r18,r18,r4
 1002390:	003f7506 	br	1002168 <___vfprintf_internal_r+0x1aac>
 1002394:	d9014c17 	ldw	r4,1328(sp)
 1002398:	2080004c 	andi	r2,r4,1
 100239c:	1005003a 	cmpeq	r2,r2,zero
 10023a0:	103f6a26 	beq	r2,zero,100214c <___vfprintf_internal_r+0x1a90>
 10023a4:	d8800717 	ldw	r2,28(sp)
 10023a8:	003f7706 	br	1002188 <___vfprintf_internal_r+0x1acc>
 10023ac:	d9c14515 	stw	r7,1300(sp)
 10023b0:	38004d16 	blt	r7,zero,10024e8 <___vfprintf_internal_r+0x1e2c>
 10023b4:	dc814715 	stw	r18,1308(sp)
 10023b8:	d8014615 	stw	zero,1304(sp)
 10023bc:	003b6106 	br	1001144 <___vfprintf_internal_r+0xa88>
 10023c0:	d9014f17 	ldw	r4,1340(sp)
 10023c4:	d8800504 	addi	r2,sp,20
 10023c8:	d8800115 	stw	r2,4(sp)
 10023cc:	d8c00604 	addi	r3,sp,24
 10023d0:	d8800704 	addi	r2,sp,28
 10023d4:	800b883a 	mov	r5,r16
 10023d8:	880d883a 	mov	r6,r17
 10023dc:	01c000c4 	movi	r7,3
 10023e0:	d8c00215 	stw	r3,8(sp)
 10023e4:	d8800315 	stw	r2,12(sp)
 10023e8:	dcc00015 	stw	r19,0(sp)
 10023ec:	9829883a 	mov	r20,r19
 10023f0:	10028e00 	call	10028e0 <_dtoa_r>
 10023f4:	d8814115 	stw	r2,1284(sp)
 10023f8:	003f5106 	br	1002140 <___vfprintf_internal_r+0x1a84>
 10023fc:	d8c14217 	ldw	r3,1288(sp)
 1002400:	d9014317 	ldw	r4,1292(sp)
 1002404:	07000b44 	movi	fp,45
 1002408:	1821883a 	mov	r16,r3
 100240c:	2460003c 	xorhi	r17,r4,32768
 1002410:	003f3106 	br	10020d8 <___vfprintf_internal_r+0x1a1c>
 1002414:	9d000044 	addi	r20,r19,1
 1002418:	003f3906 	br	1002100 <___vfprintf_internal_r+0x1a44>
 100241c:	983f251e 	bne	r19,zero,10020b4 <___vfprintf_internal_r+0x19f8>
 1002420:	04c00044 	movi	r19,1
 1002424:	003f2306 	br	10020b4 <___vfprintf_internal_r+0x19f8>
 1002428:	04c00184 	movi	r19,6
 100242c:	003f2106 	br	10020b4 <___vfprintf_internal_r+0x19f8>
 1002430:	d8014515 	stw	zero,1300(sp)
 1002434:	003eee06 	br	1001ff0 <___vfprintf_internal_r+0x1934>
 1002438:	200f883a 	mov	r7,r4
 100243c:	0100370e 	bge	zero,r4,100251c <___vfprintf_internal_r+0x1e60>
 1002440:	9800031e 	bne	r19,zero,1002450 <___vfprintf_internal_r+0x1d94>
 1002444:	d9814c17 	ldw	r6,1328(sp)
 1002448:	3080004c 	andi	r2,r6,1
 100244c:	103fb726 	beq	r2,zero,100232c <___vfprintf_internal_r+0x1c70>
 1002450:	20800044 	addi	r2,r4,1
 1002454:	98a7883a 	add	r19,r19,r2
 1002458:	dcc14515 	stw	r19,1300(sp)
 100245c:	980f883a 	mov	r7,r19
 1002460:	983f800e 	bge	r19,zero,1002264 <___vfprintf_internal_r+0x1ba8>
 1002464:	003fb306 	br	1002334 <___vfprintf_internal_r+0x1c78>
 1002468:	d9814d17 	ldw	r6,1332(sp)
 100246c:	31bfff84 	addi	r6,r6,-2
 1002470:	d9814d15 	stw	r6,1332(sp)
 1002474:	003f4c06 	br	10021a8 <___vfprintf_internal_r+0x1aec>
 1002478:	0100180e 	bge	zero,r4,10024dc <___vfprintf_internal_r+0x1e20>
 100247c:	00800044 	movi	r2,1
 1002480:	1485883a 	add	r2,r2,r18
 1002484:	d8814515 	stw	r2,1300(sp)
 1002488:	100f883a 	mov	r7,r2
 100248c:	103f750e 	bge	r2,zero,1002264 <___vfprintf_internal_r+0x1ba8>
 1002490:	003fa806 	br	1002334 <___vfprintf_internal_r+0x1c78>
 1002494:	80c00c04 	addi	r3,r16,48
 1002498:	00800c04 	movi	r2,48
 100249c:	d8c008c5 	stb	r3,35(sp)
 10024a0:	d9800804 	addi	r6,sp,32
 10024a4:	d8c00904 	addi	r3,sp,36
 10024a8:	d8800885 	stb	r2,34(sp)
 10024ac:	003f6506 	br	1002244 <___vfprintf_internal_r+0x1b88>
 10024b0:	d9014c17 	ldw	r4,1328(sp)
 10024b4:	2084703a 	and	r2,r4,r2
 10024b8:	103f9c26 	beq	r2,zero,100232c <___vfprintf_internal_r+0x1c70>
 10024bc:	003f6606 	br	1002258 <___vfprintf_internal_r+0x1b9c>
 10024c0:	d9800804 	addi	r6,sp,32
 10024c4:	d8c00884 	addi	r3,sp,34
 10024c8:	003f5e06 	br	1002244 <___vfprintf_internal_r+0x1b88>
 10024cc:	00800b44 	movi	r2,45
 10024d0:	0121c83a 	sub	r16,zero,r4
 10024d4:	d8800845 	stb	r2,33(sp)
 10024d8:	003f3d06 	br	10021d0 <___vfprintf_internal_r+0x1b14>
 10024dc:	00800084 	movi	r2,2
 10024e0:	1105c83a 	sub	r2,r2,r4
 10024e4:	003fe606 	br	1002480 <___vfprintf_internal_r+0x1dc4>
 10024e8:	d8014515 	stw	zero,1300(sp)
 10024ec:	dc814715 	stw	r18,1308(sp)
 10024f0:	003fb106 	br	10023b8 <___vfprintf_internal_r+0x1cfc>
 10024f4:	000d883a 	mov	r6,zero
 10024f8:	000f883a 	mov	r7,zero
 10024fc:	8009883a 	mov	r4,r16
 1002500:	880b883a 	mov	r5,r17
 1002504:	1008f0c0 	call	1008f0c <__nedf2>
 1002508:	103f9f26 	beq	r2,zero,1002388 <___vfprintf_internal_r+0x1ccc>
 100250c:	00800044 	movi	r2,1
 1002510:	1509c83a 	sub	r4,r2,r20
 1002514:	d9000515 	stw	r4,20(sp)
 1002518:	003f9b06 	br	1002388 <___vfprintf_internal_r+0x1ccc>
 100251c:	98000d1e 	bne	r19,zero,1002554 <___vfprintf_internal_r+0x1e98>
 1002520:	d8c14c17 	ldw	r3,1328(sp)
 1002524:	1880004c 	andi	r2,r3,1
 1002528:	10000a1e 	bne	r2,zero,1002554 <___vfprintf_internal_r+0x1e98>
 100252c:	01000044 	movi	r4,1
 1002530:	200f883a 	mov	r7,r4
 1002534:	d9014515 	stw	r4,1300(sp)
 1002538:	003f4a06 	br	1002264 <___vfprintf_internal_r+0x1ba8>
 100253c:	3cc00017 	ldw	r19,0(r7)
 1002540:	39c00104 	addi	r7,r7,4
 1002544:	983d0e0e 	bge	r19,zero,1001980 <___vfprintf_internal_r+0x12c4>
 1002548:	b8c00007 	ldb	r3,0(r23)
 100254c:	04ffffc4 	movi	r19,-1
 1002550:	0038d906 	br	10008b8 <___vfprintf_internal_r+0x1fc>
 1002554:	9cc00084 	addi	r19,r19,2
 1002558:	dcc14515 	stw	r19,1300(sp)
 100255c:	980f883a 	mov	r7,r19
 1002560:	983f400e 	bge	r19,zero,1002264 <___vfprintf_internal_r+0x1ba8>
 1002564:	003f7306 	br	1002334 <___vfprintf_internal_r+0x1c78>

01002568 <__vfprintf_internal>:
 1002568:	00804074 	movhi	r2,257
 100256c:	10ba8204 	addi	r2,r2,-5624
 1002570:	2013883a 	mov	r9,r4
 1002574:	11000017 	ldw	r4,0(r2)
 1002578:	2805883a 	mov	r2,r5
 100257c:	300f883a 	mov	r7,r6
 1002580:	480b883a 	mov	r5,r9
 1002584:	100d883a 	mov	r6,r2
 1002588:	10006bc1 	jmpi	10006bc <___vfprintf_internal_r>

0100258c <__swsetup_r>:
 100258c:	00804074 	movhi	r2,257
 1002590:	10ba8204 	addi	r2,r2,-5624
 1002594:	10c00017 	ldw	r3,0(r2)
 1002598:	defffd04 	addi	sp,sp,-12
 100259c:	dc400115 	stw	r17,4(sp)
 10025a0:	dc000015 	stw	r16,0(sp)
 10025a4:	dfc00215 	stw	ra,8(sp)
 10025a8:	2023883a 	mov	r17,r4
 10025ac:	2821883a 	mov	r16,r5
 10025b0:	18000226 	beq	r3,zero,10025bc <__swsetup_r+0x30>
 10025b4:	18800e17 	ldw	r2,56(r3)
 10025b8:	10001f26 	beq	r2,zero,1002638 <__swsetup_r+0xac>
 10025bc:	8100030b 	ldhu	r4,12(r16)
 10025c0:	2080020c 	andi	r2,r4,8
 10025c4:	10002826 	beq	r2,zero,1002668 <__swsetup_r+0xdc>
 10025c8:	81400417 	ldw	r5,16(r16)
 10025cc:	28001d26 	beq	r5,zero,1002644 <__swsetup_r+0xb8>
 10025d0:	2080004c 	andi	r2,r4,1
 10025d4:	1005003a 	cmpeq	r2,r2,zero
 10025d8:	10000b26 	beq	r2,zero,1002608 <__swsetup_r+0x7c>
 10025dc:	2080008c 	andi	r2,r4,2
 10025e0:	10001226 	beq	r2,zero,100262c <__swsetup_r+0xa0>
 10025e4:	0005883a 	mov	r2,zero
 10025e8:	80800215 	stw	r2,8(r16)
 10025ec:	28000b26 	beq	r5,zero,100261c <__swsetup_r+0x90>
 10025f0:	0005883a 	mov	r2,zero
 10025f4:	dfc00217 	ldw	ra,8(sp)
 10025f8:	dc400117 	ldw	r17,4(sp)
 10025fc:	dc000017 	ldw	r16,0(sp)
 1002600:	dec00304 	addi	sp,sp,12
 1002604:	f800283a 	ret
 1002608:	80800517 	ldw	r2,20(r16)
 100260c:	80000215 	stw	zero,8(r16)
 1002610:	0085c83a 	sub	r2,zero,r2
 1002614:	80800615 	stw	r2,24(r16)
 1002618:	283ff51e 	bne	r5,zero,10025f0 <__swsetup_r+0x64>
 100261c:	2080200c 	andi	r2,r4,128
 1002620:	103ff326 	beq	r2,zero,10025f0 <__swsetup_r+0x64>
 1002624:	00bfffc4 	movi	r2,-1
 1002628:	003ff206 	br	10025f4 <__swsetup_r+0x68>
 100262c:	80800517 	ldw	r2,20(r16)
 1002630:	80800215 	stw	r2,8(r16)
 1002634:	003fed06 	br	10025ec <__swsetup_r+0x60>
 1002638:	1809883a 	mov	r4,r3
 100263c:	100412c0 	call	100412c <__sinit>
 1002640:	003fde06 	br	10025bc <__swsetup_r+0x30>
 1002644:	20c0a00c 	andi	r3,r4,640
 1002648:	00808004 	movi	r2,512
 100264c:	18bfe026 	beq	r3,r2,10025d0 <__swsetup_r+0x44>
 1002650:	8809883a 	mov	r4,r17
 1002654:	800b883a 	mov	r5,r16
 1002658:	1004ea40 	call	1004ea4 <__smakebuf_r>
 100265c:	8100030b 	ldhu	r4,12(r16)
 1002660:	81400417 	ldw	r5,16(r16)
 1002664:	003fda06 	br	10025d0 <__swsetup_r+0x44>
 1002668:	2080040c 	andi	r2,r4,16
 100266c:	103fed26 	beq	r2,zero,1002624 <__swsetup_r+0x98>
 1002670:	2080010c 	andi	r2,r4,4
 1002674:	10001226 	beq	r2,zero,10026c0 <__swsetup_r+0x134>
 1002678:	81400c17 	ldw	r5,48(r16)
 100267c:	28000526 	beq	r5,zero,1002694 <__swsetup_r+0x108>
 1002680:	80801004 	addi	r2,r16,64
 1002684:	28800226 	beq	r5,r2,1002690 <__swsetup_r+0x104>
 1002688:	8809883a 	mov	r4,r17
 100268c:	10044b00 	call	10044b0 <_free_r>
 1002690:	80000c15 	stw	zero,48(r16)
 1002694:	8080030b 	ldhu	r2,12(r16)
 1002698:	81400417 	ldw	r5,16(r16)
 100269c:	80000115 	stw	zero,4(r16)
 10026a0:	10bff6cc 	andi	r2,r2,65499
 10026a4:	8080030d 	sth	r2,12(r16)
 10026a8:	81400015 	stw	r5,0(r16)
 10026ac:	8080030b 	ldhu	r2,12(r16)
 10026b0:	10800214 	ori	r2,r2,8
 10026b4:	113fffcc 	andi	r4,r2,65535
 10026b8:	8080030d 	sth	r2,12(r16)
 10026bc:	003fc306 	br	10025cc <__swsetup_r+0x40>
 10026c0:	81400417 	ldw	r5,16(r16)
 10026c4:	003ff906 	br	10026ac <__swsetup_r+0x120>

010026c8 <quorem>:
 10026c8:	28c00417 	ldw	r3,16(r5)
 10026cc:	20800417 	ldw	r2,16(r4)
 10026d0:	defff604 	addi	sp,sp,-40
 10026d4:	ddc00715 	stw	r23,28(sp)
 10026d8:	dd400515 	stw	r21,20(sp)
 10026dc:	dfc00915 	stw	ra,36(sp)
 10026e0:	df000815 	stw	fp,32(sp)
 10026e4:	dd800615 	stw	r22,24(sp)
 10026e8:	dd000415 	stw	r20,16(sp)
 10026ec:	dcc00315 	stw	r19,12(sp)
 10026f0:	dc800215 	stw	r18,8(sp)
 10026f4:	dc400115 	stw	r17,4(sp)
 10026f8:	dc000015 	stw	r16,0(sp)
 10026fc:	202f883a 	mov	r23,r4
 1002700:	282b883a 	mov	r21,r5
 1002704:	10c07416 	blt	r2,r3,10028d8 <quorem+0x210>
 1002708:	1c7fffc4 	addi	r17,r3,-1
 100270c:	8c45883a 	add	r2,r17,r17
 1002710:	1085883a 	add	r2,r2,r2
 1002714:	2c000504 	addi	r16,r5,20
 1002718:	24c00504 	addi	r19,r4,20
 100271c:	14ed883a 	add	r22,r2,r19
 1002720:	80a5883a 	add	r18,r16,r2
 1002724:	b7000017 	ldw	fp,0(r22)
 1002728:	91400017 	ldw	r5,0(r18)
 100272c:	e009883a 	mov	r4,fp
 1002730:	29400044 	addi	r5,r5,1
 1002734:	10095cc0 	call	10095cc <__udivsi3>
 1002738:	1029883a 	mov	r20,r2
 100273c:	10003c1e 	bne	r2,zero,1002830 <quorem+0x168>
 1002740:	a80b883a 	mov	r5,r21
 1002744:	b809883a 	mov	r4,r23
 1002748:	1005bd00 	call	1005bd0 <__mcmp>
 100274c:	10002b16 	blt	r2,zero,10027fc <quorem+0x134>
 1002750:	a5000044 	addi	r20,r20,1
 1002754:	980f883a 	mov	r7,r19
 1002758:	0011883a 	mov	r8,zero
 100275c:	0009883a 	mov	r4,zero
 1002760:	81400017 	ldw	r5,0(r16)
 1002764:	38c00017 	ldw	r3,0(r7)
 1002768:	84000104 	addi	r16,r16,4
 100276c:	28bfffcc 	andi	r2,r5,65535
 1002770:	2085883a 	add	r2,r4,r2
 1002774:	11bfffcc 	andi	r6,r2,65535
 1002778:	193fffcc 	andi	r4,r3,65535
 100277c:	1004d43a 	srli	r2,r2,16
 1002780:	280ad43a 	srli	r5,r5,16
 1002784:	2189c83a 	sub	r4,r4,r6
 1002788:	2209883a 	add	r4,r4,r8
 100278c:	1806d43a 	srli	r3,r3,16
 1002790:	288b883a 	add	r5,r5,r2
 1002794:	200dd43a 	srai	r6,r4,16
 1002798:	28bfffcc 	andi	r2,r5,65535
 100279c:	1887c83a 	sub	r3,r3,r2
 10027a0:	1987883a 	add	r3,r3,r6
 10027a4:	3900000d 	sth	r4,0(r7)
 10027a8:	38c0008d 	sth	r3,2(r7)
 10027ac:	2808d43a 	srli	r4,r5,16
 10027b0:	39c00104 	addi	r7,r7,4
 10027b4:	1811d43a 	srai	r8,r3,16
 10027b8:	943fe92e 	bgeu	r18,r16,1002760 <quorem+0x98>
 10027bc:	8c45883a 	add	r2,r17,r17
 10027c0:	1085883a 	add	r2,r2,r2
 10027c4:	9885883a 	add	r2,r19,r2
 10027c8:	10c00017 	ldw	r3,0(r2)
 10027cc:	18000b1e 	bne	r3,zero,10027fc <quorem+0x134>
 10027d0:	113fff04 	addi	r4,r2,-4
 10027d4:	9900082e 	bgeu	r19,r4,10027f8 <quorem+0x130>
 10027d8:	10bfff17 	ldw	r2,-4(r2)
 10027dc:	10000326 	beq	r2,zero,10027ec <quorem+0x124>
 10027e0:	00000506 	br	10027f8 <quorem+0x130>
 10027e4:	20800017 	ldw	r2,0(r4)
 10027e8:	1000031e 	bne	r2,zero,10027f8 <quorem+0x130>
 10027ec:	213fff04 	addi	r4,r4,-4
 10027f0:	8c7fffc4 	addi	r17,r17,-1
 10027f4:	993ffb36 	bltu	r19,r4,10027e4 <quorem+0x11c>
 10027f8:	bc400415 	stw	r17,16(r23)
 10027fc:	a005883a 	mov	r2,r20
 1002800:	dfc00917 	ldw	ra,36(sp)
 1002804:	df000817 	ldw	fp,32(sp)
 1002808:	ddc00717 	ldw	r23,28(sp)
 100280c:	dd800617 	ldw	r22,24(sp)
 1002810:	dd400517 	ldw	r21,20(sp)
 1002814:	dd000417 	ldw	r20,16(sp)
 1002818:	dcc00317 	ldw	r19,12(sp)
 100281c:	dc800217 	ldw	r18,8(sp)
 1002820:	dc400117 	ldw	r17,4(sp)
 1002824:	dc000017 	ldw	r16,0(sp)
 1002828:	dec00a04 	addi	sp,sp,40
 100282c:	f800283a 	ret
 1002830:	980f883a 	mov	r7,r19
 1002834:	8011883a 	mov	r8,r16
 1002838:	0013883a 	mov	r9,zero
 100283c:	000d883a 	mov	r6,zero
 1002840:	40c00017 	ldw	r3,0(r8)
 1002844:	39000017 	ldw	r4,0(r7)
 1002848:	42000104 	addi	r8,r8,4
 100284c:	18bfffcc 	andi	r2,r3,65535
 1002850:	a085383a 	mul	r2,r20,r2
 1002854:	1806d43a 	srli	r3,r3,16
 1002858:	217fffcc 	andi	r5,r4,65535
 100285c:	3085883a 	add	r2,r6,r2
 1002860:	11bfffcc 	andi	r6,r2,65535
 1002864:	a0c7383a 	mul	r3,r20,r3
 1002868:	1004d43a 	srli	r2,r2,16
 100286c:	298bc83a 	sub	r5,r5,r6
 1002870:	2a4b883a 	add	r5,r5,r9
 1002874:	2008d43a 	srli	r4,r4,16
 1002878:	1887883a 	add	r3,r3,r2
 100287c:	280dd43a 	srai	r6,r5,16
 1002880:	18bfffcc 	andi	r2,r3,65535
 1002884:	2089c83a 	sub	r4,r4,r2
 1002888:	2189883a 	add	r4,r4,r6
 100288c:	3900008d 	sth	r4,2(r7)
 1002890:	3940000d 	sth	r5,0(r7)
 1002894:	180cd43a 	srli	r6,r3,16
 1002898:	39c00104 	addi	r7,r7,4
 100289c:	2013d43a 	srai	r9,r4,16
 10028a0:	923fe72e 	bgeu	r18,r8,1002840 <quorem+0x178>
 10028a4:	e03fa61e 	bne	fp,zero,1002740 <quorem+0x78>
 10028a8:	b0ffff04 	addi	r3,r22,-4
 10028ac:	98c0082e 	bgeu	r19,r3,10028d0 <quorem+0x208>
 10028b0:	b0bfff17 	ldw	r2,-4(r22)
 10028b4:	10000326 	beq	r2,zero,10028c4 <quorem+0x1fc>
 10028b8:	00000506 	br	10028d0 <quorem+0x208>
 10028bc:	18800017 	ldw	r2,0(r3)
 10028c0:	1000031e 	bne	r2,zero,10028d0 <quorem+0x208>
 10028c4:	18ffff04 	addi	r3,r3,-4
 10028c8:	8c7fffc4 	addi	r17,r17,-1
 10028cc:	98fffb36 	bltu	r19,r3,10028bc <quorem+0x1f4>
 10028d0:	bc400415 	stw	r17,16(r23)
 10028d4:	003f9a06 	br	1002740 <quorem+0x78>
 10028d8:	0005883a 	mov	r2,zero
 10028dc:	003fc806 	br	1002800 <quorem+0x138>

010028e0 <_dtoa_r>:
 10028e0:	22001017 	ldw	r8,64(r4)
 10028e4:	deffda04 	addi	sp,sp,-152
 10028e8:	dd402115 	stw	r21,132(sp)
 10028ec:	dd002015 	stw	r20,128(sp)
 10028f0:	dc801e15 	stw	r18,120(sp)
 10028f4:	dc401d15 	stw	r17,116(sp)
 10028f8:	dfc02515 	stw	ra,148(sp)
 10028fc:	df002415 	stw	fp,144(sp)
 1002900:	ddc02315 	stw	r23,140(sp)
 1002904:	dd802215 	stw	r22,136(sp)
 1002908:	dcc01f15 	stw	r19,124(sp)
 100290c:	dc001c15 	stw	r16,112(sp)
 1002910:	d9001615 	stw	r4,88(sp)
 1002914:	3023883a 	mov	r17,r6
 1002918:	2829883a 	mov	r20,r5
 100291c:	d9c01715 	stw	r7,92(sp)
 1002920:	dc802817 	ldw	r18,160(sp)
 1002924:	302b883a 	mov	r21,r6
 1002928:	40000a26 	beq	r8,zero,1002954 <_dtoa_r+0x74>
 100292c:	20801117 	ldw	r2,68(r4)
 1002930:	400b883a 	mov	r5,r8
 1002934:	40800115 	stw	r2,4(r8)
 1002938:	20c01117 	ldw	r3,68(r4)
 100293c:	00800044 	movi	r2,1
 1002940:	10c4983a 	sll	r2,r2,r3
 1002944:	40800215 	stw	r2,8(r8)
 1002948:	1005a740 	call	1005a74 <_Bfree>
 100294c:	d8c01617 	ldw	r3,88(sp)
 1002950:	18001015 	stw	zero,64(r3)
 1002954:	8800a316 	blt	r17,zero,1002be4 <_dtoa_r+0x304>
 1002958:	90000015 	stw	zero,0(r18)
 100295c:	a8dffc2c 	andhi	r3,r21,32752
 1002960:	009ffc34 	movhi	r2,32752
 1002964:	18809126 	beq	r3,r2,1002bac <_dtoa_r+0x2cc>
 1002968:	000d883a 	mov	r6,zero
 100296c:	000f883a 	mov	r7,zero
 1002970:	a009883a 	mov	r4,r20
 1002974:	a80b883a 	mov	r5,r21
 1002978:	dd001215 	stw	r20,72(sp)
 100297c:	dd401315 	stw	r21,76(sp)
 1002980:	1008f0c0 	call	1008f0c <__nedf2>
 1002984:	1000171e 	bne	r2,zero,10029e4 <_dtoa_r+0x104>
 1002988:	d9802717 	ldw	r6,156(sp)
 100298c:	00800044 	movi	r2,1
 1002990:	30800015 	stw	r2,0(r6)
 1002994:	d8802917 	ldw	r2,164(sp)
 1002998:	10029b26 	beq	r2,zero,1003408 <_dtoa_r+0xb28>
 100299c:	d9002917 	ldw	r4,164(sp)
 10029a0:	00804074 	movhi	r2,257
 10029a4:	10b31444 	addi	r2,r2,-13231
 10029a8:	10ffffc4 	addi	r3,r2,-1
 10029ac:	20800015 	stw	r2,0(r4)
 10029b0:	1805883a 	mov	r2,r3
 10029b4:	dfc02517 	ldw	ra,148(sp)
 10029b8:	df002417 	ldw	fp,144(sp)
 10029bc:	ddc02317 	ldw	r23,140(sp)
 10029c0:	dd802217 	ldw	r22,136(sp)
 10029c4:	dd402117 	ldw	r21,132(sp)
 10029c8:	dd002017 	ldw	r20,128(sp)
 10029cc:	dcc01f17 	ldw	r19,124(sp)
 10029d0:	dc801e17 	ldw	r18,120(sp)
 10029d4:	dc401d17 	ldw	r17,116(sp)
 10029d8:	dc001c17 	ldw	r16,112(sp)
 10029dc:	dec02604 	addi	sp,sp,152
 10029e0:	f800283a 	ret
 10029e4:	d9001617 	ldw	r4,88(sp)
 10029e8:	d9401217 	ldw	r5,72(sp)
 10029ec:	d8800104 	addi	r2,sp,4
 10029f0:	a80d883a 	mov	r6,r21
 10029f4:	d9c00204 	addi	r7,sp,8
 10029f8:	d8800015 	stw	r2,0(sp)
 10029fc:	10060b00 	call	10060b0 <__d2b>
 1002a00:	d8800715 	stw	r2,28(sp)
 1002a04:	a804d53a 	srli	r2,r21,20
 1002a08:	1101ffcc 	andi	r4,r2,2047
 1002a0c:	20008626 	beq	r4,zero,1002c28 <_dtoa_r+0x348>
 1002a10:	d8c01217 	ldw	r3,72(sp)
 1002a14:	00800434 	movhi	r2,16
 1002a18:	10bfffc4 	addi	r2,r2,-1
 1002a1c:	ddc00117 	ldw	r23,4(sp)
 1002a20:	a884703a 	and	r2,r21,r2
 1002a24:	1811883a 	mov	r8,r3
 1002a28:	124ffc34 	orhi	r9,r2,16368
 1002a2c:	25bf0044 	addi	r22,r4,-1023
 1002a30:	d8000815 	stw	zero,32(sp)
 1002a34:	0005883a 	mov	r2,zero
 1002a38:	00cffe34 	movhi	r3,16376
 1002a3c:	480b883a 	mov	r5,r9
 1002a40:	4009883a 	mov	r4,r8
 1002a44:	180f883a 	mov	r7,r3
 1002a48:	100d883a 	mov	r6,r2
 1002a4c:	10087740 	call	1008774 <__subdf3>
 1002a50:	0218dbf4 	movhi	r8,25455
 1002a54:	4210d844 	addi	r8,r8,17249
 1002a58:	024ff4f4 	movhi	r9,16339
 1002a5c:	4a61e9c4 	addi	r9,r9,-30809
 1002a60:	480f883a 	mov	r7,r9
 1002a64:	400d883a 	mov	r6,r8
 1002a68:	180b883a 	mov	r5,r3
 1002a6c:	1009883a 	mov	r4,r2
 1002a70:	10088680 	call	1008868 <__muldf3>
 1002a74:	0222d874 	movhi	r8,35681
 1002a78:	42322cc4 	addi	r8,r8,-14157
 1002a7c:	024ff1f4 	movhi	r9,16327
 1002a80:	4a628a04 	addi	r9,r9,-30168
 1002a84:	480f883a 	mov	r7,r9
 1002a88:	400d883a 	mov	r6,r8
 1002a8c:	180b883a 	mov	r5,r3
 1002a90:	1009883a 	mov	r4,r2
 1002a94:	10087f40 	call	10087f4 <__adddf3>
 1002a98:	b009883a 	mov	r4,r22
 1002a9c:	1021883a 	mov	r16,r2
 1002aa0:	1823883a 	mov	r17,r3
 1002aa4:	100912c0 	call	100912c <__floatsidf>
 1002aa8:	021427f4 	movhi	r8,20639
 1002aac:	421e7ec4 	addi	r8,r8,31227
 1002ab0:	024ff4f4 	movhi	r9,16339
 1002ab4:	4a5104c4 	addi	r9,r9,17427
 1002ab8:	480f883a 	mov	r7,r9
 1002abc:	400d883a 	mov	r6,r8
 1002ac0:	180b883a 	mov	r5,r3
 1002ac4:	1009883a 	mov	r4,r2
 1002ac8:	10088680 	call	1008868 <__muldf3>
 1002acc:	180f883a 	mov	r7,r3
 1002ad0:	880b883a 	mov	r5,r17
 1002ad4:	100d883a 	mov	r6,r2
 1002ad8:	8009883a 	mov	r4,r16
 1002adc:	10087f40 	call	10087f4 <__adddf3>
 1002ae0:	1009883a 	mov	r4,r2
 1002ae4:	180b883a 	mov	r5,r3
 1002ae8:	1021883a 	mov	r16,r2
 1002aec:	1823883a 	mov	r17,r3
 1002af0:	10092240 	call	1009224 <__fixdfsi>
 1002af4:	000d883a 	mov	r6,zero
 1002af8:	000f883a 	mov	r7,zero
 1002afc:	8009883a 	mov	r4,r16
 1002b00:	880b883a 	mov	r5,r17
 1002b04:	d8800d15 	stw	r2,52(sp)
 1002b08:	10090a40 	call	10090a4 <__ltdf2>
 1002b0c:	10031716 	blt	r2,zero,100376c <_dtoa_r+0xe8c>
 1002b10:	d8c00d17 	ldw	r3,52(sp)
 1002b14:	00800584 	movi	r2,22
 1002b18:	10c1482e 	bgeu	r2,r3,100303c <_dtoa_r+0x75c>
 1002b1c:	01000044 	movi	r4,1
 1002b20:	d9000c15 	stw	r4,48(sp)
 1002b24:	bd85c83a 	sub	r2,r23,r22
 1002b28:	11bfffc4 	addi	r6,r2,-1
 1002b2c:	30030b16 	blt	r6,zero,100375c <_dtoa_r+0xe7c>
 1002b30:	d9800a15 	stw	r6,40(sp)
 1002b34:	d8001115 	stw	zero,68(sp)
 1002b38:	d8c00d17 	ldw	r3,52(sp)
 1002b3c:	1802ff16 	blt	r3,zero,100373c <_dtoa_r+0xe5c>
 1002b40:	d9000a17 	ldw	r4,40(sp)
 1002b44:	d8c00915 	stw	r3,36(sp)
 1002b48:	d8001015 	stw	zero,64(sp)
 1002b4c:	20c9883a 	add	r4,r4,r3
 1002b50:	d9000a15 	stw	r4,40(sp)
 1002b54:	d9001717 	ldw	r4,92(sp)
 1002b58:	00800244 	movi	r2,9
 1002b5c:	11004636 	bltu	r2,r4,1002c78 <_dtoa_r+0x398>
 1002b60:	00800144 	movi	r2,5
 1002b64:	11020416 	blt	r2,r4,1003378 <_dtoa_r+0xa98>
 1002b68:	04400044 	movi	r17,1
 1002b6c:	d8c01717 	ldw	r3,92(sp)
 1002b70:	00800144 	movi	r2,5
 1002b74:	10c1ed36 	bltu	r2,r3,100332c <_dtoa_r+0xa4c>
 1002b78:	18c5883a 	add	r2,r3,r3
 1002b7c:	1085883a 	add	r2,r2,r2
 1002b80:	00c04034 	movhi	r3,256
 1002b84:	18cae504 	addi	r3,r3,11156
 1002b88:	10c5883a 	add	r2,r2,r3
 1002b8c:	11000017 	ldw	r4,0(r2)
 1002b90:	2000683a 	jmp	r4
 1002b94:	01002c80 	call	1002c8 <__alt_mem_onchip_memory2_0+0x1002c8>
 1002b98:	01002c80 	call	1002c8 <__alt_mem_onchip_memory2_0+0x1002c8>
 1002b9c:	01003680 	call	100368 <__alt_mem_onchip_memory2_0+0x100368>
 1002ba0:	01003658 	cmpnei	r4,zero,217
 1002ba4:	0100369c 	xori	r4,zero,218
 1002ba8:	010036a8 	cmpgeui	r4,zero,218
 1002bac:	d9002717 	ldw	r4,156(sp)
 1002bb0:	0089c3c4 	movi	r2,9999
 1002bb4:	20800015 	stw	r2,0(r4)
 1002bb8:	a0001026 	beq	r20,zero,1002bfc <_dtoa_r+0x31c>
 1002bbc:	00c04074 	movhi	r3,257
 1002bc0:	18f32004 	addi	r3,r3,-13184
 1002bc4:	d9802917 	ldw	r6,164(sp)
 1002bc8:	303f7926 	beq	r6,zero,10029b0 <_dtoa_r+0xd0>
 1002bcc:	188000c7 	ldb	r2,3(r3)
 1002bd0:	190000c4 	addi	r4,r3,3
 1002bd4:	1000101e 	bne	r2,zero,1002c18 <_dtoa_r+0x338>
 1002bd8:	d8802917 	ldw	r2,164(sp)
 1002bdc:	11000015 	stw	r4,0(r2)
 1002be0:	003f7306 	br	10029b0 <_dtoa_r+0xd0>
 1002be4:	00a00034 	movhi	r2,32768
 1002be8:	10bfffc4 	addi	r2,r2,-1
 1002bec:	00c00044 	movi	r3,1
 1002bf0:	88aa703a 	and	r21,r17,r2
 1002bf4:	90c00015 	stw	r3,0(r18)
 1002bf8:	003f5806 	br	100295c <_dtoa_r+0x7c>
 1002bfc:	00800434 	movhi	r2,16
 1002c00:	10bfffc4 	addi	r2,r2,-1
 1002c04:	a884703a 	and	r2,r21,r2
 1002c08:	103fec1e 	bne	r2,zero,1002bbc <_dtoa_r+0x2dc>
 1002c0c:	00c04074 	movhi	r3,257
 1002c10:	18f31d04 	addi	r3,r3,-13196
 1002c14:	003feb06 	br	1002bc4 <_dtoa_r+0x2e4>
 1002c18:	d8802917 	ldw	r2,164(sp)
 1002c1c:	19000204 	addi	r4,r3,8
 1002c20:	11000015 	stw	r4,0(r2)
 1002c24:	003f6206 	br	10029b0 <_dtoa_r+0xd0>
 1002c28:	ddc00117 	ldw	r23,4(sp)
 1002c2c:	d8800217 	ldw	r2,8(sp)
 1002c30:	01000804 	movi	r4,32
 1002c34:	b8c10c84 	addi	r3,r23,1074
 1002c38:	18a3883a 	add	r17,r3,r2
 1002c3c:	2441b80e 	bge	r4,r17,1003320 <_dtoa_r+0xa40>
 1002c40:	00c01004 	movi	r3,64
 1002c44:	1c47c83a 	sub	r3,r3,r17
 1002c48:	88bff804 	addi	r2,r17,-32
 1002c4c:	a8c6983a 	sll	r3,r21,r3
 1002c50:	a084d83a 	srl	r2,r20,r2
 1002c54:	1888b03a 	or	r4,r3,r2
 1002c58:	10092fc0 	call	10092fc <__floatunsidf>
 1002c5c:	1011883a 	mov	r8,r2
 1002c60:	00bf8434 	movhi	r2,65040
 1002c64:	01000044 	movi	r4,1
 1002c68:	10d3883a 	add	r9,r2,r3
 1002c6c:	8dbef344 	addi	r22,r17,-1075
 1002c70:	d9000815 	stw	r4,32(sp)
 1002c74:	003f6f06 	br	1002a34 <_dtoa_r+0x154>
 1002c78:	d8001715 	stw	zero,92(sp)
 1002c7c:	04400044 	movi	r17,1
 1002c80:	00bfffc4 	movi	r2,-1
 1002c84:	00c00044 	movi	r3,1
 1002c88:	d8800e15 	stw	r2,56(sp)
 1002c8c:	d8002615 	stw	zero,152(sp)
 1002c90:	d8800f15 	stw	r2,60(sp)
 1002c94:	d8c00b15 	stw	r3,44(sp)
 1002c98:	1021883a 	mov	r16,r2
 1002c9c:	d8801617 	ldw	r2,88(sp)
 1002ca0:	10001115 	stw	zero,68(r2)
 1002ca4:	d8801617 	ldw	r2,88(sp)
 1002ca8:	11401117 	ldw	r5,68(r2)
 1002cac:	1009883a 	mov	r4,r2
 1002cb0:	1005ff40 	call	1005ff4 <_Balloc>
 1002cb4:	d8c01617 	ldw	r3,88(sp)
 1002cb8:	d8800515 	stw	r2,20(sp)
 1002cbc:	18801015 	stw	r2,64(r3)
 1002cc0:	00800384 	movi	r2,14
 1002cc4:	14006836 	bltu	r2,r16,1002e68 <_dtoa_r+0x588>
 1002cc8:	8805003a 	cmpeq	r2,r17,zero
 1002ccc:	1000661e 	bne	r2,zero,1002e68 <_dtoa_r+0x588>
 1002cd0:	d9000d17 	ldw	r4,52(sp)
 1002cd4:	0102300e 	bge	zero,r4,1003598 <_dtoa_r+0xcb8>
 1002cd8:	208003cc 	andi	r2,r4,15
 1002cdc:	100490fa 	slli	r2,r2,3
 1002ce0:	2025d13a 	srai	r18,r4,4
 1002ce4:	00c04074 	movhi	r3,257
 1002ce8:	18f33204 	addi	r3,r3,-13112
 1002cec:	10c5883a 	add	r2,r2,r3
 1002cf0:	90c0040c 	andi	r3,r18,16
 1002cf4:	14000017 	ldw	r16,0(r2)
 1002cf8:	14400117 	ldw	r17,4(r2)
 1002cfc:	18036a1e 	bne	r3,zero,1003aa8 <_dtoa_r+0x11c8>
 1002d00:	05800084 	movi	r22,2
 1002d04:	90001026 	beq	r18,zero,1002d48 <_dtoa_r+0x468>
 1002d08:	04c04074 	movhi	r19,257
 1002d0c:	9cf36404 	addi	r19,r19,-12912
 1002d10:	9080004c 	andi	r2,r18,1
 1002d14:	1005003a 	cmpeq	r2,r2,zero
 1002d18:	1000081e 	bne	r2,zero,1002d3c <_dtoa_r+0x45c>
 1002d1c:	99800017 	ldw	r6,0(r19)
 1002d20:	99c00117 	ldw	r7,4(r19)
 1002d24:	880b883a 	mov	r5,r17
 1002d28:	8009883a 	mov	r4,r16
 1002d2c:	10088680 	call	1008868 <__muldf3>
 1002d30:	1021883a 	mov	r16,r2
 1002d34:	b5800044 	addi	r22,r22,1
 1002d38:	1823883a 	mov	r17,r3
 1002d3c:	9025d07a 	srai	r18,r18,1
 1002d40:	9cc00204 	addi	r19,r19,8
 1002d44:	903ff21e 	bne	r18,zero,1002d10 <_dtoa_r+0x430>
 1002d48:	a80b883a 	mov	r5,r21
 1002d4c:	a009883a 	mov	r4,r20
 1002d50:	880f883a 	mov	r7,r17
 1002d54:	800d883a 	mov	r6,r16
 1002d58:	1008c2c0 	call	1008c2c <__divdf3>
 1002d5c:	1029883a 	mov	r20,r2
 1002d60:	182b883a 	mov	r21,r3
 1002d64:	d8c00c17 	ldw	r3,48(sp)
 1002d68:	1805003a 	cmpeq	r2,r3,zero
 1002d6c:	1000081e 	bne	r2,zero,1002d90 <_dtoa_r+0x4b0>
 1002d70:	0005883a 	mov	r2,zero
 1002d74:	00cffc34 	movhi	r3,16368
 1002d78:	180f883a 	mov	r7,r3
 1002d7c:	a009883a 	mov	r4,r20
 1002d80:	a80b883a 	mov	r5,r21
 1002d84:	100d883a 	mov	r6,r2
 1002d88:	10090a40 	call	10090a4 <__ltdf2>
 1002d8c:	1003fe16 	blt	r2,zero,1003d88 <_dtoa_r+0x14a8>
 1002d90:	b009883a 	mov	r4,r22
 1002d94:	100912c0 	call	100912c <__floatsidf>
 1002d98:	180b883a 	mov	r5,r3
 1002d9c:	1009883a 	mov	r4,r2
 1002da0:	a00d883a 	mov	r6,r20
 1002da4:	a80f883a 	mov	r7,r21
 1002da8:	10088680 	call	1008868 <__muldf3>
 1002dac:	0011883a 	mov	r8,zero
 1002db0:	02500734 	movhi	r9,16412
 1002db4:	1009883a 	mov	r4,r2
 1002db8:	180b883a 	mov	r5,r3
 1002dbc:	480f883a 	mov	r7,r9
 1002dc0:	400d883a 	mov	r6,r8
 1002dc4:	10087f40 	call	10087f4 <__adddf3>
 1002dc8:	d9000f17 	ldw	r4,60(sp)
 1002dcc:	102d883a 	mov	r22,r2
 1002dd0:	00bf3034 	movhi	r2,64704
 1002dd4:	18b9883a 	add	fp,r3,r2
 1002dd8:	e02f883a 	mov	r23,fp
 1002ddc:	20028f1e 	bne	r4,zero,100381c <_dtoa_r+0xf3c>
 1002de0:	0005883a 	mov	r2,zero
 1002de4:	00d00534 	movhi	r3,16404
 1002de8:	a009883a 	mov	r4,r20
 1002dec:	a80b883a 	mov	r5,r21
 1002df0:	180f883a 	mov	r7,r3
 1002df4:	100d883a 	mov	r6,r2
 1002df8:	10087740 	call	1008774 <__subdf3>
 1002dfc:	1009883a 	mov	r4,r2
 1002e00:	e00f883a 	mov	r7,fp
 1002e04:	180b883a 	mov	r5,r3
 1002e08:	b00d883a 	mov	r6,r22
 1002e0c:	1025883a 	mov	r18,r2
 1002e10:	1827883a 	mov	r19,r3
 1002e14:	1008f940 	call	1008f94 <__gtdf2>
 1002e18:	00834f16 	blt	zero,r2,1003b58 <_dtoa_r+0x1278>
 1002e1c:	e0e0003c 	xorhi	r3,fp,32768
 1002e20:	9009883a 	mov	r4,r18
 1002e24:	980b883a 	mov	r5,r19
 1002e28:	180f883a 	mov	r7,r3
 1002e2c:	b00d883a 	mov	r6,r22
 1002e30:	10090a40 	call	10090a4 <__ltdf2>
 1002e34:	1000080e 	bge	r2,zero,1002e58 <_dtoa_r+0x578>
 1002e38:	0027883a 	mov	r19,zero
 1002e3c:	0025883a 	mov	r18,zero
 1002e40:	d8802617 	ldw	r2,152(sp)
 1002e44:	df000517 	ldw	fp,20(sp)
 1002e48:	d8000615 	stw	zero,24(sp)
 1002e4c:	0084303a 	nor	r2,zero,r2
 1002e50:	d8800d15 	stw	r2,52(sp)
 1002e54:	00019b06 	br	10034c4 <_dtoa_r+0xbe4>
 1002e58:	d9801217 	ldw	r6,72(sp)
 1002e5c:	d8801317 	ldw	r2,76(sp)
 1002e60:	3029883a 	mov	r20,r6
 1002e64:	102b883a 	mov	r21,r2
 1002e68:	d8c00217 	ldw	r3,8(sp)
 1002e6c:	18008516 	blt	r3,zero,1003084 <_dtoa_r+0x7a4>
 1002e70:	d9000d17 	ldw	r4,52(sp)
 1002e74:	00800384 	movi	r2,14
 1002e78:	11008216 	blt	r2,r4,1003084 <_dtoa_r+0x7a4>
 1002e7c:	200490fa 	slli	r2,r4,3
 1002e80:	d9802617 	ldw	r6,152(sp)
 1002e84:	00c04074 	movhi	r3,257
 1002e88:	18f33204 	addi	r3,r3,-13112
 1002e8c:	10c5883a 	add	r2,r2,r3
 1002e90:	14800017 	ldw	r18,0(r2)
 1002e94:	14c00117 	ldw	r19,4(r2)
 1002e98:	30031e16 	blt	r6,zero,1003b14 <_dtoa_r+0x1234>
 1002e9c:	d9000517 	ldw	r4,20(sp)
 1002ea0:	d8c00f17 	ldw	r3,60(sp)
 1002ea4:	a823883a 	mov	r17,r21
 1002ea8:	a021883a 	mov	r16,r20
 1002eac:	192b883a 	add	r21,r3,r4
 1002eb0:	2039883a 	mov	fp,r4
 1002eb4:	00000f06 	br	1002ef4 <_dtoa_r+0x614>
 1002eb8:	0005883a 	mov	r2,zero
 1002ebc:	00d00934 	movhi	r3,16420
 1002ec0:	5009883a 	mov	r4,r10
 1002ec4:	580b883a 	mov	r5,r11
 1002ec8:	180f883a 	mov	r7,r3
 1002ecc:	100d883a 	mov	r6,r2
 1002ed0:	10088680 	call	1008868 <__muldf3>
 1002ed4:	180b883a 	mov	r5,r3
 1002ed8:	000d883a 	mov	r6,zero
 1002edc:	000f883a 	mov	r7,zero
 1002ee0:	1009883a 	mov	r4,r2
 1002ee4:	1021883a 	mov	r16,r2
 1002ee8:	1823883a 	mov	r17,r3
 1002eec:	1008f0c0 	call	1008f0c <__nedf2>
 1002ef0:	10004526 	beq	r2,zero,1003008 <_dtoa_r+0x728>
 1002ef4:	900d883a 	mov	r6,r18
 1002ef8:	980f883a 	mov	r7,r19
 1002efc:	8009883a 	mov	r4,r16
 1002f00:	880b883a 	mov	r5,r17
 1002f04:	1008c2c0 	call	1008c2c <__divdf3>
 1002f08:	180b883a 	mov	r5,r3
 1002f0c:	1009883a 	mov	r4,r2
 1002f10:	10092240 	call	1009224 <__fixdfsi>
 1002f14:	1009883a 	mov	r4,r2
 1002f18:	1029883a 	mov	r20,r2
 1002f1c:	100912c0 	call	100912c <__floatsidf>
 1002f20:	180f883a 	mov	r7,r3
 1002f24:	9009883a 	mov	r4,r18
 1002f28:	980b883a 	mov	r5,r19
 1002f2c:	100d883a 	mov	r6,r2
 1002f30:	10088680 	call	1008868 <__muldf3>
 1002f34:	180f883a 	mov	r7,r3
 1002f38:	880b883a 	mov	r5,r17
 1002f3c:	8009883a 	mov	r4,r16
 1002f40:	100d883a 	mov	r6,r2
 1002f44:	10087740 	call	1008774 <__subdf3>
 1002f48:	1015883a 	mov	r10,r2
 1002f4c:	a0800c04 	addi	r2,r20,48
 1002f50:	e0800005 	stb	r2,0(fp)
 1002f54:	e7000044 	addi	fp,fp,1
 1002f58:	1817883a 	mov	r11,r3
 1002f5c:	e57fd61e 	bne	fp,r21,1002eb8 <_dtoa_r+0x5d8>
 1002f60:	500d883a 	mov	r6,r10
 1002f64:	180f883a 	mov	r7,r3
 1002f68:	5009883a 	mov	r4,r10
 1002f6c:	180b883a 	mov	r5,r3
 1002f70:	10087f40 	call	10087f4 <__adddf3>
 1002f74:	100d883a 	mov	r6,r2
 1002f78:	9009883a 	mov	r4,r18
 1002f7c:	980b883a 	mov	r5,r19
 1002f80:	180f883a 	mov	r7,r3
 1002f84:	1021883a 	mov	r16,r2
 1002f88:	1823883a 	mov	r17,r3
 1002f8c:	10090a40 	call	10090a4 <__ltdf2>
 1002f90:	10000816 	blt	r2,zero,1002fb4 <_dtoa_r+0x6d4>
 1002f94:	980b883a 	mov	r5,r19
 1002f98:	800d883a 	mov	r6,r16
 1002f9c:	880f883a 	mov	r7,r17
 1002fa0:	9009883a 	mov	r4,r18
 1002fa4:	1008e840 	call	1008e84 <__eqdf2>
 1002fa8:	1000171e 	bne	r2,zero,1003008 <_dtoa_r+0x728>
 1002fac:	a080004c 	andi	r2,r20,1
 1002fb0:	10001526 	beq	r2,zero,1003008 <_dtoa_r+0x728>
 1002fb4:	d8800d17 	ldw	r2,52(sp)
 1002fb8:	d8800415 	stw	r2,16(sp)
 1002fbc:	e009883a 	mov	r4,fp
 1002fc0:	213fffc4 	addi	r4,r4,-1
 1002fc4:	20c00007 	ldb	r3,0(r4)
 1002fc8:	00800e44 	movi	r2,57
 1002fcc:	1880081e 	bne	r3,r2,1002ff0 <_dtoa_r+0x710>
 1002fd0:	d8800517 	ldw	r2,20(sp)
 1002fd4:	113ffa1e 	bne	r2,r4,1002fc0 <_dtoa_r+0x6e0>
 1002fd8:	d8c00417 	ldw	r3,16(sp)
 1002fdc:	d9800517 	ldw	r6,20(sp)
 1002fe0:	00800c04 	movi	r2,48
 1002fe4:	18c00044 	addi	r3,r3,1
 1002fe8:	d8c00415 	stw	r3,16(sp)
 1002fec:	30800005 	stb	r2,0(r6)
 1002ff0:	20800003 	ldbu	r2,0(r4)
 1002ff4:	d8c00417 	ldw	r3,16(sp)
 1002ff8:	27000044 	addi	fp,r4,1
 1002ffc:	10800044 	addi	r2,r2,1
 1003000:	d8c00d15 	stw	r3,52(sp)
 1003004:	20800005 	stb	r2,0(r4)
 1003008:	d9001617 	ldw	r4,88(sp)
 100300c:	d9400717 	ldw	r5,28(sp)
 1003010:	1005a740 	call	1005a74 <_Bfree>
 1003014:	e0000005 	stb	zero,0(fp)
 1003018:	d9800d17 	ldw	r6,52(sp)
 100301c:	d8c02717 	ldw	r3,156(sp)
 1003020:	d9002917 	ldw	r4,164(sp)
 1003024:	30800044 	addi	r2,r6,1
 1003028:	18800015 	stw	r2,0(r3)
 100302c:	20029c26 	beq	r4,zero,1003aa0 <_dtoa_r+0x11c0>
 1003030:	d8c00517 	ldw	r3,20(sp)
 1003034:	27000015 	stw	fp,0(r4)
 1003038:	003e5d06 	br	10029b0 <_dtoa_r+0xd0>
 100303c:	d9800d17 	ldw	r6,52(sp)
 1003040:	00c04074 	movhi	r3,257
 1003044:	18f33204 	addi	r3,r3,-13112
 1003048:	d9001217 	ldw	r4,72(sp)
 100304c:	300490fa 	slli	r2,r6,3
 1003050:	d9401317 	ldw	r5,76(sp)
 1003054:	10c5883a 	add	r2,r2,r3
 1003058:	12000017 	ldw	r8,0(r2)
 100305c:	12400117 	ldw	r9,4(r2)
 1003060:	400d883a 	mov	r6,r8
 1003064:	480f883a 	mov	r7,r9
 1003068:	10090a40 	call	10090a4 <__ltdf2>
 100306c:	1000030e 	bge	r2,zero,100307c <_dtoa_r+0x79c>
 1003070:	d8800d17 	ldw	r2,52(sp)
 1003074:	10bfffc4 	addi	r2,r2,-1
 1003078:	d8800d15 	stw	r2,52(sp)
 100307c:	d8000c15 	stw	zero,48(sp)
 1003080:	003ea806 	br	1002b24 <_dtoa_r+0x244>
 1003084:	d9000b17 	ldw	r4,44(sp)
 1003088:	202cc03a 	cmpne	r22,r4,zero
 100308c:	b000c71e 	bne	r22,zero,10033ac <_dtoa_r+0xacc>
 1003090:	dc001117 	ldw	r16,68(sp)
 1003094:	dc801017 	ldw	r18,64(sp)
 1003098:	0027883a 	mov	r19,zero
 100309c:	04000b0e 	bge	zero,r16,10030cc <_dtoa_r+0x7ec>
 10030a0:	d8c00a17 	ldw	r3,40(sp)
 10030a4:	00c0090e 	bge	zero,r3,10030cc <_dtoa_r+0x7ec>
 10030a8:	8005883a 	mov	r2,r16
 10030ac:	1c011316 	blt	r3,r16,10034fc <_dtoa_r+0xc1c>
 10030b0:	d9000a17 	ldw	r4,40(sp)
 10030b4:	d9801117 	ldw	r6,68(sp)
 10030b8:	80a1c83a 	sub	r16,r16,r2
 10030bc:	2089c83a 	sub	r4,r4,r2
 10030c0:	308dc83a 	sub	r6,r6,r2
 10030c4:	d9000a15 	stw	r4,40(sp)
 10030c8:	d9801115 	stw	r6,68(sp)
 10030cc:	d8801017 	ldw	r2,64(sp)
 10030d0:	0080150e 	bge	zero,r2,1003128 <_dtoa_r+0x848>
 10030d4:	d8c00b17 	ldw	r3,44(sp)
 10030d8:	1805003a 	cmpeq	r2,r3,zero
 10030dc:	1001c91e 	bne	r2,zero,1003804 <_dtoa_r+0xf24>
 10030e0:	04800e0e 	bge	zero,r18,100311c <_dtoa_r+0x83c>
 10030e4:	d9001617 	ldw	r4,88(sp)
 10030e8:	980b883a 	mov	r5,r19
 10030ec:	900d883a 	mov	r6,r18
 10030f0:	10068280 	call	1006828 <__pow5mult>
 10030f4:	d9001617 	ldw	r4,88(sp)
 10030f8:	d9800717 	ldw	r6,28(sp)
 10030fc:	100b883a 	mov	r5,r2
 1003100:	1027883a 	mov	r19,r2
 1003104:	10065040 	call	1006504 <__multiply>
 1003108:	d9001617 	ldw	r4,88(sp)
 100310c:	d9400717 	ldw	r5,28(sp)
 1003110:	1023883a 	mov	r17,r2
 1003114:	1005a740 	call	1005a74 <_Bfree>
 1003118:	dc400715 	stw	r17,28(sp)
 100311c:	d9001017 	ldw	r4,64(sp)
 1003120:	248dc83a 	sub	r6,r4,r18
 1003124:	30010e1e 	bne	r6,zero,1003560 <_dtoa_r+0xc80>
 1003128:	d9001617 	ldw	r4,88(sp)
 100312c:	04400044 	movi	r17,1
 1003130:	880b883a 	mov	r5,r17
 1003134:	10066ec0 	call	10066ec <__i2b>
 1003138:	d9800917 	ldw	r6,36(sp)
 100313c:	1025883a 	mov	r18,r2
 1003140:	0180040e 	bge	zero,r6,1003154 <_dtoa_r+0x874>
 1003144:	d9001617 	ldw	r4,88(sp)
 1003148:	100b883a 	mov	r5,r2
 100314c:	10068280 	call	1006828 <__pow5mult>
 1003150:	1025883a 	mov	r18,r2
 1003154:	d8801717 	ldw	r2,92(sp)
 1003158:	8880f30e 	bge	r17,r2,1003528 <_dtoa_r+0xc48>
 100315c:	0023883a 	mov	r17,zero
 1003160:	d9800917 	ldw	r6,36(sp)
 1003164:	30019e1e 	bne	r6,zero,10037e0 <_dtoa_r+0xf00>
 1003168:	00c00044 	movi	r3,1
 100316c:	d9000a17 	ldw	r4,40(sp)
 1003170:	20c5883a 	add	r2,r4,r3
 1003174:	10c007cc 	andi	r3,r2,31
 1003178:	1800841e 	bne	r3,zero,100338c <_dtoa_r+0xaac>
 100317c:	00800704 	movi	r2,28
 1003180:	d9000a17 	ldw	r4,40(sp)
 1003184:	d9801117 	ldw	r6,68(sp)
 1003188:	80a1883a 	add	r16,r16,r2
 100318c:	2089883a 	add	r4,r4,r2
 1003190:	308d883a 	add	r6,r6,r2
 1003194:	d9000a15 	stw	r4,40(sp)
 1003198:	d9801115 	stw	r6,68(sp)
 100319c:	d8801117 	ldw	r2,68(sp)
 10031a0:	0080050e 	bge	zero,r2,10031b8 <_dtoa_r+0x8d8>
 10031a4:	d9400717 	ldw	r5,28(sp)
 10031a8:	d9001617 	ldw	r4,88(sp)
 10031ac:	100d883a 	mov	r6,r2
 10031b0:	10063b80 	call	10063b8 <__lshift>
 10031b4:	d8800715 	stw	r2,28(sp)
 10031b8:	d8c00a17 	ldw	r3,40(sp)
 10031bc:	00c0050e 	bge	zero,r3,10031d4 <_dtoa_r+0x8f4>
 10031c0:	d9001617 	ldw	r4,88(sp)
 10031c4:	900b883a 	mov	r5,r18
 10031c8:	180d883a 	mov	r6,r3
 10031cc:	10063b80 	call	10063b8 <__lshift>
 10031d0:	1025883a 	mov	r18,r2
 10031d4:	d9000c17 	ldw	r4,48(sp)
 10031d8:	2005003a 	cmpeq	r2,r4,zero
 10031dc:	10016f26 	beq	r2,zero,100379c <_dtoa_r+0xebc>
 10031e0:	d9000f17 	ldw	r4,60(sp)
 10031e4:	0102170e 	bge	zero,r4,1003a44 <_dtoa_r+0x1164>
 10031e8:	d9800b17 	ldw	r6,44(sp)
 10031ec:	3005003a 	cmpeq	r2,r6,zero
 10031f0:	1000881e 	bne	r2,zero,1003414 <_dtoa_r+0xb34>
 10031f4:	0400050e 	bge	zero,r16,100320c <_dtoa_r+0x92c>
 10031f8:	d9001617 	ldw	r4,88(sp)
 10031fc:	980b883a 	mov	r5,r19
 1003200:	800d883a 	mov	r6,r16
 1003204:	10063b80 	call	10063b8 <__lshift>
 1003208:	1027883a 	mov	r19,r2
 100320c:	8804c03a 	cmpne	r2,r17,zero
 1003210:	1002541e 	bne	r2,zero,1003b64 <_dtoa_r+0x1284>
 1003214:	980b883a 	mov	r5,r19
 1003218:	dd800517 	ldw	r22,20(sp)
 100321c:	dcc00615 	stw	r19,24(sp)
 1003220:	a700004c 	andi	fp,r20,1
 1003224:	2827883a 	mov	r19,r5
 1003228:	d9000717 	ldw	r4,28(sp)
 100322c:	900b883a 	mov	r5,r18
 1003230:	10026c80 	call	10026c8 <quorem>
 1003234:	d9000717 	ldw	r4,28(sp)
 1003238:	d9400617 	ldw	r5,24(sp)
 100323c:	1023883a 	mov	r17,r2
 1003240:	8dc00c04 	addi	r23,r17,48
 1003244:	1005bd00 	call	1005bd0 <__mcmp>
 1003248:	d9001617 	ldw	r4,88(sp)
 100324c:	900b883a 	mov	r5,r18
 1003250:	980d883a 	mov	r6,r19
 1003254:	1029883a 	mov	r20,r2
 1003258:	100622c0 	call	100622c <__mdiff>
 100325c:	102b883a 	mov	r21,r2
 1003260:	10800317 	ldw	r2,12(r2)
 1003264:	1001281e 	bne	r2,zero,1003708 <_dtoa_r+0xe28>
 1003268:	d9000717 	ldw	r4,28(sp)
 100326c:	a80b883a 	mov	r5,r21
 1003270:	1005bd00 	call	1005bd0 <__mcmp>
 1003274:	d9001617 	ldw	r4,88(sp)
 1003278:	1021883a 	mov	r16,r2
 100327c:	a80b883a 	mov	r5,r21
 1003280:	1005a740 	call	1005a74 <_Bfree>
 1003284:	8000041e 	bne	r16,zero,1003298 <_dtoa_r+0x9b8>
 1003288:	d8801717 	ldw	r2,92(sp)
 100328c:	1000021e 	bne	r2,zero,1003298 <_dtoa_r+0x9b8>
 1003290:	e004c03a 	cmpne	r2,fp,zero
 1003294:	10011726 	beq	r2,zero,10036f4 <_dtoa_r+0xe14>
 1003298:	a0010616 	blt	r20,zero,10036b4 <_dtoa_r+0xdd4>
 100329c:	a000041e 	bne	r20,zero,10032b0 <_dtoa_r+0x9d0>
 10032a0:	d8c01717 	ldw	r3,92(sp)
 10032a4:	1800021e 	bne	r3,zero,10032b0 <_dtoa_r+0x9d0>
 10032a8:	e004c03a 	cmpne	r2,fp,zero
 10032ac:	10010126 	beq	r2,zero,10036b4 <_dtoa_r+0xdd4>
 10032b0:	04023d16 	blt	zero,r16,1003ba8 <_dtoa_r+0x12c8>
 10032b4:	b5c00005 	stb	r23,0(r22)
 10032b8:	d9800517 	ldw	r6,20(sp)
 10032bc:	d9000f17 	ldw	r4,60(sp)
 10032c0:	b5800044 	addi	r22,r22,1
 10032c4:	3105883a 	add	r2,r6,r4
 10032c8:	b0806526 	beq	r22,r2,1003460 <_dtoa_r+0xb80>
 10032cc:	d9400717 	ldw	r5,28(sp)
 10032d0:	d9001617 	ldw	r4,88(sp)
 10032d4:	01800284 	movi	r6,10
 10032d8:	000f883a 	mov	r7,zero
 10032dc:	10067280 	call	1006728 <__multadd>
 10032e0:	d8800715 	stw	r2,28(sp)
 10032e4:	d8800617 	ldw	r2,24(sp)
 10032e8:	14c10c26 	beq	r2,r19,100371c <_dtoa_r+0xe3c>
 10032ec:	d9400617 	ldw	r5,24(sp)
 10032f0:	d9001617 	ldw	r4,88(sp)
 10032f4:	01800284 	movi	r6,10
 10032f8:	000f883a 	mov	r7,zero
 10032fc:	10067280 	call	1006728 <__multadd>
 1003300:	d9001617 	ldw	r4,88(sp)
 1003304:	980b883a 	mov	r5,r19
 1003308:	01800284 	movi	r6,10
 100330c:	000f883a 	mov	r7,zero
 1003310:	d8800615 	stw	r2,24(sp)
 1003314:	10067280 	call	1006728 <__multadd>
 1003318:	1027883a 	mov	r19,r2
 100331c:	003fc206 	br	1003228 <_dtoa_r+0x948>
 1003320:	2445c83a 	sub	r2,r4,r17
 1003324:	a088983a 	sll	r4,r20,r2
 1003328:	003e4b06 	br	1002c58 <_dtoa_r+0x378>
 100332c:	01bfffc4 	movi	r6,-1
 1003330:	00800044 	movi	r2,1
 1003334:	d9800e15 	stw	r6,56(sp)
 1003338:	d9800f15 	stw	r6,60(sp)
 100333c:	d8800b15 	stw	r2,44(sp)
 1003340:	d8c01617 	ldw	r3,88(sp)
 1003344:	008005c4 	movi	r2,23
 1003348:	18001115 	stw	zero,68(r3)
 100334c:	1580082e 	bgeu	r2,r22,1003370 <_dtoa_r+0xa90>
 1003350:	00c00104 	movi	r3,4
 1003354:	0009883a 	mov	r4,zero
 1003358:	18c7883a 	add	r3,r3,r3
 100335c:	18800504 	addi	r2,r3,20
 1003360:	21000044 	addi	r4,r4,1
 1003364:	b0bffc2e 	bgeu	r22,r2,1003358 <_dtoa_r+0xa78>
 1003368:	d9801617 	ldw	r6,88(sp)
 100336c:	31001115 	stw	r4,68(r6)
 1003370:	dc000f17 	ldw	r16,60(sp)
 1003374:	003e4b06 	br	1002ca4 <_dtoa_r+0x3c4>
 1003378:	d9801717 	ldw	r6,92(sp)
 100337c:	0023883a 	mov	r17,zero
 1003380:	31bfff04 	addi	r6,r6,-4
 1003384:	d9801715 	stw	r6,92(sp)
 1003388:	003df806 	br	1002b6c <_dtoa_r+0x28c>
 100338c:	00800804 	movi	r2,32
 1003390:	10c9c83a 	sub	r4,r2,r3
 1003394:	00c00104 	movi	r3,4
 1003398:	19005a16 	blt	r3,r4,1003504 <_dtoa_r+0xc24>
 100339c:	008000c4 	movi	r2,3
 10033a0:	113f7e16 	blt	r2,r4,100319c <_dtoa_r+0x8bc>
 10033a4:	20800704 	addi	r2,r4,28
 10033a8:	003f7506 	br	1003180 <_dtoa_r+0x8a0>
 10033ac:	d9801717 	ldw	r6,92(sp)
 10033b0:	00800044 	movi	r2,1
 10033b4:	1180a10e 	bge	r2,r6,100363c <_dtoa_r+0xd5c>
 10033b8:	d9800f17 	ldw	r6,60(sp)
 10033bc:	d8c01017 	ldw	r3,64(sp)
 10033c0:	30bfffc4 	addi	r2,r6,-1
 10033c4:	1881c616 	blt	r3,r2,1003ae0 <_dtoa_r+0x1200>
 10033c8:	18a5c83a 	sub	r18,r3,r2
 10033cc:	d8800f17 	ldw	r2,60(sp)
 10033d0:	10026216 	blt	r2,zero,1003d5c <_dtoa_r+0x147c>
 10033d4:	dc001117 	ldw	r16,68(sp)
 10033d8:	1007883a 	mov	r3,r2
 10033dc:	d9800a17 	ldw	r6,40(sp)
 10033e0:	d8801117 	ldw	r2,68(sp)
 10033e4:	d9001617 	ldw	r4,88(sp)
 10033e8:	30cd883a 	add	r6,r6,r3
 10033ec:	10c5883a 	add	r2,r2,r3
 10033f0:	01400044 	movi	r5,1
 10033f4:	d9800a15 	stw	r6,40(sp)
 10033f8:	d8801115 	stw	r2,68(sp)
 10033fc:	10066ec0 	call	10066ec <__i2b>
 1003400:	1027883a 	mov	r19,r2
 1003404:	003f2506 	br	100309c <_dtoa_r+0x7bc>
 1003408:	00c04074 	movhi	r3,257
 100340c:	18f31404 	addi	r3,r3,-13232
 1003410:	003d6706 	br	10029b0 <_dtoa_r+0xd0>
 1003414:	dd800517 	ldw	r22,20(sp)
 1003418:	04000044 	movi	r16,1
 100341c:	00000706 	br	100343c <_dtoa_r+0xb5c>
 1003420:	d9400717 	ldw	r5,28(sp)
 1003424:	d9001617 	ldw	r4,88(sp)
 1003428:	01800284 	movi	r6,10
 100342c:	000f883a 	mov	r7,zero
 1003430:	10067280 	call	1006728 <__multadd>
 1003434:	d8800715 	stw	r2,28(sp)
 1003438:	84000044 	addi	r16,r16,1
 100343c:	d9000717 	ldw	r4,28(sp)
 1003440:	900b883a 	mov	r5,r18
 1003444:	10026c80 	call	10026c8 <quorem>
 1003448:	15c00c04 	addi	r23,r2,48
 100344c:	b5c00005 	stb	r23,0(r22)
 1003450:	d8c00f17 	ldw	r3,60(sp)
 1003454:	b5800044 	addi	r22,r22,1
 1003458:	80fff116 	blt	r16,r3,1003420 <_dtoa_r+0xb40>
 100345c:	d8000615 	stw	zero,24(sp)
 1003460:	d9400717 	ldw	r5,28(sp)
 1003464:	d9001617 	ldw	r4,88(sp)
 1003468:	01800044 	movi	r6,1
 100346c:	10063b80 	call	10063b8 <__lshift>
 1003470:	1009883a 	mov	r4,r2
 1003474:	900b883a 	mov	r5,r18
 1003478:	d8800715 	stw	r2,28(sp)
 100347c:	1005bd00 	call	1005bd0 <__mcmp>
 1003480:	00803c0e 	bge	zero,r2,1003574 <_dtoa_r+0xc94>
 1003484:	b009883a 	mov	r4,r22
 1003488:	213fffc4 	addi	r4,r4,-1
 100348c:	21400003 	ldbu	r5,0(r4)
 1003490:	00800e44 	movi	r2,57
 1003494:	28c03fcc 	andi	r3,r5,255
 1003498:	18c0201c 	xori	r3,r3,128
 100349c:	18ffe004 	addi	r3,r3,-128
 10034a0:	1881981e 	bne	r3,r2,1003b04 <_dtoa_r+0x1224>
 10034a4:	d9800517 	ldw	r6,20(sp)
 10034a8:	21bff71e 	bne	r4,r6,1003488 <_dtoa_r+0xba8>
 10034ac:	d8800d17 	ldw	r2,52(sp)
 10034b0:	37000044 	addi	fp,r6,1
 10034b4:	10800044 	addi	r2,r2,1
 10034b8:	d8800d15 	stw	r2,52(sp)
 10034bc:	00800c44 	movi	r2,49
 10034c0:	30800005 	stb	r2,0(r6)
 10034c4:	d9001617 	ldw	r4,88(sp)
 10034c8:	900b883a 	mov	r5,r18
 10034cc:	1005a740 	call	1005a74 <_Bfree>
 10034d0:	983ecd26 	beq	r19,zero,1003008 <_dtoa_r+0x728>
 10034d4:	d8c00617 	ldw	r3,24(sp)
 10034d8:	18000426 	beq	r3,zero,10034ec <_dtoa_r+0xc0c>
 10034dc:	1cc00326 	beq	r3,r19,10034ec <_dtoa_r+0xc0c>
 10034e0:	d9001617 	ldw	r4,88(sp)
 10034e4:	180b883a 	mov	r5,r3
 10034e8:	1005a740 	call	1005a74 <_Bfree>
 10034ec:	d9001617 	ldw	r4,88(sp)
 10034f0:	980b883a 	mov	r5,r19
 10034f4:	1005a740 	call	1005a74 <_Bfree>
 10034f8:	003ec306 	br	1003008 <_dtoa_r+0x728>
 10034fc:	1805883a 	mov	r2,r3
 1003500:	003eeb06 	br	10030b0 <_dtoa_r+0x7d0>
 1003504:	d9800a17 	ldw	r6,40(sp)
 1003508:	d8c01117 	ldw	r3,68(sp)
 100350c:	20bfff04 	addi	r2,r4,-4
 1003510:	308d883a 	add	r6,r6,r2
 1003514:	1887883a 	add	r3,r3,r2
 1003518:	80a1883a 	add	r16,r16,r2
 100351c:	d9800a15 	stw	r6,40(sp)
 1003520:	d8c01115 	stw	r3,68(sp)
 1003524:	003f1d06 	br	100319c <_dtoa_r+0x8bc>
 1003528:	a03f0c1e 	bne	r20,zero,100315c <_dtoa_r+0x87c>
 100352c:	00800434 	movhi	r2,16
 1003530:	10bfffc4 	addi	r2,r2,-1
 1003534:	a884703a 	and	r2,r21,r2
 1003538:	103f081e 	bne	r2,zero,100315c <_dtoa_r+0x87c>
 100353c:	a89ffc2c 	andhi	r2,r21,32752
 1003540:	103f0626 	beq	r2,zero,100315c <_dtoa_r+0x87c>
 1003544:	d8c01117 	ldw	r3,68(sp)
 1003548:	d9000a17 	ldw	r4,40(sp)
 100354c:	18c00044 	addi	r3,r3,1
 1003550:	21000044 	addi	r4,r4,1
 1003554:	d8c01115 	stw	r3,68(sp)
 1003558:	d9000a15 	stw	r4,40(sp)
 100355c:	003f0006 	br	1003160 <_dtoa_r+0x880>
 1003560:	d9400717 	ldw	r5,28(sp)
 1003564:	d9001617 	ldw	r4,88(sp)
 1003568:	10068280 	call	1006828 <__pow5mult>
 100356c:	d8800715 	stw	r2,28(sp)
 1003570:	003eed06 	br	1003128 <_dtoa_r+0x848>
 1003574:	1000021e 	bne	r2,zero,1003580 <_dtoa_r+0xca0>
 1003578:	b880004c 	andi	r2,r23,1
 100357c:	103fc11e 	bne	r2,zero,1003484 <_dtoa_r+0xba4>
 1003580:	b5bfffc4 	addi	r22,r22,-1
 1003584:	b0c00007 	ldb	r3,0(r22)
 1003588:	00800c04 	movi	r2,48
 100358c:	18bffc26 	beq	r3,r2,1003580 <_dtoa_r+0xca0>
 1003590:	b7000044 	addi	fp,r22,1
 1003594:	003fcb06 	br	10034c4 <_dtoa_r+0xbe4>
 1003598:	d9800d17 	ldw	r6,52(sp)
 100359c:	018fc83a 	sub	r7,zero,r6
 10035a0:	3801f726 	beq	r7,zero,1003d80 <_dtoa_r+0x14a0>
 10035a4:	398003cc 	andi	r6,r7,15
 10035a8:	300c90fa 	slli	r6,r6,3
 10035ac:	01404074 	movhi	r5,257
 10035b0:	29733204 	addi	r5,r5,-13112
 10035b4:	d9001217 	ldw	r4,72(sp)
 10035b8:	314d883a 	add	r6,r6,r5
 10035bc:	30c00117 	ldw	r3,4(r6)
 10035c0:	30800017 	ldw	r2,0(r6)
 10035c4:	d9401317 	ldw	r5,76(sp)
 10035c8:	3821d13a 	srai	r16,r7,4
 10035cc:	100d883a 	mov	r6,r2
 10035d0:	180f883a 	mov	r7,r3
 10035d4:	10088680 	call	1008868 <__muldf3>
 10035d8:	1011883a 	mov	r8,r2
 10035dc:	1813883a 	mov	r9,r3
 10035e0:	1029883a 	mov	r20,r2
 10035e4:	182b883a 	mov	r21,r3
 10035e8:	8001e526 	beq	r16,zero,1003d80 <_dtoa_r+0x14a0>
 10035ec:	05800084 	movi	r22,2
 10035f0:	04404074 	movhi	r17,257
 10035f4:	8c736404 	addi	r17,r17,-12912
 10035f8:	8080004c 	andi	r2,r16,1
 10035fc:	1005003a 	cmpeq	r2,r2,zero
 1003600:	1000081e 	bne	r2,zero,1003624 <_dtoa_r+0xd44>
 1003604:	89800017 	ldw	r6,0(r17)
 1003608:	89c00117 	ldw	r7,4(r17)
 100360c:	480b883a 	mov	r5,r9
 1003610:	4009883a 	mov	r4,r8
 1003614:	10088680 	call	1008868 <__muldf3>
 1003618:	1011883a 	mov	r8,r2
 100361c:	b5800044 	addi	r22,r22,1
 1003620:	1813883a 	mov	r9,r3
 1003624:	8021d07a 	srai	r16,r16,1
 1003628:	8c400204 	addi	r17,r17,8
 100362c:	803ff21e 	bne	r16,zero,10035f8 <_dtoa_r+0xd18>
 1003630:	4029883a 	mov	r20,r8
 1003634:	482b883a 	mov	r21,r9
 1003638:	003dca06 	br	1002d64 <_dtoa_r+0x484>
 100363c:	d9000817 	ldw	r4,32(sp)
 1003640:	2005003a 	cmpeq	r2,r4,zero
 1003644:	1001f61e 	bne	r2,zero,1003e20 <_dtoa_r+0x1540>
 1003648:	dc001117 	ldw	r16,68(sp)
 100364c:	dc801017 	ldw	r18,64(sp)
 1003650:	18c10cc4 	addi	r3,r3,1075
 1003654:	003f6106 	br	10033dc <_dtoa_r+0xafc>
 1003658:	d8000b15 	stw	zero,44(sp)
 100365c:	d9802617 	ldw	r6,152(sp)
 1003660:	d8c00d17 	ldw	r3,52(sp)
 1003664:	30800044 	addi	r2,r6,1
 1003668:	18ad883a 	add	r22,r3,r2
 100366c:	b13fffc4 	addi	r4,r22,-1
 1003670:	d9000e15 	stw	r4,56(sp)
 1003674:	0581f60e 	bge	zero,r22,1003e50 <_dtoa_r+0x1570>
 1003678:	dd800f15 	stw	r22,60(sp)
 100367c:	003f3006 	br	1003340 <_dtoa_r+0xa60>
 1003680:	d8000b15 	stw	zero,44(sp)
 1003684:	d9002617 	ldw	r4,152(sp)
 1003688:	0101eb0e 	bge	zero,r4,1003e38 <_dtoa_r+0x1558>
 100368c:	202d883a 	mov	r22,r4
 1003690:	d9000e15 	stw	r4,56(sp)
 1003694:	d9000f15 	stw	r4,60(sp)
 1003698:	003f2906 	br	1003340 <_dtoa_r+0xa60>
 100369c:	01800044 	movi	r6,1
 10036a0:	d9800b15 	stw	r6,44(sp)
 10036a4:	003ff706 	br	1003684 <_dtoa_r+0xda4>
 10036a8:	01000044 	movi	r4,1
 10036ac:	d9000b15 	stw	r4,44(sp)
 10036b0:	003fea06 	br	100365c <_dtoa_r+0xd7c>
 10036b4:	04000c0e 	bge	zero,r16,10036e8 <_dtoa_r+0xe08>
 10036b8:	d9400717 	ldw	r5,28(sp)
 10036bc:	d9001617 	ldw	r4,88(sp)
 10036c0:	01800044 	movi	r6,1
 10036c4:	10063b80 	call	10063b8 <__lshift>
 10036c8:	1009883a 	mov	r4,r2
 10036cc:	900b883a 	mov	r5,r18
 10036d0:	d8800715 	stw	r2,28(sp)
 10036d4:	1005bd00 	call	1005bd0 <__mcmp>
 10036d8:	0081e00e 	bge	zero,r2,1003e5c <_dtoa_r+0x157c>
 10036dc:	bdc00044 	addi	r23,r23,1
 10036e0:	00800e84 	movi	r2,58
 10036e4:	b881a226 	beq	r23,r2,1003d70 <_dtoa_r+0x1490>
 10036e8:	b7000044 	addi	fp,r22,1
 10036ec:	b5c00005 	stb	r23,0(r22)
 10036f0:	003f7406 	br	10034c4 <_dtoa_r+0xbe4>
 10036f4:	00800e44 	movi	r2,57
 10036f8:	b8819d26 	beq	r23,r2,1003d70 <_dtoa_r+0x1490>
 10036fc:	053ffa0e 	bge	zero,r20,10036e8 <_dtoa_r+0xe08>
 1003700:	8dc00c44 	addi	r23,r17,49
 1003704:	003ff806 	br	10036e8 <_dtoa_r+0xe08>
 1003708:	d9001617 	ldw	r4,88(sp)
 100370c:	a80b883a 	mov	r5,r21
 1003710:	04000044 	movi	r16,1
 1003714:	1005a740 	call	1005a74 <_Bfree>
 1003718:	003edf06 	br	1003298 <_dtoa_r+0x9b8>
 100371c:	d9001617 	ldw	r4,88(sp)
 1003720:	980b883a 	mov	r5,r19
 1003724:	01800284 	movi	r6,10
 1003728:	000f883a 	mov	r7,zero
 100372c:	10067280 	call	1006728 <__multadd>
 1003730:	1027883a 	mov	r19,r2
 1003734:	d8800615 	stw	r2,24(sp)
 1003738:	003ebb06 	br	1003228 <_dtoa_r+0x948>
 100373c:	d9801117 	ldw	r6,68(sp)
 1003740:	d8800d17 	ldw	r2,52(sp)
 1003744:	d8000915 	stw	zero,36(sp)
 1003748:	308dc83a 	sub	r6,r6,r2
 100374c:	0087c83a 	sub	r3,zero,r2
 1003750:	d9801115 	stw	r6,68(sp)
 1003754:	d8c01015 	stw	r3,64(sp)
 1003758:	003cfe06 	br	1002b54 <_dtoa_r+0x274>
 100375c:	018dc83a 	sub	r6,zero,r6
 1003760:	d9801115 	stw	r6,68(sp)
 1003764:	d8000a15 	stw	zero,40(sp)
 1003768:	003cf306 	br	1002b38 <_dtoa_r+0x258>
 100376c:	d9000d17 	ldw	r4,52(sp)
 1003770:	100912c0 	call	100912c <__floatsidf>
 1003774:	880b883a 	mov	r5,r17
 1003778:	8009883a 	mov	r4,r16
 100377c:	180f883a 	mov	r7,r3
 1003780:	100d883a 	mov	r6,r2
 1003784:	1008f0c0 	call	1008f0c <__nedf2>
 1003788:	103ce126 	beq	r2,zero,1002b10 <_dtoa_r+0x230>
 100378c:	d9800d17 	ldw	r6,52(sp)
 1003790:	31bfffc4 	addi	r6,r6,-1
 1003794:	d9800d15 	stw	r6,52(sp)
 1003798:	003cdd06 	br	1002b10 <_dtoa_r+0x230>
 100379c:	d9000717 	ldw	r4,28(sp)
 10037a0:	900b883a 	mov	r5,r18
 10037a4:	1005bd00 	call	1005bd0 <__mcmp>
 10037a8:	103e8d0e 	bge	r2,zero,10031e0 <_dtoa_r+0x900>
 10037ac:	d9400717 	ldw	r5,28(sp)
 10037b0:	d9001617 	ldw	r4,88(sp)
 10037b4:	01800284 	movi	r6,10
 10037b8:	000f883a 	mov	r7,zero
 10037bc:	10067280 	call	1006728 <__multadd>
 10037c0:	d9800d17 	ldw	r6,52(sp)
 10037c4:	d8800715 	stw	r2,28(sp)
 10037c8:	31bfffc4 	addi	r6,r6,-1
 10037cc:	d9800d15 	stw	r6,52(sp)
 10037d0:	b001a71e 	bne	r22,zero,1003e70 <_dtoa_r+0x1590>
 10037d4:	d8800e17 	ldw	r2,56(sp)
 10037d8:	d8800f15 	stw	r2,60(sp)
 10037dc:	003e8006 	br	10031e0 <_dtoa_r+0x900>
 10037e0:	90800417 	ldw	r2,16(r18)
 10037e4:	1085883a 	add	r2,r2,r2
 10037e8:	1085883a 	add	r2,r2,r2
 10037ec:	1485883a 	add	r2,r2,r18
 10037f0:	11000417 	ldw	r4,16(r2)
 10037f4:	1005a9c0 	call	1005a9c <__hi0bits>
 10037f8:	00c00804 	movi	r3,32
 10037fc:	1887c83a 	sub	r3,r3,r2
 1003800:	003e5a06 	br	100316c <_dtoa_r+0x88c>
 1003804:	d9400717 	ldw	r5,28(sp)
 1003808:	d9801017 	ldw	r6,64(sp)
 100380c:	d9001617 	ldw	r4,88(sp)
 1003810:	10068280 	call	1006828 <__pow5mult>
 1003814:	d8800715 	stw	r2,28(sp)
 1003818:	003e4306 	br	1003128 <_dtoa_r+0x848>
 100381c:	d9800f17 	ldw	r6,60(sp)
 1003820:	d8800d17 	ldw	r2,52(sp)
 1003824:	d9800315 	stw	r6,12(sp)
 1003828:	d8800415 	stw	r2,16(sp)
 100382c:	d8c00b17 	ldw	r3,44(sp)
 1003830:	1805003a 	cmpeq	r2,r3,zero
 1003834:	1000e21e 	bne	r2,zero,1003bc0 <_dtoa_r+0x12e0>
 1003838:	d9000317 	ldw	r4,12(sp)
 100383c:	0005883a 	mov	r2,zero
 1003840:	00cff834 	movhi	r3,16352
 1003844:	200c90fa 	slli	r6,r4,3
 1003848:	01004074 	movhi	r4,257
 100384c:	21333204 	addi	r4,r4,-13112
 1003850:	180b883a 	mov	r5,r3
 1003854:	310d883a 	add	r6,r6,r4
 1003858:	327fff17 	ldw	r9,-4(r6)
 100385c:	323ffe17 	ldw	r8,-8(r6)
 1003860:	1009883a 	mov	r4,r2
 1003864:	480f883a 	mov	r7,r9
 1003868:	400d883a 	mov	r6,r8
 100386c:	1008c2c0 	call	1008c2c <__divdf3>
 1003870:	180b883a 	mov	r5,r3
 1003874:	b00d883a 	mov	r6,r22
 1003878:	b80f883a 	mov	r7,r23
 100387c:	1009883a 	mov	r4,r2
 1003880:	10087740 	call	1008774 <__subdf3>
 1003884:	a80b883a 	mov	r5,r21
 1003888:	a009883a 	mov	r4,r20
 100388c:	d8c01915 	stw	r3,100(sp)
 1003890:	d8801815 	stw	r2,96(sp)
 1003894:	10092240 	call	1009224 <__fixdfsi>
 1003898:	1009883a 	mov	r4,r2
 100389c:	1027883a 	mov	r19,r2
 10038a0:	100912c0 	call	100912c <__floatsidf>
 10038a4:	a80b883a 	mov	r5,r21
 10038a8:	a009883a 	mov	r4,r20
 10038ac:	180f883a 	mov	r7,r3
 10038b0:	100d883a 	mov	r6,r2
 10038b4:	10087740 	call	1008774 <__subdf3>
 10038b8:	d9801817 	ldw	r6,96(sp)
 10038bc:	1823883a 	mov	r17,r3
 10038c0:	d8801415 	stw	r2,80(sp)
 10038c4:	302d883a 	mov	r22,r6
 10038c8:	d9800517 	ldw	r6,20(sp)
 10038cc:	9cc00c04 	addi	r19,r19,48
 10038d0:	dc401515 	stw	r17,84(sp)
 10038d4:	d8c01917 	ldw	r3,100(sp)
 10038d8:	34c00005 	stb	r19,0(r6)
 10038dc:	d8800517 	ldw	r2,20(sp)
 10038e0:	d9401917 	ldw	r5,100(sp)
 10038e4:	d9801417 	ldw	r6,80(sp)
 10038e8:	b009883a 	mov	r4,r22
 10038ec:	880f883a 	mov	r7,r17
 10038f0:	182f883a 	mov	r23,r3
 10038f4:	17000044 	addi	fp,r2,1
 10038f8:	1008f940 	call	1008f94 <__gtdf2>
 10038fc:	00804e16 	blt	zero,r2,1003a38 <_dtoa_r+0x1158>
 1003900:	d9801417 	ldw	r6,80(sp)
 1003904:	0005883a 	mov	r2,zero
 1003908:	00cffc34 	movhi	r3,16368
 100390c:	180b883a 	mov	r5,r3
 1003910:	880f883a 	mov	r7,r17
 1003914:	1009883a 	mov	r4,r2
 1003918:	10087740 	call	1008774 <__subdf3>
 100391c:	d9401917 	ldw	r5,100(sp)
 1003920:	180f883a 	mov	r7,r3
 1003924:	b009883a 	mov	r4,r22
 1003928:	100d883a 	mov	r6,r2
 100392c:	1008f940 	call	1008f94 <__gtdf2>
 1003930:	00bda216 	blt	zero,r2,1002fbc <_dtoa_r+0x6dc>
 1003934:	d8c00317 	ldw	r3,12(sp)
 1003938:	00800044 	movi	r2,1
 100393c:	10c01216 	blt	r2,r3,1003988 <_dtoa_r+0x10a8>
 1003940:	003d4506 	br	1002e58 <_dtoa_r+0x578>
 1003944:	d9801417 	ldw	r6,80(sp)
 1003948:	0005883a 	mov	r2,zero
 100394c:	00cffc34 	movhi	r3,16368
 1003950:	180b883a 	mov	r5,r3
 1003954:	880f883a 	mov	r7,r17
 1003958:	1009883a 	mov	r4,r2
 100395c:	10087740 	call	1008774 <__subdf3>
 1003960:	d9c01b17 	ldw	r7,108(sp)
 1003964:	180b883a 	mov	r5,r3
 1003968:	1009883a 	mov	r4,r2
 100396c:	b00d883a 	mov	r6,r22
 1003970:	10090a40 	call	10090a4 <__ltdf2>
 1003974:	103d9116 	blt	r2,zero,1002fbc <_dtoa_r+0x6dc>
 1003978:	d9800517 	ldw	r6,20(sp)
 100397c:	d9000317 	ldw	r4,12(sp)
 1003980:	3105883a 	add	r2,r6,r4
 1003984:	e0bd3426 	beq	fp,r2,1002e58 <_dtoa_r+0x578>
 1003988:	04500934 	movhi	r17,16420
 100398c:	0021883a 	mov	r16,zero
 1003990:	b80b883a 	mov	r5,r23
 1003994:	b009883a 	mov	r4,r22
 1003998:	800d883a 	mov	r6,r16
 100399c:	880f883a 	mov	r7,r17
 10039a0:	10088680 	call	1008868 <__muldf3>
 10039a4:	d9401517 	ldw	r5,84(sp)
 10039a8:	d9001417 	ldw	r4,80(sp)
 10039ac:	880f883a 	mov	r7,r17
 10039b0:	000d883a 	mov	r6,zero
 10039b4:	d8801a15 	stw	r2,104(sp)
 10039b8:	d8c01b15 	stw	r3,108(sp)
 10039bc:	10088680 	call	1008868 <__muldf3>
 10039c0:	180b883a 	mov	r5,r3
 10039c4:	1009883a 	mov	r4,r2
 10039c8:	1823883a 	mov	r17,r3
 10039cc:	1021883a 	mov	r16,r2
 10039d0:	10092240 	call	1009224 <__fixdfsi>
 10039d4:	1009883a 	mov	r4,r2
 10039d8:	102b883a 	mov	r21,r2
 10039dc:	100912c0 	call	100912c <__floatsidf>
 10039e0:	880b883a 	mov	r5,r17
 10039e4:	8009883a 	mov	r4,r16
 10039e8:	180f883a 	mov	r7,r3
 10039ec:	100d883a 	mov	r6,r2
 10039f0:	10087740 	call	1008774 <__subdf3>
 10039f4:	1021883a 	mov	r16,r2
 10039f8:	d9001b17 	ldw	r4,108(sp)
 10039fc:	1823883a 	mov	r17,r3
 1003a00:	dc001415 	stw	r16,80(sp)
 1003a04:	ad400c04 	addi	r21,r21,48
 1003a08:	dc401515 	stw	r17,84(sp)
 1003a0c:	d8801a17 	ldw	r2,104(sp)
 1003a10:	e5400005 	stb	r21,0(fp)
 1003a14:	202f883a 	mov	r23,r4
 1003a18:	d9c01b17 	ldw	r7,108(sp)
 1003a1c:	d9001417 	ldw	r4,80(sp)
 1003a20:	880b883a 	mov	r5,r17
 1003a24:	100d883a 	mov	r6,r2
 1003a28:	102d883a 	mov	r22,r2
 1003a2c:	e7000044 	addi	fp,fp,1
 1003a30:	10090a40 	call	10090a4 <__ltdf2>
 1003a34:	103fc30e 	bge	r2,zero,1003944 <_dtoa_r+0x1064>
 1003a38:	d9000417 	ldw	r4,16(sp)
 1003a3c:	d9000d15 	stw	r4,52(sp)
 1003a40:	003d7106 	br	1003008 <_dtoa_r+0x728>
 1003a44:	d9801717 	ldw	r6,92(sp)
 1003a48:	00800084 	movi	r2,2
 1003a4c:	11bde60e 	bge	r2,r6,10031e8 <_dtoa_r+0x908>
 1003a50:	203cfb1e 	bne	r4,zero,1002e40 <_dtoa_r+0x560>
 1003a54:	d9001617 	ldw	r4,88(sp)
 1003a58:	900b883a 	mov	r5,r18
 1003a5c:	01800144 	movi	r6,5
 1003a60:	000f883a 	mov	r7,zero
 1003a64:	10067280 	call	1006728 <__multadd>
 1003a68:	d9000717 	ldw	r4,28(sp)
 1003a6c:	100b883a 	mov	r5,r2
 1003a70:	1025883a 	mov	r18,r2
 1003a74:	1005bd00 	call	1005bd0 <__mcmp>
 1003a78:	00bcf10e 	bge	zero,r2,1002e40 <_dtoa_r+0x560>
 1003a7c:	d8c00d17 	ldw	r3,52(sp)
 1003a80:	d9000517 	ldw	r4,20(sp)
 1003a84:	d8000615 	stw	zero,24(sp)
 1003a88:	18c00044 	addi	r3,r3,1
 1003a8c:	d8c00d15 	stw	r3,52(sp)
 1003a90:	00800c44 	movi	r2,49
 1003a94:	27000044 	addi	fp,r4,1
 1003a98:	20800005 	stb	r2,0(r4)
 1003a9c:	003e8906 	br	10034c4 <_dtoa_r+0xbe4>
 1003aa0:	d8c00517 	ldw	r3,20(sp)
 1003aa4:	003bc206 	br	10029b0 <_dtoa_r+0xd0>
 1003aa8:	01804074 	movhi	r6,257
 1003aac:	31b36404 	addi	r6,r6,-12912
 1003ab0:	30c00917 	ldw	r3,36(r6)
 1003ab4:	30800817 	ldw	r2,32(r6)
 1003ab8:	d9001217 	ldw	r4,72(sp)
 1003abc:	d9401317 	ldw	r5,76(sp)
 1003ac0:	180f883a 	mov	r7,r3
 1003ac4:	100d883a 	mov	r6,r2
 1003ac8:	1008c2c0 	call	1008c2c <__divdf3>
 1003acc:	948003cc 	andi	r18,r18,15
 1003ad0:	058000c4 	movi	r22,3
 1003ad4:	1029883a 	mov	r20,r2
 1003ad8:	182b883a 	mov	r21,r3
 1003adc:	003c8906 	br	1002d04 <_dtoa_r+0x424>
 1003ae0:	d9001017 	ldw	r4,64(sp)
 1003ae4:	d9800917 	ldw	r6,36(sp)
 1003ae8:	0025883a 	mov	r18,zero
 1003aec:	1105c83a 	sub	r2,r2,r4
 1003af0:	2089883a 	add	r4,r4,r2
 1003af4:	308d883a 	add	r6,r6,r2
 1003af8:	d9001015 	stw	r4,64(sp)
 1003afc:	d9800915 	stw	r6,36(sp)
 1003b00:	003e3206 	br	10033cc <_dtoa_r+0xaec>
 1003b04:	28800044 	addi	r2,r5,1
 1003b08:	27000044 	addi	fp,r4,1
 1003b0c:	20800005 	stb	r2,0(r4)
 1003b10:	003e6c06 	br	10034c4 <_dtoa_r+0xbe4>
 1003b14:	d8800f17 	ldw	r2,60(sp)
 1003b18:	00bce016 	blt	zero,r2,1002e9c <_dtoa_r+0x5bc>
 1003b1c:	d9800f17 	ldw	r6,60(sp)
 1003b20:	303cc51e 	bne	r6,zero,1002e38 <_dtoa_r+0x558>
 1003b24:	0005883a 	mov	r2,zero
 1003b28:	00d00534 	movhi	r3,16404
 1003b2c:	980b883a 	mov	r5,r19
 1003b30:	180f883a 	mov	r7,r3
 1003b34:	9009883a 	mov	r4,r18
 1003b38:	100d883a 	mov	r6,r2
 1003b3c:	10088680 	call	1008868 <__muldf3>
 1003b40:	180b883a 	mov	r5,r3
 1003b44:	a80f883a 	mov	r7,r21
 1003b48:	1009883a 	mov	r4,r2
 1003b4c:	a00d883a 	mov	r6,r20
 1003b50:	100901c0 	call	100901c <__gedf2>
 1003b54:	103cb80e 	bge	r2,zero,1002e38 <_dtoa_r+0x558>
 1003b58:	0027883a 	mov	r19,zero
 1003b5c:	0025883a 	mov	r18,zero
 1003b60:	003fc606 	br	1003a7c <_dtoa_r+0x119c>
 1003b64:	99400117 	ldw	r5,4(r19)
 1003b68:	d9001617 	ldw	r4,88(sp)
 1003b6c:	1005ff40 	call	1005ff4 <_Balloc>
 1003b70:	99800417 	ldw	r6,16(r19)
 1003b74:	11000304 	addi	r4,r2,12
 1003b78:	99400304 	addi	r5,r19,12
 1003b7c:	318d883a 	add	r6,r6,r6
 1003b80:	318d883a 	add	r6,r6,r6
 1003b84:	31800204 	addi	r6,r6,8
 1003b88:	1023883a 	mov	r17,r2
 1003b8c:	100585c0 	call	100585c <memcpy>
 1003b90:	d9001617 	ldw	r4,88(sp)
 1003b94:	880b883a 	mov	r5,r17
 1003b98:	01800044 	movi	r6,1
 1003b9c:	10063b80 	call	10063b8 <__lshift>
 1003ba0:	100b883a 	mov	r5,r2
 1003ba4:	003d9c06 	br	1003218 <_dtoa_r+0x938>
 1003ba8:	00800e44 	movi	r2,57
 1003bac:	b8807026 	beq	r23,r2,1003d70 <_dtoa_r+0x1490>
 1003bb0:	b8800044 	addi	r2,r23,1
 1003bb4:	b7000044 	addi	fp,r22,1
 1003bb8:	b0800005 	stb	r2,0(r22)
 1003bbc:	003e4106 	br	10034c4 <_dtoa_r+0xbe4>
 1003bc0:	d8800317 	ldw	r2,12(sp)
 1003bc4:	01804074 	movhi	r6,257
 1003bc8:	31b33204 	addi	r6,r6,-13112
 1003bcc:	b009883a 	mov	r4,r22
 1003bd0:	100e90fa 	slli	r7,r2,3
 1003bd4:	b80b883a 	mov	r5,r23
 1003bd8:	398f883a 	add	r7,r7,r6
 1003bdc:	38bffe17 	ldw	r2,-8(r7)
 1003be0:	d9800517 	ldw	r6,20(sp)
 1003be4:	38ffff17 	ldw	r3,-4(r7)
 1003be8:	37000044 	addi	fp,r6,1
 1003bec:	180f883a 	mov	r7,r3
 1003bf0:	100d883a 	mov	r6,r2
 1003bf4:	10088680 	call	1008868 <__muldf3>
 1003bf8:	a80b883a 	mov	r5,r21
 1003bfc:	a009883a 	mov	r4,r20
 1003c00:	182f883a 	mov	r23,r3
 1003c04:	102d883a 	mov	r22,r2
 1003c08:	10092240 	call	1009224 <__fixdfsi>
 1003c0c:	1009883a 	mov	r4,r2
 1003c10:	1027883a 	mov	r19,r2
 1003c14:	100912c0 	call	100912c <__floatsidf>
 1003c18:	a80b883a 	mov	r5,r21
 1003c1c:	a009883a 	mov	r4,r20
 1003c20:	180f883a 	mov	r7,r3
 1003c24:	100d883a 	mov	r6,r2
 1003c28:	10087740 	call	1008774 <__subdf3>
 1003c2c:	180b883a 	mov	r5,r3
 1003c30:	d8c00517 	ldw	r3,20(sp)
 1003c34:	9cc00c04 	addi	r19,r19,48
 1003c38:	1009883a 	mov	r4,r2
 1003c3c:	1cc00005 	stb	r19,0(r3)
 1003c40:	2021883a 	mov	r16,r4
 1003c44:	d9000317 	ldw	r4,12(sp)
 1003c48:	00800044 	movi	r2,1
 1003c4c:	2823883a 	mov	r17,r5
 1003c50:	20802226 	beq	r4,r2,1003cdc <_dtoa_r+0x13fc>
 1003c54:	1029883a 	mov	r20,r2
 1003c58:	0005883a 	mov	r2,zero
 1003c5c:	00d00934 	movhi	r3,16420
 1003c60:	180f883a 	mov	r7,r3
 1003c64:	100d883a 	mov	r6,r2
 1003c68:	880b883a 	mov	r5,r17
 1003c6c:	8009883a 	mov	r4,r16
 1003c70:	10088680 	call	1008868 <__muldf3>
 1003c74:	180b883a 	mov	r5,r3
 1003c78:	1009883a 	mov	r4,r2
 1003c7c:	1823883a 	mov	r17,r3
 1003c80:	1021883a 	mov	r16,r2
 1003c84:	10092240 	call	1009224 <__fixdfsi>
 1003c88:	1009883a 	mov	r4,r2
 1003c8c:	102b883a 	mov	r21,r2
 1003c90:	100912c0 	call	100912c <__floatsidf>
 1003c94:	880b883a 	mov	r5,r17
 1003c98:	8009883a 	mov	r4,r16
 1003c9c:	180f883a 	mov	r7,r3
 1003ca0:	100d883a 	mov	r6,r2
 1003ca4:	10087740 	call	1008774 <__subdf3>
 1003ca8:	180b883a 	mov	r5,r3
 1003cac:	d8c00517 	ldw	r3,20(sp)
 1003cb0:	1009883a 	mov	r4,r2
 1003cb4:	ad400c04 	addi	r21,r21,48
 1003cb8:	1d05883a 	add	r2,r3,r20
 1003cbc:	15400005 	stb	r21,0(r2)
 1003cc0:	2021883a 	mov	r16,r4
 1003cc4:	d9000317 	ldw	r4,12(sp)
 1003cc8:	a5000044 	addi	r20,r20,1
 1003ccc:	2823883a 	mov	r17,r5
 1003cd0:	a13fe11e 	bne	r20,r4,1003c58 <_dtoa_r+0x1378>
 1003cd4:	e505883a 	add	r2,fp,r20
 1003cd8:	173fffc4 	addi	fp,r2,-1
 1003cdc:	0025883a 	mov	r18,zero
 1003ce0:	04cff834 	movhi	r19,16352
 1003ce4:	b009883a 	mov	r4,r22
 1003ce8:	b80b883a 	mov	r5,r23
 1003cec:	900d883a 	mov	r6,r18
 1003cf0:	980f883a 	mov	r7,r19
 1003cf4:	10087f40 	call	10087f4 <__adddf3>
 1003cf8:	180b883a 	mov	r5,r3
 1003cfc:	1009883a 	mov	r4,r2
 1003d00:	800d883a 	mov	r6,r16
 1003d04:	880f883a 	mov	r7,r17
 1003d08:	10090a40 	call	10090a4 <__ltdf2>
 1003d0c:	103cab16 	blt	r2,zero,1002fbc <_dtoa_r+0x6dc>
 1003d10:	0009883a 	mov	r4,zero
 1003d14:	980b883a 	mov	r5,r19
 1003d18:	b80f883a 	mov	r7,r23
 1003d1c:	b00d883a 	mov	r6,r22
 1003d20:	10087740 	call	1008774 <__subdf3>
 1003d24:	180b883a 	mov	r5,r3
 1003d28:	880f883a 	mov	r7,r17
 1003d2c:	1009883a 	mov	r4,r2
 1003d30:	800d883a 	mov	r6,r16
 1003d34:	1008f940 	call	1008f94 <__gtdf2>
 1003d38:	00bc470e 	bge	zero,r2,1002e58 <_dtoa_r+0x578>
 1003d3c:	00c00c04 	movi	r3,48
 1003d40:	e73fffc4 	addi	fp,fp,-1
 1003d44:	e0800007 	ldb	r2,0(fp)
 1003d48:	10fffd26 	beq	r2,r3,1003d40 <_dtoa_r+0x1460>
 1003d4c:	d9800417 	ldw	r6,16(sp)
 1003d50:	e7000044 	addi	fp,fp,1
 1003d54:	d9800d15 	stw	r6,52(sp)
 1003d58:	003cab06 	br	1003008 <_dtoa_r+0x728>
 1003d5c:	d8c00f17 	ldw	r3,60(sp)
 1003d60:	d9001117 	ldw	r4,68(sp)
 1003d64:	20e1c83a 	sub	r16,r4,r3
 1003d68:	0007883a 	mov	r3,zero
 1003d6c:	003d9b06 	br	10033dc <_dtoa_r+0xafc>
 1003d70:	00800e44 	movi	r2,57
 1003d74:	b0800005 	stb	r2,0(r22)
 1003d78:	b5800044 	addi	r22,r22,1
 1003d7c:	003dc106 	br	1003484 <_dtoa_r+0xba4>
 1003d80:	05800084 	movi	r22,2
 1003d84:	003bf706 	br	1002d64 <_dtoa_r+0x484>
 1003d88:	d9000f17 	ldw	r4,60(sp)
 1003d8c:	013c000e 	bge	zero,r4,1002d90 <_dtoa_r+0x4b0>
 1003d90:	d9800e17 	ldw	r6,56(sp)
 1003d94:	01bc300e 	bge	zero,r6,1002e58 <_dtoa_r+0x578>
 1003d98:	0005883a 	mov	r2,zero
 1003d9c:	00d00934 	movhi	r3,16420
 1003da0:	a80b883a 	mov	r5,r21
 1003da4:	180f883a 	mov	r7,r3
 1003da8:	a009883a 	mov	r4,r20
 1003dac:	100d883a 	mov	r6,r2
 1003db0:	10088680 	call	1008868 <__muldf3>
 1003db4:	b1000044 	addi	r4,r22,1
 1003db8:	1021883a 	mov	r16,r2
 1003dbc:	1823883a 	mov	r17,r3
 1003dc0:	100912c0 	call	100912c <__floatsidf>
 1003dc4:	880b883a 	mov	r5,r17
 1003dc8:	8009883a 	mov	r4,r16
 1003dcc:	180f883a 	mov	r7,r3
 1003dd0:	100d883a 	mov	r6,r2
 1003dd4:	10088680 	call	1008868 <__muldf3>
 1003dd8:	0011883a 	mov	r8,zero
 1003ddc:	02500734 	movhi	r9,16412
 1003de0:	180b883a 	mov	r5,r3
 1003de4:	480f883a 	mov	r7,r9
 1003de8:	1009883a 	mov	r4,r2
 1003dec:	400d883a 	mov	r6,r8
 1003df0:	10087f40 	call	10087f4 <__adddf3>
 1003df4:	102d883a 	mov	r22,r2
 1003df8:	00bf3034 	movhi	r2,64704
 1003dfc:	10ef883a 	add	r23,r2,r3
 1003e00:	d8800d17 	ldw	r2,52(sp)
 1003e04:	d8c00e17 	ldw	r3,56(sp)
 1003e08:	8029883a 	mov	r20,r16
 1003e0c:	10bfffc4 	addi	r2,r2,-1
 1003e10:	882b883a 	mov	r21,r17
 1003e14:	d8800415 	stw	r2,16(sp)
 1003e18:	d8c00315 	stw	r3,12(sp)
 1003e1c:	003e8306 	br	100382c <_dtoa_r+0xf4c>
 1003e20:	d8800117 	ldw	r2,4(sp)
 1003e24:	dc001117 	ldw	r16,68(sp)
 1003e28:	dc801017 	ldw	r18,64(sp)
 1003e2c:	00c00d84 	movi	r3,54
 1003e30:	1887c83a 	sub	r3,r3,r2
 1003e34:	003d6906 	br	10033dc <_dtoa_r+0xafc>
 1003e38:	01800044 	movi	r6,1
 1003e3c:	3021883a 	mov	r16,r6
 1003e40:	d9800f15 	stw	r6,60(sp)
 1003e44:	d9802615 	stw	r6,152(sp)
 1003e48:	d9800e15 	stw	r6,56(sp)
 1003e4c:	003b9306 	br	1002c9c <_dtoa_r+0x3bc>
 1003e50:	b021883a 	mov	r16,r22
 1003e54:	dd800f15 	stw	r22,60(sp)
 1003e58:	003b9006 	br	1002c9c <_dtoa_r+0x3bc>
 1003e5c:	103e221e 	bne	r2,zero,10036e8 <_dtoa_r+0xe08>
 1003e60:	b880004c 	andi	r2,r23,1
 1003e64:	1005003a 	cmpeq	r2,r2,zero
 1003e68:	103e1f1e 	bne	r2,zero,10036e8 <_dtoa_r+0xe08>
 1003e6c:	003e1b06 	br	10036dc <_dtoa_r+0xdfc>
 1003e70:	d9001617 	ldw	r4,88(sp)
 1003e74:	980b883a 	mov	r5,r19
 1003e78:	01800284 	movi	r6,10
 1003e7c:	000f883a 	mov	r7,zero
 1003e80:	10067280 	call	1006728 <__multadd>
 1003e84:	d8c00e17 	ldw	r3,56(sp)
 1003e88:	1027883a 	mov	r19,r2
 1003e8c:	d8c00f15 	stw	r3,60(sp)
 1003e90:	003cd306 	br	10031e0 <_dtoa_r+0x900>

01003e94 <_fflush_r>:
 1003e94:	defffb04 	addi	sp,sp,-20
 1003e98:	dcc00315 	stw	r19,12(sp)
 1003e9c:	dc800215 	stw	r18,8(sp)
 1003ea0:	dfc00415 	stw	ra,16(sp)
 1003ea4:	dc400115 	stw	r17,4(sp)
 1003ea8:	dc000015 	stw	r16,0(sp)
 1003eac:	2027883a 	mov	r19,r4
 1003eb0:	2825883a 	mov	r18,r5
 1003eb4:	20000226 	beq	r4,zero,1003ec0 <_fflush_r+0x2c>
 1003eb8:	20800e17 	ldw	r2,56(r4)
 1003ebc:	10005626 	beq	r2,zero,1004018 <_fflush_r+0x184>
 1003ec0:	9100030b 	ldhu	r4,12(r18)
 1003ec4:	20ffffcc 	andi	r3,r4,65535
 1003ec8:	18e0001c 	xori	r3,r3,32768
 1003ecc:	18e00004 	addi	r3,r3,-32768
 1003ed0:	1880020c 	andi	r2,r3,8
 1003ed4:	1000261e 	bne	r2,zero,1003f70 <_fflush_r+0xdc>
 1003ed8:	90c00117 	ldw	r3,4(r18)
 1003edc:	20820014 	ori	r2,r4,2048
 1003ee0:	9080030d 	sth	r2,12(r18)
 1003ee4:	1009883a 	mov	r4,r2
 1003ee8:	00c0400e 	bge	zero,r3,1003fec <_fflush_r+0x158>
 1003eec:	92000a17 	ldw	r8,40(r18)
 1003ef0:	40004026 	beq	r8,zero,1003ff4 <_fflush_r+0x160>
 1003ef4:	2084000c 	andi	r2,r4,4096
 1003ef8:	10005326 	beq	r2,zero,1004048 <_fflush_r+0x1b4>
 1003efc:	94001417 	ldw	r16,80(r18)
 1003f00:	9080030b 	ldhu	r2,12(r18)
 1003f04:	1080010c 	andi	r2,r2,4
 1003f08:	1000481e 	bne	r2,zero,100402c <_fflush_r+0x198>
 1003f0c:	91400717 	ldw	r5,28(r18)
 1003f10:	9809883a 	mov	r4,r19
 1003f14:	800d883a 	mov	r6,r16
 1003f18:	000f883a 	mov	r7,zero
 1003f1c:	403ee83a 	callr	r8
 1003f20:	8080261e 	bne	r16,r2,1003fbc <_fflush_r+0x128>
 1003f24:	9080030b 	ldhu	r2,12(r18)
 1003f28:	91000417 	ldw	r4,16(r18)
 1003f2c:	90000115 	stw	zero,4(r18)
 1003f30:	10bdffcc 	andi	r2,r2,63487
 1003f34:	10ffffcc 	andi	r3,r2,65535
 1003f38:	18c4000c 	andi	r3,r3,4096
 1003f3c:	9080030d 	sth	r2,12(r18)
 1003f40:	91000015 	stw	r4,0(r18)
 1003f44:	18002b26 	beq	r3,zero,1003ff4 <_fflush_r+0x160>
 1003f48:	0007883a 	mov	r3,zero
 1003f4c:	1805883a 	mov	r2,r3
 1003f50:	94001415 	stw	r16,80(r18)
 1003f54:	dfc00417 	ldw	ra,16(sp)
 1003f58:	dcc00317 	ldw	r19,12(sp)
 1003f5c:	dc800217 	ldw	r18,8(sp)
 1003f60:	dc400117 	ldw	r17,4(sp)
 1003f64:	dc000017 	ldw	r16,0(sp)
 1003f68:	dec00504 	addi	sp,sp,20
 1003f6c:	f800283a 	ret
 1003f70:	94400417 	ldw	r17,16(r18)
 1003f74:	88001f26 	beq	r17,zero,1003ff4 <_fflush_r+0x160>
 1003f78:	90800017 	ldw	r2,0(r18)
 1003f7c:	18c000cc 	andi	r3,r3,3
 1003f80:	94400015 	stw	r17,0(r18)
 1003f84:	1461c83a 	sub	r16,r2,r17
 1003f88:	18002526 	beq	r3,zero,1004020 <_fflush_r+0x18c>
 1003f8c:	0005883a 	mov	r2,zero
 1003f90:	90800215 	stw	r2,8(r18)
 1003f94:	0400170e 	bge	zero,r16,1003ff4 <_fflush_r+0x160>
 1003f98:	90c00917 	ldw	r3,36(r18)
 1003f9c:	91400717 	ldw	r5,28(r18)
 1003fa0:	880d883a 	mov	r6,r17
 1003fa4:	800f883a 	mov	r7,r16
 1003fa8:	9809883a 	mov	r4,r19
 1003fac:	183ee83a 	callr	r3
 1003fb0:	88a3883a 	add	r17,r17,r2
 1003fb4:	80a1c83a 	sub	r16,r16,r2
 1003fb8:	00bff616 	blt	zero,r2,1003f94 <_fflush_r+0x100>
 1003fbc:	9080030b 	ldhu	r2,12(r18)
 1003fc0:	00ffffc4 	movi	r3,-1
 1003fc4:	10801014 	ori	r2,r2,64
 1003fc8:	9080030d 	sth	r2,12(r18)
 1003fcc:	1805883a 	mov	r2,r3
 1003fd0:	dfc00417 	ldw	ra,16(sp)
 1003fd4:	dcc00317 	ldw	r19,12(sp)
 1003fd8:	dc800217 	ldw	r18,8(sp)
 1003fdc:	dc400117 	ldw	r17,4(sp)
 1003fe0:	dc000017 	ldw	r16,0(sp)
 1003fe4:	dec00504 	addi	sp,sp,20
 1003fe8:	f800283a 	ret
 1003fec:	90800f17 	ldw	r2,60(r18)
 1003ff0:	00bfbe16 	blt	zero,r2,1003eec <_fflush_r+0x58>
 1003ff4:	0007883a 	mov	r3,zero
 1003ff8:	1805883a 	mov	r2,r3
 1003ffc:	dfc00417 	ldw	ra,16(sp)
 1004000:	dcc00317 	ldw	r19,12(sp)
 1004004:	dc800217 	ldw	r18,8(sp)
 1004008:	dc400117 	ldw	r17,4(sp)
 100400c:	dc000017 	ldw	r16,0(sp)
 1004010:	dec00504 	addi	sp,sp,20
 1004014:	f800283a 	ret
 1004018:	100412c0 	call	100412c <__sinit>
 100401c:	003fa806 	br	1003ec0 <_fflush_r+0x2c>
 1004020:	90800517 	ldw	r2,20(r18)
 1004024:	90800215 	stw	r2,8(r18)
 1004028:	003fda06 	br	1003f94 <_fflush_r+0x100>
 100402c:	90800117 	ldw	r2,4(r18)
 1004030:	90c00c17 	ldw	r3,48(r18)
 1004034:	80a1c83a 	sub	r16,r16,r2
 1004038:	183fb426 	beq	r3,zero,1003f0c <_fflush_r+0x78>
 100403c:	90800f17 	ldw	r2,60(r18)
 1004040:	80a1c83a 	sub	r16,r16,r2
 1004044:	003fb106 	br	1003f0c <_fflush_r+0x78>
 1004048:	91400717 	ldw	r5,28(r18)
 100404c:	9809883a 	mov	r4,r19
 1004050:	000d883a 	mov	r6,zero
 1004054:	01c00044 	movi	r7,1
 1004058:	403ee83a 	callr	r8
 100405c:	1021883a 	mov	r16,r2
 1004060:	00bfffc4 	movi	r2,-1
 1004064:	80800226 	beq	r16,r2,1004070 <_fflush_r+0x1dc>
 1004068:	92000a17 	ldw	r8,40(r18)
 100406c:	003fa406 	br	1003f00 <_fflush_r+0x6c>
 1004070:	98c00017 	ldw	r3,0(r19)
 1004074:	00800744 	movi	r2,29
 1004078:	18bfde26 	beq	r3,r2,1003ff4 <_fflush_r+0x160>
 100407c:	9080030b 	ldhu	r2,12(r18)
 1004080:	8007883a 	mov	r3,r16
 1004084:	10801014 	ori	r2,r2,64
 1004088:	9080030d 	sth	r2,12(r18)
 100408c:	003fcf06 	br	1003fcc <_fflush_r+0x138>

01004090 <fflush>:
 1004090:	01404034 	movhi	r5,256
 1004094:	294fa504 	addi	r5,r5,16020
 1004098:	2007883a 	mov	r3,r4
 100409c:	20000526 	beq	r4,zero,10040b4 <fflush+0x24>
 10040a0:	00804074 	movhi	r2,257
 10040a4:	10ba8204 	addi	r2,r2,-5624
 10040a8:	11000017 	ldw	r4,0(r2)
 10040ac:	180b883a 	mov	r5,r3
 10040b0:	1003e941 	jmpi	1003e94 <_fflush_r>
 10040b4:	00804074 	movhi	r2,257
 10040b8:	10ba8304 	addi	r2,r2,-5620
 10040bc:	11000017 	ldw	r4,0(r2)
 10040c0:	1004c601 	jmpi	1004c60 <_fwalk_reent>

010040c4 <std>:
 10040c4:	00804034 	movhi	r2,256
 10040c8:	109c4f04 	addi	r2,r2,28988
 10040cc:	20800b15 	stw	r2,44(r4)
 10040d0:	00804034 	movhi	r2,256
 10040d4:	109c8a04 	addi	r2,r2,29224
 10040d8:	20800815 	stw	r2,32(r4)
 10040dc:	00c04034 	movhi	r3,256
 10040e0:	18dc6b04 	addi	r3,r3,29100
 10040e4:	00804034 	movhi	r2,256
 10040e8:	109c5104 	addi	r2,r2,28996
 10040ec:	2140030d 	sth	r5,12(r4)
 10040f0:	2180038d 	sth	r6,14(r4)
 10040f4:	20c00915 	stw	r3,36(r4)
 10040f8:	20800a15 	stw	r2,40(r4)
 10040fc:	20000015 	stw	zero,0(r4)
 1004100:	20000115 	stw	zero,4(r4)
 1004104:	20000215 	stw	zero,8(r4)
 1004108:	20000415 	stw	zero,16(r4)
 100410c:	20000515 	stw	zero,20(r4)
 1004110:	20000615 	stw	zero,24(r4)
 1004114:	21000715 	stw	r4,28(r4)
 1004118:	f800283a 	ret

0100411c <__sfp_lock_acquire>:
 100411c:	f800283a 	ret

01004120 <__sfp_lock_release>:
 1004120:	f800283a 	ret

01004124 <__sinit_lock_acquire>:
 1004124:	f800283a 	ret

01004128 <__sinit_lock_release>:
 1004128:	f800283a 	ret

0100412c <__sinit>:
 100412c:	20800e17 	ldw	r2,56(r4)
 1004130:	defffd04 	addi	sp,sp,-12
 1004134:	dc400115 	stw	r17,4(sp)
 1004138:	dc000015 	stw	r16,0(sp)
 100413c:	dfc00215 	stw	ra,8(sp)
 1004140:	04400044 	movi	r17,1
 1004144:	01400104 	movi	r5,4
 1004148:	000d883a 	mov	r6,zero
 100414c:	2021883a 	mov	r16,r4
 1004150:	2200bb04 	addi	r8,r4,748
 1004154:	200f883a 	mov	r7,r4
 1004158:	10000526 	beq	r2,zero,1004170 <__sinit+0x44>
 100415c:	dfc00217 	ldw	ra,8(sp)
 1004160:	dc400117 	ldw	r17,4(sp)
 1004164:	dc000017 	ldw	r16,0(sp)
 1004168:	dec00304 	addi	sp,sp,12
 100416c:	f800283a 	ret
 1004170:	21000117 	ldw	r4,4(r4)
 1004174:	00804034 	movhi	r2,256
 1004178:	10908404 	addi	r2,r2,16912
 100417c:	00c000c4 	movi	r3,3
 1004180:	80800f15 	stw	r2,60(r16)
 1004184:	80c0b915 	stw	r3,740(r16)
 1004188:	8200ba15 	stw	r8,744(r16)
 100418c:	84400e15 	stw	r17,56(r16)
 1004190:	8000b815 	stw	zero,736(r16)
 1004194:	10040c40 	call	10040c4 <std>
 1004198:	81000217 	ldw	r4,8(r16)
 100419c:	880d883a 	mov	r6,r17
 10041a0:	800f883a 	mov	r7,r16
 10041a4:	01400284 	movi	r5,10
 10041a8:	10040c40 	call	10040c4 <std>
 10041ac:	81000317 	ldw	r4,12(r16)
 10041b0:	800f883a 	mov	r7,r16
 10041b4:	01400484 	movi	r5,18
 10041b8:	01800084 	movi	r6,2
 10041bc:	dfc00217 	ldw	ra,8(sp)
 10041c0:	dc400117 	ldw	r17,4(sp)
 10041c4:	dc000017 	ldw	r16,0(sp)
 10041c8:	dec00304 	addi	sp,sp,12
 10041cc:	10040c41 	jmpi	10040c4 <std>

010041d0 <__fp_lock>:
 10041d0:	0005883a 	mov	r2,zero
 10041d4:	f800283a 	ret

010041d8 <__fp_unlock>:
 10041d8:	0005883a 	mov	r2,zero
 10041dc:	f800283a 	ret

010041e0 <__fp_unlock_all>:
 10041e0:	00804074 	movhi	r2,257
 10041e4:	10ba8204 	addi	r2,r2,-5624
 10041e8:	11000017 	ldw	r4,0(r2)
 10041ec:	01404034 	movhi	r5,256
 10041f0:	29507604 	addi	r5,r5,16856
 10041f4:	1004d281 	jmpi	1004d28 <_fwalk>

010041f8 <__fp_lock_all>:
 10041f8:	00804074 	movhi	r2,257
 10041fc:	10ba8204 	addi	r2,r2,-5624
 1004200:	11000017 	ldw	r4,0(r2)
 1004204:	01404034 	movhi	r5,256
 1004208:	29507404 	addi	r5,r5,16848
 100420c:	1004d281 	jmpi	1004d28 <_fwalk>

01004210 <_cleanup_r>:
 1004210:	01404034 	movhi	r5,256
 1004214:	295d7c04 	addi	r5,r5,30192
 1004218:	1004d281 	jmpi	1004d28 <_fwalk>

0100421c <_cleanup>:
 100421c:	00804074 	movhi	r2,257
 1004220:	10ba8304 	addi	r2,r2,-5620
 1004224:	11000017 	ldw	r4,0(r2)
 1004228:	10042101 	jmpi	1004210 <_cleanup_r>

0100422c <__sfmoreglue>:
 100422c:	defffc04 	addi	sp,sp,-16
 1004230:	dc400115 	stw	r17,4(sp)
 1004234:	2c401724 	muli	r17,r5,92
 1004238:	dc800215 	stw	r18,8(sp)
 100423c:	2825883a 	mov	r18,r5
 1004240:	89400304 	addi	r5,r17,12
 1004244:	dc000015 	stw	r16,0(sp)
 1004248:	dfc00315 	stw	ra,12(sp)
 100424c:	10050380 	call	1005038 <_malloc_r>
 1004250:	0021883a 	mov	r16,zero
 1004254:	880d883a 	mov	r6,r17
 1004258:	000b883a 	mov	r5,zero
 100425c:	10000626 	beq	r2,zero,1004278 <__sfmoreglue+0x4c>
 1004260:	11000304 	addi	r4,r2,12
 1004264:	14800115 	stw	r18,4(r2)
 1004268:	10000015 	stw	zero,0(r2)
 100426c:	11000215 	stw	r4,8(r2)
 1004270:	1021883a 	mov	r16,r2
 1004274:	10059dc0 	call	10059dc <memset>
 1004278:	8005883a 	mov	r2,r16
 100427c:	dfc00317 	ldw	ra,12(sp)
 1004280:	dc800217 	ldw	r18,8(sp)
 1004284:	dc400117 	ldw	r17,4(sp)
 1004288:	dc000017 	ldw	r16,0(sp)
 100428c:	dec00404 	addi	sp,sp,16
 1004290:	f800283a 	ret

01004294 <__sfp>:
 1004294:	defffd04 	addi	sp,sp,-12
 1004298:	00804074 	movhi	r2,257
 100429c:	10ba8304 	addi	r2,r2,-5620
 10042a0:	dc000015 	stw	r16,0(sp)
 10042a4:	14000017 	ldw	r16,0(r2)
 10042a8:	dc400115 	stw	r17,4(sp)
 10042ac:	dfc00215 	stw	ra,8(sp)
 10042b0:	80800e17 	ldw	r2,56(r16)
 10042b4:	2023883a 	mov	r17,r4
 10042b8:	10002626 	beq	r2,zero,1004354 <__sfp+0xc0>
 10042bc:	8400b804 	addi	r16,r16,736
 10042c0:	80800117 	ldw	r2,4(r16)
 10042c4:	81000217 	ldw	r4,8(r16)
 10042c8:	10ffffc4 	addi	r3,r2,-1
 10042cc:	18000916 	blt	r3,zero,10042f4 <__sfp+0x60>
 10042d0:	2080030f 	ldh	r2,12(r4)
 10042d4:	10000b26 	beq	r2,zero,1004304 <__sfp+0x70>
 10042d8:	017fffc4 	movi	r5,-1
 10042dc:	00000206 	br	10042e8 <__sfp+0x54>
 10042e0:	2080030f 	ldh	r2,12(r4)
 10042e4:	10000726 	beq	r2,zero,1004304 <__sfp+0x70>
 10042e8:	18ffffc4 	addi	r3,r3,-1
 10042ec:	21001704 	addi	r4,r4,92
 10042f0:	197ffb1e 	bne	r3,r5,10042e0 <__sfp+0x4c>
 10042f4:	80800017 	ldw	r2,0(r16)
 10042f8:	10001926 	beq	r2,zero,1004360 <__sfp+0xcc>
 10042fc:	1021883a 	mov	r16,r2
 1004300:	003fef06 	br	10042c0 <__sfp+0x2c>
 1004304:	00bfffc4 	movi	r2,-1
 1004308:	00c00044 	movi	r3,1
 100430c:	2080038d 	sth	r2,14(r4)
 1004310:	20c0030d 	sth	r3,12(r4)
 1004314:	20000015 	stw	zero,0(r4)
 1004318:	20000215 	stw	zero,8(r4)
 100431c:	20000115 	stw	zero,4(r4)
 1004320:	20000415 	stw	zero,16(r4)
 1004324:	20000515 	stw	zero,20(r4)
 1004328:	20000615 	stw	zero,24(r4)
 100432c:	20000c15 	stw	zero,48(r4)
 1004330:	20000d15 	stw	zero,52(r4)
 1004334:	20001115 	stw	zero,68(r4)
 1004338:	20001215 	stw	zero,72(r4)
 100433c:	2005883a 	mov	r2,r4
 1004340:	dfc00217 	ldw	ra,8(sp)
 1004344:	dc400117 	ldw	r17,4(sp)
 1004348:	dc000017 	ldw	r16,0(sp)
 100434c:	dec00304 	addi	sp,sp,12
 1004350:	f800283a 	ret
 1004354:	8009883a 	mov	r4,r16
 1004358:	100412c0 	call	100412c <__sinit>
 100435c:	003fd706 	br	10042bc <__sfp+0x28>
 1004360:	8809883a 	mov	r4,r17
 1004364:	01400104 	movi	r5,4
 1004368:	100422c0 	call	100422c <__sfmoreglue>
 100436c:	80800015 	stw	r2,0(r16)
 1004370:	103fe21e 	bne	r2,zero,10042fc <__sfp+0x68>
 1004374:	00800304 	movi	r2,12
 1004378:	0009883a 	mov	r4,zero
 100437c:	88800015 	stw	r2,0(r17)
 1004380:	003fee06 	br	100433c <__sfp+0xa8>

01004384 <_malloc_trim_r>:
 1004384:	defffb04 	addi	sp,sp,-20
 1004388:	dcc00315 	stw	r19,12(sp)
 100438c:	04c04074 	movhi	r19,257
 1004390:	9cf4dc04 	addi	r19,r19,-11408
 1004394:	dc800215 	stw	r18,8(sp)
 1004398:	dc400115 	stw	r17,4(sp)
 100439c:	dc000015 	stw	r16,0(sp)
 10043a0:	2823883a 	mov	r17,r5
 10043a4:	2025883a 	mov	r18,r4
 10043a8:	dfc00415 	stw	ra,16(sp)
 10043ac:	100a28c0 	call	100a28c <__malloc_lock>
 10043b0:	98800217 	ldw	r2,8(r19)
 10043b4:	9009883a 	mov	r4,r18
 10043b8:	000b883a 	mov	r5,zero
 10043bc:	10c00117 	ldw	r3,4(r2)
 10043c0:	00bfff04 	movi	r2,-4
 10043c4:	18a0703a 	and	r16,r3,r2
 10043c8:	8463c83a 	sub	r17,r16,r17
 10043cc:	8c43fbc4 	addi	r17,r17,4079
 10043d0:	8822d33a 	srli	r17,r17,12
 10043d4:	0083ffc4 	movi	r2,4095
 10043d8:	8c7fffc4 	addi	r17,r17,-1
 10043dc:	8822933a 	slli	r17,r17,12
 10043e0:	1440060e 	bge	r2,r17,10043fc <_malloc_trim_r+0x78>
 10043e4:	10070cc0 	call	10070cc <_sbrk_r>
 10043e8:	98c00217 	ldw	r3,8(r19)
 10043ec:	9009883a 	mov	r4,r18
 10043f0:	044bc83a 	sub	r5,zero,r17
 10043f4:	80c7883a 	add	r3,r16,r3
 10043f8:	10c00926 	beq	r2,r3,1004420 <_malloc_trim_r+0x9c>
 10043fc:	100a2ac0 	call	100a2ac <__malloc_unlock>
 1004400:	0005883a 	mov	r2,zero
 1004404:	dfc00417 	ldw	ra,16(sp)
 1004408:	dcc00317 	ldw	r19,12(sp)
 100440c:	dc800217 	ldw	r18,8(sp)
 1004410:	dc400117 	ldw	r17,4(sp)
 1004414:	dc000017 	ldw	r16,0(sp)
 1004418:	dec00504 	addi	sp,sp,20
 100441c:	f800283a 	ret
 1004420:	9009883a 	mov	r4,r18
 1004424:	10070cc0 	call	10070cc <_sbrk_r>
 1004428:	844dc83a 	sub	r6,r16,r17
 100442c:	00ffffc4 	movi	r3,-1
 1004430:	9009883a 	mov	r4,r18
 1004434:	000b883a 	mov	r5,zero
 1004438:	01c04074 	movhi	r7,257
 100443c:	39c15804 	addi	r7,r7,1376
 1004440:	31800054 	ori	r6,r6,1
 1004444:	10c00926 	beq	r2,r3,100446c <_malloc_trim_r+0xe8>
 1004448:	38800017 	ldw	r2,0(r7)
 100444c:	98c00217 	ldw	r3,8(r19)
 1004450:	9009883a 	mov	r4,r18
 1004454:	1445c83a 	sub	r2,r2,r17
 1004458:	38800015 	stw	r2,0(r7)
 100445c:	19800115 	stw	r6,4(r3)
 1004460:	100a2ac0 	call	100a2ac <__malloc_unlock>
 1004464:	00800044 	movi	r2,1
 1004468:	003fe606 	br	1004404 <_malloc_trim_r+0x80>
 100446c:	10070cc0 	call	10070cc <_sbrk_r>
 1004470:	99800217 	ldw	r6,8(r19)
 1004474:	100f883a 	mov	r7,r2
 1004478:	9009883a 	mov	r4,r18
 100447c:	1187c83a 	sub	r3,r2,r6
 1004480:	008003c4 	movi	r2,15
 1004484:	19400054 	ori	r5,r3,1
 1004488:	10ffdc0e 	bge	r2,r3,10043fc <_malloc_trim_r+0x78>
 100448c:	00804074 	movhi	r2,257
 1004490:	10ba8704 	addi	r2,r2,-5604
 1004494:	10c00017 	ldw	r3,0(r2)
 1004498:	00804074 	movhi	r2,257
 100449c:	10815804 	addi	r2,r2,1376
 10044a0:	31400115 	stw	r5,4(r6)
 10044a4:	38c7c83a 	sub	r3,r7,r3
 10044a8:	10c00015 	stw	r3,0(r2)
 10044ac:	003fd306 	br	10043fc <_malloc_trim_r+0x78>

010044b0 <_free_r>:
 10044b0:	defffd04 	addi	sp,sp,-12
 10044b4:	dc400115 	stw	r17,4(sp)
 10044b8:	dc000015 	stw	r16,0(sp)
 10044bc:	dfc00215 	stw	ra,8(sp)
 10044c0:	2821883a 	mov	r16,r5
 10044c4:	2023883a 	mov	r17,r4
 10044c8:	28005a26 	beq	r5,zero,1004634 <_free_r+0x184>
 10044cc:	100a28c0 	call	100a28c <__malloc_lock>
 10044d0:	823ffe04 	addi	r8,r16,-8
 10044d4:	41400117 	ldw	r5,4(r8)
 10044d8:	00bfff84 	movi	r2,-2
 10044dc:	02804074 	movhi	r10,257
 10044e0:	52b4dc04 	addi	r10,r10,-11408
 10044e4:	288e703a 	and	r7,r5,r2
 10044e8:	41cd883a 	add	r6,r8,r7
 10044ec:	30c00117 	ldw	r3,4(r6)
 10044f0:	51000217 	ldw	r4,8(r10)
 10044f4:	00bfff04 	movi	r2,-4
 10044f8:	1892703a 	and	r9,r3,r2
 10044fc:	5017883a 	mov	r11,r10
 1004500:	31006726 	beq	r6,r4,10046a0 <_free_r+0x1f0>
 1004504:	2880004c 	andi	r2,r5,1
 1004508:	1005003a 	cmpeq	r2,r2,zero
 100450c:	32400115 	stw	r9,4(r6)
 1004510:	10001a1e 	bne	r2,zero,100457c <_free_r+0xcc>
 1004514:	000b883a 	mov	r5,zero
 1004518:	3247883a 	add	r3,r6,r9
 100451c:	18800117 	ldw	r2,4(r3)
 1004520:	1080004c 	andi	r2,r2,1
 1004524:	1000231e 	bne	r2,zero,10045b4 <_free_r+0x104>
 1004528:	280ac03a 	cmpne	r5,r5,zero
 100452c:	3a4f883a 	add	r7,r7,r9
 1004530:	2800451e 	bne	r5,zero,1004648 <_free_r+0x198>
 1004534:	31000217 	ldw	r4,8(r6)
 1004538:	00804074 	movhi	r2,257
 100453c:	10b4de04 	addi	r2,r2,-11400
 1004540:	20807b26 	beq	r4,r2,1004730 <_free_r+0x280>
 1004544:	30800317 	ldw	r2,12(r6)
 1004548:	3a07883a 	add	r3,r7,r8
 100454c:	19c00015 	stw	r7,0(r3)
 1004550:	11000215 	stw	r4,8(r2)
 1004554:	20800315 	stw	r2,12(r4)
 1004558:	38800054 	ori	r2,r7,1
 100455c:	40800115 	stw	r2,4(r8)
 1004560:	28001a26 	beq	r5,zero,10045cc <_free_r+0x11c>
 1004564:	8809883a 	mov	r4,r17
 1004568:	dfc00217 	ldw	ra,8(sp)
 100456c:	dc400117 	ldw	r17,4(sp)
 1004570:	dc000017 	ldw	r16,0(sp)
 1004574:	dec00304 	addi	sp,sp,12
 1004578:	100a2ac1 	jmpi	100a2ac <__malloc_unlock>
 100457c:	80bffe17 	ldw	r2,-8(r16)
 1004580:	50c00204 	addi	r3,r10,8
 1004584:	4091c83a 	sub	r8,r8,r2
 1004588:	41000217 	ldw	r4,8(r8)
 100458c:	388f883a 	add	r7,r7,r2
 1004590:	20c06126 	beq	r4,r3,1004718 <_free_r+0x268>
 1004594:	40800317 	ldw	r2,12(r8)
 1004598:	3247883a 	add	r3,r6,r9
 100459c:	000b883a 	mov	r5,zero
 10045a0:	11000215 	stw	r4,8(r2)
 10045a4:	20800315 	stw	r2,12(r4)
 10045a8:	18800117 	ldw	r2,4(r3)
 10045ac:	1080004c 	andi	r2,r2,1
 10045b0:	103fdd26 	beq	r2,zero,1004528 <_free_r+0x78>
 10045b4:	38800054 	ori	r2,r7,1
 10045b8:	3a07883a 	add	r3,r7,r8
 10045bc:	280ac03a 	cmpne	r5,r5,zero
 10045c0:	40800115 	stw	r2,4(r8)
 10045c4:	19c00015 	stw	r7,0(r3)
 10045c8:	283fe61e 	bne	r5,zero,1004564 <_free_r+0xb4>
 10045cc:	00807fc4 	movi	r2,511
 10045d0:	11c01f2e 	bgeu	r2,r7,1004650 <_free_r+0x1a0>
 10045d4:	3806d27a 	srli	r3,r7,9
 10045d8:	1800481e 	bne	r3,zero,10046fc <_free_r+0x24c>
 10045dc:	3804d0fa 	srli	r2,r7,3
 10045e0:	100690fa 	slli	r3,r2,3
 10045e4:	1acd883a 	add	r6,r3,r11
 10045e8:	31400217 	ldw	r5,8(r6)
 10045ec:	31405926 	beq	r6,r5,1004754 <_free_r+0x2a4>
 10045f0:	28800117 	ldw	r2,4(r5)
 10045f4:	00ffff04 	movi	r3,-4
 10045f8:	10c4703a 	and	r2,r2,r3
 10045fc:	3880022e 	bgeu	r7,r2,1004608 <_free_r+0x158>
 1004600:	29400217 	ldw	r5,8(r5)
 1004604:	317ffa1e 	bne	r6,r5,10045f0 <_free_r+0x140>
 1004608:	29800317 	ldw	r6,12(r5)
 100460c:	41800315 	stw	r6,12(r8)
 1004610:	41400215 	stw	r5,8(r8)
 1004614:	8809883a 	mov	r4,r17
 1004618:	2a000315 	stw	r8,12(r5)
 100461c:	32000215 	stw	r8,8(r6)
 1004620:	dfc00217 	ldw	ra,8(sp)
 1004624:	dc400117 	ldw	r17,4(sp)
 1004628:	dc000017 	ldw	r16,0(sp)
 100462c:	dec00304 	addi	sp,sp,12
 1004630:	100a2ac1 	jmpi	100a2ac <__malloc_unlock>
 1004634:	dfc00217 	ldw	ra,8(sp)
 1004638:	dc400117 	ldw	r17,4(sp)
 100463c:	dc000017 	ldw	r16,0(sp)
 1004640:	dec00304 	addi	sp,sp,12
 1004644:	f800283a 	ret
 1004648:	31000217 	ldw	r4,8(r6)
 100464c:	003fbd06 	br	1004544 <_free_r+0x94>
 1004650:	3806d0fa 	srli	r3,r7,3
 1004654:	00800044 	movi	r2,1
 1004658:	51400117 	ldw	r5,4(r10)
 100465c:	180890fa 	slli	r4,r3,3
 1004660:	1807d0ba 	srai	r3,r3,2
 1004664:	22c9883a 	add	r4,r4,r11
 1004668:	21800217 	ldw	r6,8(r4)
 100466c:	10c4983a 	sll	r2,r2,r3
 1004670:	41000315 	stw	r4,12(r8)
 1004674:	41800215 	stw	r6,8(r8)
 1004678:	288ab03a 	or	r5,r5,r2
 100467c:	22000215 	stw	r8,8(r4)
 1004680:	8809883a 	mov	r4,r17
 1004684:	51400115 	stw	r5,4(r10)
 1004688:	32000315 	stw	r8,12(r6)
 100468c:	dfc00217 	ldw	ra,8(sp)
 1004690:	dc400117 	ldw	r17,4(sp)
 1004694:	dc000017 	ldw	r16,0(sp)
 1004698:	dec00304 	addi	sp,sp,12
 100469c:	100a2ac1 	jmpi	100a2ac <__malloc_unlock>
 10046a0:	2880004c 	andi	r2,r5,1
 10046a4:	3a4d883a 	add	r6,r7,r9
 10046a8:	1000071e 	bne	r2,zero,10046c8 <_free_r+0x218>
 10046ac:	80bffe17 	ldw	r2,-8(r16)
 10046b0:	4091c83a 	sub	r8,r8,r2
 10046b4:	41000317 	ldw	r4,12(r8)
 10046b8:	40c00217 	ldw	r3,8(r8)
 10046bc:	308d883a 	add	r6,r6,r2
 10046c0:	20c00215 	stw	r3,8(r4)
 10046c4:	19000315 	stw	r4,12(r3)
 10046c8:	00804074 	movhi	r2,257
 10046cc:	10ba8604 	addi	r2,r2,-5608
 10046d0:	11000017 	ldw	r4,0(r2)
 10046d4:	30c00054 	ori	r3,r6,1
 10046d8:	52000215 	stw	r8,8(r10)
 10046dc:	40c00115 	stw	r3,4(r8)
 10046e0:	313fa036 	bltu	r6,r4,1004564 <_free_r+0xb4>
 10046e4:	00804074 	movhi	r2,257
 10046e8:	10814e04 	addi	r2,r2,1336
 10046ec:	11400017 	ldw	r5,0(r2)
 10046f0:	8809883a 	mov	r4,r17
 10046f4:	10043840 	call	1004384 <_malloc_trim_r>
 10046f8:	003f9a06 	br	1004564 <_free_r+0xb4>
 10046fc:	00800104 	movi	r2,4
 1004700:	10c0072e 	bgeu	r2,r3,1004720 <_free_r+0x270>
 1004704:	00800504 	movi	r2,20
 1004708:	10c01936 	bltu	r2,r3,1004770 <_free_r+0x2c0>
 100470c:	188016c4 	addi	r2,r3,91
 1004710:	100690fa 	slli	r3,r2,3
 1004714:	003fb306 	br	10045e4 <_free_r+0x134>
 1004718:	01400044 	movi	r5,1
 100471c:	003f7e06 	br	1004518 <_free_r+0x68>
 1004720:	3804d1ba 	srli	r2,r7,6
 1004724:	10800e04 	addi	r2,r2,56
 1004728:	100690fa 	slli	r3,r2,3
 100472c:	003fad06 	br	10045e4 <_free_r+0x134>
 1004730:	22000315 	stw	r8,12(r4)
 1004734:	22000215 	stw	r8,8(r4)
 1004738:	3a05883a 	add	r2,r7,r8
 100473c:	38c00054 	ori	r3,r7,1
 1004740:	11c00015 	stw	r7,0(r2)
 1004744:	41000215 	stw	r4,8(r8)
 1004748:	40c00115 	stw	r3,4(r8)
 100474c:	41000315 	stw	r4,12(r8)
 1004750:	003f8406 	br	1004564 <_free_r+0xb4>
 1004754:	1005d0ba 	srai	r2,r2,2
 1004758:	00c00044 	movi	r3,1
 100475c:	51000117 	ldw	r4,4(r10)
 1004760:	1886983a 	sll	r3,r3,r2
 1004764:	20c8b03a 	or	r4,r4,r3
 1004768:	51000115 	stw	r4,4(r10)
 100476c:	003fa706 	br	100460c <_free_r+0x15c>
 1004770:	00801504 	movi	r2,84
 1004774:	10c00436 	bltu	r2,r3,1004788 <_free_r+0x2d8>
 1004778:	3804d33a 	srli	r2,r7,12
 100477c:	10801b84 	addi	r2,r2,110
 1004780:	100690fa 	slli	r3,r2,3
 1004784:	003f9706 	br	10045e4 <_free_r+0x134>
 1004788:	00805504 	movi	r2,340
 100478c:	10c00436 	bltu	r2,r3,10047a0 <_free_r+0x2f0>
 1004790:	3804d3fa 	srli	r2,r7,15
 1004794:	10801dc4 	addi	r2,r2,119
 1004798:	100690fa 	slli	r3,r2,3
 100479c:	003f9106 	br	10045e4 <_free_r+0x134>
 10047a0:	00815504 	movi	r2,1364
 10047a4:	10c0032e 	bgeu	r2,r3,10047b4 <_free_r+0x304>
 10047a8:	00801f84 	movi	r2,126
 10047ac:	00c0fc04 	movi	r3,1008
 10047b0:	003f8c06 	br	10045e4 <_free_r+0x134>
 10047b4:	3804d4ba 	srli	r2,r7,18
 10047b8:	10801f04 	addi	r2,r2,124
 10047bc:	100690fa 	slli	r3,r2,3
 10047c0:	003f8806 	br	10045e4 <_free_r+0x134>

010047c4 <__sfvwrite_r>:
 10047c4:	30800217 	ldw	r2,8(r6)
 10047c8:	defff504 	addi	sp,sp,-44
 10047cc:	df000915 	stw	fp,36(sp)
 10047d0:	dd800715 	stw	r22,28(sp)
 10047d4:	dc800315 	stw	r18,12(sp)
 10047d8:	dfc00a15 	stw	ra,40(sp)
 10047dc:	ddc00815 	stw	r23,32(sp)
 10047e0:	dd400615 	stw	r21,24(sp)
 10047e4:	dd000515 	stw	r20,20(sp)
 10047e8:	dcc00415 	stw	r19,16(sp)
 10047ec:	dc400215 	stw	r17,8(sp)
 10047f0:	dc000115 	stw	r16,4(sp)
 10047f4:	302d883a 	mov	r22,r6
 10047f8:	2039883a 	mov	fp,r4
 10047fc:	2825883a 	mov	r18,r5
 1004800:	10001c26 	beq	r2,zero,1004874 <__sfvwrite_r+0xb0>
 1004804:	29c0030b 	ldhu	r7,12(r5)
 1004808:	3880020c 	andi	r2,r7,8
 100480c:	10002726 	beq	r2,zero,10048ac <__sfvwrite_r+0xe8>
 1004810:	28800417 	ldw	r2,16(r5)
 1004814:	10002526 	beq	r2,zero,10048ac <__sfvwrite_r+0xe8>
 1004818:	3880008c 	andi	r2,r7,2
 100481c:	b5400017 	ldw	r21,0(r22)
 1004820:	10002826 	beq	r2,zero,10048c4 <__sfvwrite_r+0x100>
 1004824:	0021883a 	mov	r16,zero
 1004828:	0023883a 	mov	r17,zero
 100482c:	880d883a 	mov	r6,r17
 1004830:	e009883a 	mov	r4,fp
 1004834:	00810004 	movi	r2,1024
 1004838:	80006e26 	beq	r16,zero,10049f4 <__sfvwrite_r+0x230>
 100483c:	800f883a 	mov	r7,r16
 1004840:	91400717 	ldw	r5,28(r18)
 1004844:	1400012e 	bgeu	r2,r16,100484c <__sfvwrite_r+0x88>
 1004848:	100f883a 	mov	r7,r2
 100484c:	90c00917 	ldw	r3,36(r18)
 1004850:	183ee83a 	callr	r3
 1004854:	1007883a 	mov	r3,r2
 1004858:	80a1c83a 	sub	r16,r16,r2
 100485c:	88a3883a 	add	r17,r17,r2
 1004860:	00806d0e 	bge	zero,r2,1004a18 <__sfvwrite_r+0x254>
 1004864:	b0800217 	ldw	r2,8(r22)
 1004868:	10c5c83a 	sub	r2,r2,r3
 100486c:	b0800215 	stw	r2,8(r22)
 1004870:	103fee1e 	bne	r2,zero,100482c <__sfvwrite_r+0x68>
 1004874:	0009883a 	mov	r4,zero
 1004878:	2005883a 	mov	r2,r4
 100487c:	dfc00a17 	ldw	ra,40(sp)
 1004880:	df000917 	ldw	fp,36(sp)
 1004884:	ddc00817 	ldw	r23,32(sp)
 1004888:	dd800717 	ldw	r22,28(sp)
 100488c:	dd400617 	ldw	r21,24(sp)
 1004890:	dd000517 	ldw	r20,20(sp)
 1004894:	dcc00417 	ldw	r19,16(sp)
 1004898:	dc800317 	ldw	r18,12(sp)
 100489c:	dc400217 	ldw	r17,8(sp)
 10048a0:	dc000117 	ldw	r16,4(sp)
 10048a4:	dec00b04 	addi	sp,sp,44
 10048a8:	f800283a 	ret
 10048ac:	100258c0 	call	100258c <__swsetup_r>
 10048b0:	1000e41e 	bne	r2,zero,1004c44 <__sfvwrite_r+0x480>
 10048b4:	91c0030b 	ldhu	r7,12(r18)
 10048b8:	b5400017 	ldw	r21,0(r22)
 10048bc:	3880008c 	andi	r2,r7,2
 10048c0:	103fd81e 	bne	r2,zero,1004824 <__sfvwrite_r+0x60>
 10048c4:	3880004c 	andi	r2,r7,1
 10048c8:	1005003a 	cmpeq	r2,r2,zero
 10048cc:	10005726 	beq	r2,zero,1004a2c <__sfvwrite_r+0x268>
 10048d0:	0029883a 	mov	r20,zero
 10048d4:	002f883a 	mov	r23,zero
 10048d8:	a0004226 	beq	r20,zero,10049e4 <__sfvwrite_r+0x220>
 10048dc:	3880800c 	andi	r2,r7,512
 10048e0:	94000217 	ldw	r16,8(r18)
 10048e4:	10008b26 	beq	r2,zero,1004b14 <__sfvwrite_r+0x350>
 10048e8:	800d883a 	mov	r6,r16
 10048ec:	a400a536 	bltu	r20,r16,1004b84 <__sfvwrite_r+0x3c0>
 10048f0:	3881200c 	andi	r2,r7,1152
 10048f4:	10002726 	beq	r2,zero,1004994 <__sfvwrite_r+0x1d0>
 10048f8:	90800517 	ldw	r2,20(r18)
 10048fc:	92000417 	ldw	r8,16(r18)
 1004900:	91400017 	ldw	r5,0(r18)
 1004904:	1087883a 	add	r3,r2,r2
 1004908:	1887883a 	add	r3,r3,r2
 100490c:	1808d7fa 	srli	r4,r3,31
 1004910:	2a21c83a 	sub	r16,r5,r8
 1004914:	80800044 	addi	r2,r16,1
 1004918:	20c9883a 	add	r4,r4,r3
 100491c:	2027d07a 	srai	r19,r4,1
 1004920:	a085883a 	add	r2,r20,r2
 1004924:	980d883a 	mov	r6,r19
 1004928:	9880022e 	bgeu	r19,r2,1004934 <__sfvwrite_r+0x170>
 100492c:	1027883a 	mov	r19,r2
 1004930:	100d883a 	mov	r6,r2
 1004934:	3881000c 	andi	r2,r7,1024
 1004938:	1000b826 	beq	r2,zero,1004c1c <__sfvwrite_r+0x458>
 100493c:	300b883a 	mov	r5,r6
 1004940:	e009883a 	mov	r4,fp
 1004944:	10050380 	call	1005038 <_malloc_r>
 1004948:	10003126 	beq	r2,zero,1004a10 <__sfvwrite_r+0x24c>
 100494c:	91400417 	ldw	r5,16(r18)
 1004950:	1009883a 	mov	r4,r2
 1004954:	800d883a 	mov	r6,r16
 1004958:	1023883a 	mov	r17,r2
 100495c:	100585c0 	call	100585c <memcpy>
 1004960:	90c0030b 	ldhu	r3,12(r18)
 1004964:	00beffc4 	movi	r2,-1025
 1004968:	1886703a 	and	r3,r3,r2
 100496c:	18c02014 	ori	r3,r3,128
 1004970:	90c0030d 	sth	r3,12(r18)
 1004974:	9c07c83a 	sub	r3,r19,r16
 1004978:	8c05883a 	add	r2,r17,r16
 100497c:	a00d883a 	mov	r6,r20
 1004980:	a021883a 	mov	r16,r20
 1004984:	90800015 	stw	r2,0(r18)
 1004988:	90c00215 	stw	r3,8(r18)
 100498c:	94400415 	stw	r17,16(r18)
 1004990:	94c00515 	stw	r19,20(r18)
 1004994:	91000017 	ldw	r4,0(r18)
 1004998:	b80b883a 	mov	r5,r23
 100499c:	a023883a 	mov	r17,r20
 10049a0:	10058fc0 	call	10058fc <memmove>
 10049a4:	90c00217 	ldw	r3,8(r18)
 10049a8:	90800017 	ldw	r2,0(r18)
 10049ac:	a027883a 	mov	r19,r20
 10049b0:	1c07c83a 	sub	r3,r3,r16
 10049b4:	1405883a 	add	r2,r2,r16
 10049b8:	90c00215 	stw	r3,8(r18)
 10049bc:	a021883a 	mov	r16,r20
 10049c0:	90800015 	stw	r2,0(r18)
 10049c4:	b0800217 	ldw	r2,8(r22)
 10049c8:	1405c83a 	sub	r2,r2,r16
 10049cc:	b0800215 	stw	r2,8(r22)
 10049d0:	103fa826 	beq	r2,zero,1004874 <__sfvwrite_r+0xb0>
 10049d4:	a469c83a 	sub	r20,r20,r17
 10049d8:	91c0030b 	ldhu	r7,12(r18)
 10049dc:	bcef883a 	add	r23,r23,r19
 10049e0:	a03fbe1e 	bne	r20,zero,10048dc <__sfvwrite_r+0x118>
 10049e4:	adc00017 	ldw	r23,0(r21)
 10049e8:	ad000117 	ldw	r20,4(r21)
 10049ec:	ad400204 	addi	r21,r21,8
 10049f0:	003fb906 	br	10048d8 <__sfvwrite_r+0x114>
 10049f4:	ac400017 	ldw	r17,0(r21)
 10049f8:	ac000117 	ldw	r16,4(r21)
 10049fc:	ad400204 	addi	r21,r21,8
 1004a00:	003f8a06 	br	100482c <__sfvwrite_r+0x68>
 1004a04:	91400417 	ldw	r5,16(r18)
 1004a08:	e009883a 	mov	r4,fp
 1004a0c:	10044b00 	call	10044b0 <_free_r>
 1004a10:	00800304 	movi	r2,12
 1004a14:	e0800015 	stw	r2,0(fp)
 1004a18:	9080030b 	ldhu	r2,12(r18)
 1004a1c:	013fffc4 	movi	r4,-1
 1004a20:	10801014 	ori	r2,r2,64
 1004a24:	9080030d 	sth	r2,12(r18)
 1004a28:	003f9306 	br	1004878 <__sfvwrite_r+0xb4>
 1004a2c:	0027883a 	mov	r19,zero
 1004a30:	002f883a 	mov	r23,zero
 1004a34:	d8000015 	stw	zero,0(sp)
 1004a38:	0029883a 	mov	r20,zero
 1004a3c:	98001e26 	beq	r19,zero,1004ab8 <__sfvwrite_r+0x2f4>
 1004a40:	d8c00017 	ldw	r3,0(sp)
 1004a44:	1804c03a 	cmpne	r2,r3,zero
 1004a48:	10005e26 	beq	r2,zero,1004bc4 <__sfvwrite_r+0x400>
 1004a4c:	9821883a 	mov	r16,r19
 1004a50:	a4c0012e 	bgeu	r20,r19,1004a58 <__sfvwrite_r+0x294>
 1004a54:	a021883a 	mov	r16,r20
 1004a58:	91000017 	ldw	r4,0(r18)
 1004a5c:	90800417 	ldw	r2,16(r18)
 1004a60:	91800217 	ldw	r6,8(r18)
 1004a64:	91c00517 	ldw	r7,20(r18)
 1004a68:	1100022e 	bgeu	r2,r4,1004a74 <__sfvwrite_r+0x2b0>
 1004a6c:	31e3883a 	add	r17,r6,r7
 1004a70:	8c001616 	blt	r17,r16,1004acc <__sfvwrite_r+0x308>
 1004a74:	81c03816 	blt	r16,r7,1004b58 <__sfvwrite_r+0x394>
 1004a78:	90c00917 	ldw	r3,36(r18)
 1004a7c:	91400717 	ldw	r5,28(r18)
 1004a80:	e009883a 	mov	r4,fp
 1004a84:	b80d883a 	mov	r6,r23
 1004a88:	183ee83a 	callr	r3
 1004a8c:	1023883a 	mov	r17,r2
 1004a90:	00bfe10e 	bge	zero,r2,1004a18 <__sfvwrite_r+0x254>
 1004a94:	a469c83a 	sub	r20,r20,r17
 1004a98:	a0001826 	beq	r20,zero,1004afc <__sfvwrite_r+0x338>
 1004a9c:	b0800217 	ldw	r2,8(r22)
 1004aa0:	1445c83a 	sub	r2,r2,r17
 1004aa4:	b0800215 	stw	r2,8(r22)
 1004aa8:	103f7226 	beq	r2,zero,1004874 <__sfvwrite_r+0xb0>
 1004aac:	9c67c83a 	sub	r19,r19,r17
 1004ab0:	bc6f883a 	add	r23,r23,r17
 1004ab4:	983fe21e 	bne	r19,zero,1004a40 <__sfvwrite_r+0x27c>
 1004ab8:	adc00017 	ldw	r23,0(r21)
 1004abc:	acc00117 	ldw	r19,4(r21)
 1004ac0:	ad400204 	addi	r21,r21,8
 1004ac4:	d8000015 	stw	zero,0(sp)
 1004ac8:	003fdc06 	br	1004a3c <__sfvwrite_r+0x278>
 1004acc:	b80b883a 	mov	r5,r23
 1004ad0:	880d883a 	mov	r6,r17
 1004ad4:	10058fc0 	call	10058fc <memmove>
 1004ad8:	90c00017 	ldw	r3,0(r18)
 1004adc:	e009883a 	mov	r4,fp
 1004ae0:	900b883a 	mov	r5,r18
 1004ae4:	1c47883a 	add	r3,r3,r17
 1004ae8:	90c00015 	stw	r3,0(r18)
 1004aec:	1003e940 	call	1003e94 <_fflush_r>
 1004af0:	103fc91e 	bne	r2,zero,1004a18 <__sfvwrite_r+0x254>
 1004af4:	a469c83a 	sub	r20,r20,r17
 1004af8:	a03fe81e 	bne	r20,zero,1004a9c <__sfvwrite_r+0x2d8>
 1004afc:	e009883a 	mov	r4,fp
 1004b00:	900b883a 	mov	r5,r18
 1004b04:	1003e940 	call	1003e94 <_fflush_r>
 1004b08:	103fc31e 	bne	r2,zero,1004a18 <__sfvwrite_r+0x254>
 1004b0c:	d8000015 	stw	zero,0(sp)
 1004b10:	003fe206 	br	1004a9c <__sfvwrite_r+0x2d8>
 1004b14:	91000017 	ldw	r4,0(r18)
 1004b18:	90800417 	ldw	r2,16(r18)
 1004b1c:	1100022e 	bgeu	r2,r4,1004b28 <__sfvwrite_r+0x364>
 1004b20:	8023883a 	mov	r17,r16
 1004b24:	85003136 	bltu	r16,r20,1004bec <__sfvwrite_r+0x428>
 1004b28:	91c00517 	ldw	r7,20(r18)
 1004b2c:	a1c01836 	bltu	r20,r7,1004b90 <__sfvwrite_r+0x3cc>
 1004b30:	90c00917 	ldw	r3,36(r18)
 1004b34:	91400717 	ldw	r5,28(r18)
 1004b38:	e009883a 	mov	r4,fp
 1004b3c:	b80d883a 	mov	r6,r23
 1004b40:	183ee83a 	callr	r3
 1004b44:	1021883a 	mov	r16,r2
 1004b48:	00bfb30e 	bge	zero,r2,1004a18 <__sfvwrite_r+0x254>
 1004b4c:	1023883a 	mov	r17,r2
 1004b50:	1027883a 	mov	r19,r2
 1004b54:	003f9b06 	br	10049c4 <__sfvwrite_r+0x200>
 1004b58:	b80b883a 	mov	r5,r23
 1004b5c:	800d883a 	mov	r6,r16
 1004b60:	10058fc0 	call	10058fc <memmove>
 1004b64:	90c00217 	ldw	r3,8(r18)
 1004b68:	90800017 	ldw	r2,0(r18)
 1004b6c:	8023883a 	mov	r17,r16
 1004b70:	1c07c83a 	sub	r3,r3,r16
 1004b74:	1405883a 	add	r2,r2,r16
 1004b78:	90c00215 	stw	r3,8(r18)
 1004b7c:	90800015 	stw	r2,0(r18)
 1004b80:	003fc406 	br	1004a94 <__sfvwrite_r+0x2d0>
 1004b84:	a00d883a 	mov	r6,r20
 1004b88:	a021883a 	mov	r16,r20
 1004b8c:	003f8106 	br	1004994 <__sfvwrite_r+0x1d0>
 1004b90:	b80b883a 	mov	r5,r23
 1004b94:	a00d883a 	mov	r6,r20
 1004b98:	10058fc0 	call	10058fc <memmove>
 1004b9c:	90c00217 	ldw	r3,8(r18)
 1004ba0:	90800017 	ldw	r2,0(r18)
 1004ba4:	a021883a 	mov	r16,r20
 1004ba8:	1d07c83a 	sub	r3,r3,r20
 1004bac:	1505883a 	add	r2,r2,r20
 1004bb0:	a023883a 	mov	r17,r20
 1004bb4:	a027883a 	mov	r19,r20
 1004bb8:	90c00215 	stw	r3,8(r18)
 1004bbc:	90800015 	stw	r2,0(r18)
 1004bc0:	003f8006 	br	10049c4 <__sfvwrite_r+0x200>
 1004bc4:	b809883a 	mov	r4,r23
 1004bc8:	01400284 	movi	r5,10
 1004bcc:	980d883a 	mov	r6,r19
 1004bd0:	10057780 	call	1005778 <memchr>
 1004bd4:	10001726 	beq	r2,zero,1004c34 <__sfvwrite_r+0x470>
 1004bd8:	15c5c83a 	sub	r2,r2,r23
 1004bdc:	15000044 	addi	r20,r2,1
 1004be0:	00800044 	movi	r2,1
 1004be4:	d8800015 	stw	r2,0(sp)
 1004be8:	003f9806 	br	1004a4c <__sfvwrite_r+0x288>
 1004bec:	b80b883a 	mov	r5,r23
 1004bf0:	800d883a 	mov	r6,r16
 1004bf4:	10058fc0 	call	10058fc <memmove>
 1004bf8:	90c00017 	ldw	r3,0(r18)
 1004bfc:	e009883a 	mov	r4,fp
 1004c00:	900b883a 	mov	r5,r18
 1004c04:	1c07883a 	add	r3,r3,r16
 1004c08:	90c00015 	stw	r3,0(r18)
 1004c0c:	8027883a 	mov	r19,r16
 1004c10:	1003e940 	call	1003e94 <_fflush_r>
 1004c14:	103f6b26 	beq	r2,zero,10049c4 <__sfvwrite_r+0x200>
 1004c18:	003f7f06 	br	1004a18 <__sfvwrite_r+0x254>
 1004c1c:	400b883a 	mov	r5,r8
 1004c20:	e009883a 	mov	r4,fp
 1004c24:	1006a680 	call	1006a68 <_realloc_r>
 1004c28:	103f7626 	beq	r2,zero,1004a04 <__sfvwrite_r+0x240>
 1004c2c:	1023883a 	mov	r17,r2
 1004c30:	003f5006 	br	1004974 <__sfvwrite_r+0x1b0>
 1004c34:	00c00044 	movi	r3,1
 1004c38:	9d000044 	addi	r20,r19,1
 1004c3c:	d8c00015 	stw	r3,0(sp)
 1004c40:	003f8206 	br	1004a4c <__sfvwrite_r+0x288>
 1004c44:	9080030b 	ldhu	r2,12(r18)
 1004c48:	00c00244 	movi	r3,9
 1004c4c:	013fffc4 	movi	r4,-1
 1004c50:	10801014 	ori	r2,r2,64
 1004c54:	9080030d 	sth	r2,12(r18)
 1004c58:	e0c00015 	stw	r3,0(fp)
 1004c5c:	003f0606 	br	1004878 <__sfvwrite_r+0xb4>

01004c60 <_fwalk_reent>:
 1004c60:	defff704 	addi	sp,sp,-36
 1004c64:	dcc00315 	stw	r19,12(sp)
 1004c68:	24c0b804 	addi	r19,r4,736
 1004c6c:	dd800615 	stw	r22,24(sp)
 1004c70:	dd400515 	stw	r21,20(sp)
 1004c74:	dfc00815 	stw	ra,32(sp)
 1004c78:	ddc00715 	stw	r23,28(sp)
 1004c7c:	dd000415 	stw	r20,16(sp)
 1004c80:	dc800215 	stw	r18,8(sp)
 1004c84:	dc400115 	stw	r17,4(sp)
 1004c88:	dc000015 	stw	r16,0(sp)
 1004c8c:	202b883a 	mov	r21,r4
 1004c90:	282d883a 	mov	r22,r5
 1004c94:	100411c0 	call	100411c <__sfp_lock_acquire>
 1004c98:	98002126 	beq	r19,zero,1004d20 <_fwalk_reent+0xc0>
 1004c9c:	002f883a 	mov	r23,zero
 1004ca0:	9c800117 	ldw	r18,4(r19)
 1004ca4:	9c000217 	ldw	r16,8(r19)
 1004ca8:	90bfffc4 	addi	r2,r18,-1
 1004cac:	10000d16 	blt	r2,zero,1004ce4 <_fwalk_reent+0x84>
 1004cb0:	0023883a 	mov	r17,zero
 1004cb4:	053fffc4 	movi	r20,-1
 1004cb8:	8080030f 	ldh	r2,12(r16)
 1004cbc:	8c400044 	addi	r17,r17,1
 1004cc0:	10000626 	beq	r2,zero,1004cdc <_fwalk_reent+0x7c>
 1004cc4:	8080038f 	ldh	r2,14(r16)
 1004cc8:	800b883a 	mov	r5,r16
 1004ccc:	a809883a 	mov	r4,r21
 1004cd0:	15000226 	beq	r2,r20,1004cdc <_fwalk_reent+0x7c>
 1004cd4:	b03ee83a 	callr	r22
 1004cd8:	b8aeb03a 	or	r23,r23,r2
 1004cdc:	84001704 	addi	r16,r16,92
 1004ce0:	947ff51e 	bne	r18,r17,1004cb8 <_fwalk_reent+0x58>
 1004ce4:	9cc00017 	ldw	r19,0(r19)
 1004ce8:	983fed1e 	bne	r19,zero,1004ca0 <_fwalk_reent+0x40>
 1004cec:	10041200 	call	1004120 <__sfp_lock_release>
 1004cf0:	b805883a 	mov	r2,r23
 1004cf4:	dfc00817 	ldw	ra,32(sp)
 1004cf8:	ddc00717 	ldw	r23,28(sp)
 1004cfc:	dd800617 	ldw	r22,24(sp)
 1004d00:	dd400517 	ldw	r21,20(sp)
 1004d04:	dd000417 	ldw	r20,16(sp)
 1004d08:	dcc00317 	ldw	r19,12(sp)
 1004d0c:	dc800217 	ldw	r18,8(sp)
 1004d10:	dc400117 	ldw	r17,4(sp)
 1004d14:	dc000017 	ldw	r16,0(sp)
 1004d18:	dec00904 	addi	sp,sp,36
 1004d1c:	f800283a 	ret
 1004d20:	002f883a 	mov	r23,zero
 1004d24:	003ff106 	br	1004cec <_fwalk_reent+0x8c>

01004d28 <_fwalk>:
 1004d28:	defff804 	addi	sp,sp,-32
 1004d2c:	dcc00315 	stw	r19,12(sp)
 1004d30:	24c0b804 	addi	r19,r4,736
 1004d34:	dd400515 	stw	r21,20(sp)
 1004d38:	dfc00715 	stw	ra,28(sp)
 1004d3c:	dd800615 	stw	r22,24(sp)
 1004d40:	dd000415 	stw	r20,16(sp)
 1004d44:	dc800215 	stw	r18,8(sp)
 1004d48:	dc400115 	stw	r17,4(sp)
 1004d4c:	dc000015 	stw	r16,0(sp)
 1004d50:	282b883a 	mov	r21,r5
 1004d54:	100411c0 	call	100411c <__sfp_lock_acquire>
 1004d58:	98001f26 	beq	r19,zero,1004dd8 <_fwalk+0xb0>
 1004d5c:	002d883a 	mov	r22,zero
 1004d60:	9c800117 	ldw	r18,4(r19)
 1004d64:	9c000217 	ldw	r16,8(r19)
 1004d68:	90bfffc4 	addi	r2,r18,-1
 1004d6c:	10000c16 	blt	r2,zero,1004da0 <_fwalk+0x78>
 1004d70:	0023883a 	mov	r17,zero
 1004d74:	053fffc4 	movi	r20,-1
 1004d78:	8080030f 	ldh	r2,12(r16)
 1004d7c:	8c400044 	addi	r17,r17,1
 1004d80:	10000526 	beq	r2,zero,1004d98 <_fwalk+0x70>
 1004d84:	8080038f 	ldh	r2,14(r16)
 1004d88:	8009883a 	mov	r4,r16
 1004d8c:	15000226 	beq	r2,r20,1004d98 <_fwalk+0x70>
 1004d90:	a83ee83a 	callr	r21
 1004d94:	b0acb03a 	or	r22,r22,r2
 1004d98:	84001704 	addi	r16,r16,92
 1004d9c:	947ff61e 	bne	r18,r17,1004d78 <_fwalk+0x50>
 1004da0:	9cc00017 	ldw	r19,0(r19)
 1004da4:	983fee1e 	bne	r19,zero,1004d60 <_fwalk+0x38>
 1004da8:	10041200 	call	1004120 <__sfp_lock_release>
 1004dac:	b005883a 	mov	r2,r22
 1004db0:	dfc00717 	ldw	ra,28(sp)
 1004db4:	dd800617 	ldw	r22,24(sp)
 1004db8:	dd400517 	ldw	r21,20(sp)
 1004dbc:	dd000417 	ldw	r20,16(sp)
 1004dc0:	dcc00317 	ldw	r19,12(sp)
 1004dc4:	dc800217 	ldw	r18,8(sp)
 1004dc8:	dc400117 	ldw	r17,4(sp)
 1004dcc:	dc000017 	ldw	r16,0(sp)
 1004dd0:	dec00804 	addi	sp,sp,32
 1004dd4:	f800283a 	ret
 1004dd8:	002d883a 	mov	r22,zero
 1004ddc:	003ff206 	br	1004da8 <_fwalk+0x80>

01004de0 <__locale_charset>:
 1004de0:	d0a00317 	ldw	r2,-32756(gp)
 1004de4:	f800283a 	ret

01004de8 <_localeconv_r>:
 1004de8:	00804074 	movhi	r2,257
 1004dec:	10b32604 	addi	r2,r2,-13160
 1004df0:	f800283a 	ret

01004df4 <localeconv>:
 1004df4:	00804074 	movhi	r2,257
 1004df8:	10ba8204 	addi	r2,r2,-5624
 1004dfc:	11000017 	ldw	r4,0(r2)
 1004e00:	1004de81 	jmpi	1004de8 <_localeconv_r>

01004e04 <_setlocale_r>:
 1004e04:	defffc04 	addi	sp,sp,-16
 1004e08:	00c04074 	movhi	r3,257
 1004e0c:	18f32104 	addi	r3,r3,-13180
 1004e10:	dc800215 	stw	r18,8(sp)
 1004e14:	dc400115 	stw	r17,4(sp)
 1004e18:	dc000015 	stw	r16,0(sp)
 1004e1c:	2023883a 	mov	r17,r4
 1004e20:	2825883a 	mov	r18,r5
 1004e24:	dfc00315 	stw	ra,12(sp)
 1004e28:	3021883a 	mov	r16,r6
 1004e2c:	3009883a 	mov	r4,r6
 1004e30:	180b883a 	mov	r5,r3
 1004e34:	30000926 	beq	r6,zero,1004e5c <_setlocale_r+0x58>
 1004e38:	10072880 	call	1007288 <strcmp>
 1004e3c:	8009883a 	mov	r4,r16
 1004e40:	01404074 	movhi	r5,257
 1004e44:	29730c04 	addi	r5,r5,-13264
 1004e48:	10000b1e 	bne	r2,zero,1004e78 <_setlocale_r+0x74>
 1004e4c:	8c000d15 	stw	r16,52(r17)
 1004e50:	8c800c15 	stw	r18,48(r17)
 1004e54:	00c04074 	movhi	r3,257
 1004e58:	18f32104 	addi	r3,r3,-13180
 1004e5c:	1805883a 	mov	r2,r3
 1004e60:	dfc00317 	ldw	ra,12(sp)
 1004e64:	dc800217 	ldw	r18,8(sp)
 1004e68:	dc400117 	ldw	r17,4(sp)
 1004e6c:	dc000017 	ldw	r16,0(sp)
 1004e70:	dec00404 	addi	sp,sp,16
 1004e74:	f800283a 	ret
 1004e78:	10072880 	call	1007288 <strcmp>
 1004e7c:	0007883a 	mov	r3,zero
 1004e80:	103ff226 	beq	r2,zero,1004e4c <_setlocale_r+0x48>
 1004e84:	003ff506 	br	1004e5c <_setlocale_r+0x58>

01004e88 <setlocale>:
 1004e88:	01804074 	movhi	r6,257
 1004e8c:	31ba8204 	addi	r6,r6,-5624
 1004e90:	2007883a 	mov	r3,r4
 1004e94:	31000017 	ldw	r4,0(r6)
 1004e98:	280d883a 	mov	r6,r5
 1004e9c:	180b883a 	mov	r5,r3
 1004ea0:	1004e041 	jmpi	1004e04 <_setlocale_r>

01004ea4 <__smakebuf_r>:
 1004ea4:	2880030b 	ldhu	r2,12(r5)
 1004ea8:	deffed04 	addi	sp,sp,-76
 1004eac:	dc401015 	stw	r17,64(sp)
 1004eb0:	1080008c 	andi	r2,r2,2
 1004eb4:	dc000f15 	stw	r16,60(sp)
 1004eb8:	dfc01215 	stw	ra,72(sp)
 1004ebc:	dc801115 	stw	r18,68(sp)
 1004ec0:	2821883a 	mov	r16,r5
 1004ec4:	2023883a 	mov	r17,r4
 1004ec8:	10000b26 	beq	r2,zero,1004ef8 <__smakebuf_r+0x54>
 1004ecc:	28c010c4 	addi	r3,r5,67
 1004ed0:	00800044 	movi	r2,1
 1004ed4:	28800515 	stw	r2,20(r5)
 1004ed8:	28c00415 	stw	r3,16(r5)
 1004edc:	28c00015 	stw	r3,0(r5)
 1004ee0:	dfc01217 	ldw	ra,72(sp)
 1004ee4:	dc801117 	ldw	r18,68(sp)
 1004ee8:	dc401017 	ldw	r17,64(sp)
 1004eec:	dc000f17 	ldw	r16,60(sp)
 1004ef0:	dec01304 	addi	sp,sp,76
 1004ef4:	f800283a 	ret
 1004ef8:	2940038f 	ldh	r5,14(r5)
 1004efc:	28002116 	blt	r5,zero,1004f84 <__smakebuf_r+0xe0>
 1004f00:	d80d883a 	mov	r6,sp
 1004f04:	10076040 	call	1007604 <_fstat_r>
 1004f08:	10001e16 	blt	r2,zero,1004f84 <__smakebuf_r+0xe0>
 1004f0c:	d8800117 	ldw	r2,4(sp)
 1004f10:	00e00014 	movui	r3,32768
 1004f14:	113c000c 	andi	r4,r2,61440
 1004f18:	20c03126 	beq	r4,r3,1004fe0 <__smakebuf_r+0x13c>
 1004f1c:	8080030b 	ldhu	r2,12(r16)
 1004f20:	00c80004 	movi	r3,8192
 1004f24:	10820014 	ori	r2,r2,2048
 1004f28:	8080030d 	sth	r2,12(r16)
 1004f2c:	20c01e26 	beq	r4,r3,1004fa8 <__smakebuf_r+0x104>
 1004f30:	04810004 	movi	r18,1024
 1004f34:	8809883a 	mov	r4,r17
 1004f38:	900b883a 	mov	r5,r18
 1004f3c:	10050380 	call	1005038 <_malloc_r>
 1004f40:	1009883a 	mov	r4,r2
 1004f44:	10003126 	beq	r2,zero,100500c <__smakebuf_r+0x168>
 1004f48:	80c0030b 	ldhu	r3,12(r16)
 1004f4c:	00804034 	movhi	r2,256
 1004f50:	10908404 	addi	r2,r2,16912
 1004f54:	88800f15 	stw	r2,60(r17)
 1004f58:	18c02014 	ori	r3,r3,128
 1004f5c:	84800515 	stw	r18,20(r16)
 1004f60:	80c0030d 	sth	r3,12(r16)
 1004f64:	81000415 	stw	r4,16(r16)
 1004f68:	81000015 	stw	r4,0(r16)
 1004f6c:	dfc01217 	ldw	ra,72(sp)
 1004f70:	dc801117 	ldw	r18,68(sp)
 1004f74:	dc401017 	ldw	r17,64(sp)
 1004f78:	dc000f17 	ldw	r16,60(sp)
 1004f7c:	dec01304 	addi	sp,sp,76
 1004f80:	f800283a 	ret
 1004f84:	80c0030b 	ldhu	r3,12(r16)
 1004f88:	1880200c 	andi	r2,r3,128
 1004f8c:	10000426 	beq	r2,zero,1004fa0 <__smakebuf_r+0xfc>
 1004f90:	04801004 	movi	r18,64
 1004f94:	18820014 	ori	r2,r3,2048
 1004f98:	8080030d 	sth	r2,12(r16)
 1004f9c:	003fe506 	br	1004f34 <__smakebuf_r+0x90>
 1004fa0:	04810004 	movi	r18,1024
 1004fa4:	003ffb06 	br	1004f94 <__smakebuf_r+0xf0>
 1004fa8:	8140038f 	ldh	r5,14(r16)
 1004fac:	8809883a 	mov	r4,r17
 1004fb0:	10076780 	call	1007678 <_isatty_r>
 1004fb4:	103fde26 	beq	r2,zero,1004f30 <__smakebuf_r+0x8c>
 1004fb8:	8080030b 	ldhu	r2,12(r16)
 1004fbc:	80c010c4 	addi	r3,r16,67
 1004fc0:	04810004 	movi	r18,1024
 1004fc4:	10800054 	ori	r2,r2,1
 1004fc8:	8080030d 	sth	r2,12(r16)
 1004fcc:	00800044 	movi	r2,1
 1004fd0:	80c00415 	stw	r3,16(r16)
 1004fd4:	80800515 	stw	r2,20(r16)
 1004fd8:	80c00015 	stw	r3,0(r16)
 1004fdc:	003fd506 	br	1004f34 <__smakebuf_r+0x90>
 1004fe0:	80c00a17 	ldw	r3,40(r16)
 1004fe4:	00804034 	movhi	r2,256
 1004fe8:	109c5104 	addi	r2,r2,28996
 1004fec:	18bfcb1e 	bne	r3,r2,1004f1c <__smakebuf_r+0x78>
 1004ff0:	8080030b 	ldhu	r2,12(r16)
 1004ff4:	00c10004 	movi	r3,1024
 1004ff8:	1825883a 	mov	r18,r3
 1004ffc:	10c4b03a 	or	r2,r2,r3
 1005000:	8080030d 	sth	r2,12(r16)
 1005004:	80c01315 	stw	r3,76(r16)
 1005008:	003fca06 	br	1004f34 <__smakebuf_r+0x90>
 100500c:	8100030b 	ldhu	r4,12(r16)
 1005010:	2080800c 	andi	r2,r4,512
 1005014:	103fb21e 	bne	r2,zero,1004ee0 <__smakebuf_r+0x3c>
 1005018:	80c010c4 	addi	r3,r16,67
 100501c:	21000094 	ori	r4,r4,2
 1005020:	00800044 	movi	r2,1
 1005024:	80800515 	stw	r2,20(r16)
 1005028:	8100030d 	sth	r4,12(r16)
 100502c:	80c00415 	stw	r3,16(r16)
 1005030:	80c00015 	stw	r3,0(r16)
 1005034:	003faa06 	br	1004ee0 <__smakebuf_r+0x3c>

01005038 <_malloc_r>:
 1005038:	defff604 	addi	sp,sp,-40
 100503c:	28c002c4 	addi	r3,r5,11
 1005040:	00800584 	movi	r2,22
 1005044:	dc800215 	stw	r18,8(sp)
 1005048:	dfc00915 	stw	ra,36(sp)
 100504c:	df000815 	stw	fp,32(sp)
 1005050:	ddc00715 	stw	r23,28(sp)
 1005054:	dd800615 	stw	r22,24(sp)
 1005058:	dd400515 	stw	r21,20(sp)
 100505c:	dd000415 	stw	r20,16(sp)
 1005060:	dcc00315 	stw	r19,12(sp)
 1005064:	dc400115 	stw	r17,4(sp)
 1005068:	dc000015 	stw	r16,0(sp)
 100506c:	2025883a 	mov	r18,r4
 1005070:	10c01236 	bltu	r2,r3,10050bc <_malloc_r+0x84>
 1005074:	04400404 	movi	r17,16
 1005078:	8940142e 	bgeu	r17,r5,10050cc <_malloc_r+0x94>
 100507c:	00800304 	movi	r2,12
 1005080:	0007883a 	mov	r3,zero
 1005084:	90800015 	stw	r2,0(r18)
 1005088:	1805883a 	mov	r2,r3
 100508c:	dfc00917 	ldw	ra,36(sp)
 1005090:	df000817 	ldw	fp,32(sp)
 1005094:	ddc00717 	ldw	r23,28(sp)
 1005098:	dd800617 	ldw	r22,24(sp)
 100509c:	dd400517 	ldw	r21,20(sp)
 10050a0:	dd000417 	ldw	r20,16(sp)
 10050a4:	dcc00317 	ldw	r19,12(sp)
 10050a8:	dc800217 	ldw	r18,8(sp)
 10050ac:	dc400117 	ldw	r17,4(sp)
 10050b0:	dc000017 	ldw	r16,0(sp)
 10050b4:	dec00a04 	addi	sp,sp,40
 10050b8:	f800283a 	ret
 10050bc:	00bffe04 	movi	r2,-8
 10050c0:	18a2703a 	and	r17,r3,r2
 10050c4:	883fed16 	blt	r17,zero,100507c <_malloc_r+0x44>
 10050c8:	897fec36 	bltu	r17,r5,100507c <_malloc_r+0x44>
 10050cc:	9009883a 	mov	r4,r18
 10050d0:	100a28c0 	call	100a28c <__malloc_lock>
 10050d4:	00807dc4 	movi	r2,503
 10050d8:	14402b2e 	bgeu	r2,r17,1005188 <_malloc_r+0x150>
 10050dc:	8806d27a 	srli	r3,r17,9
 10050e0:	18003f1e 	bne	r3,zero,10051e0 <_malloc_r+0x1a8>
 10050e4:	880cd0fa 	srli	r6,r17,3
 10050e8:	300490fa 	slli	r2,r6,3
 10050ec:	02c04074 	movhi	r11,257
 10050f0:	5af4dc04 	addi	r11,r11,-11408
 10050f4:	12cb883a 	add	r5,r2,r11
 10050f8:	2c000317 	ldw	r16,12(r5)
 10050fc:	580f883a 	mov	r7,r11
 1005100:	2c00041e 	bne	r5,r16,1005114 <_malloc_r+0xdc>
 1005104:	00000a06 	br	1005130 <_malloc_r+0xf8>
 1005108:	1800860e 	bge	r3,zero,1005324 <_malloc_r+0x2ec>
 100510c:	84000317 	ldw	r16,12(r16)
 1005110:	2c000726 	beq	r5,r16,1005130 <_malloc_r+0xf8>
 1005114:	80800117 	ldw	r2,4(r16)
 1005118:	00ffff04 	movi	r3,-4
 100511c:	10c8703a 	and	r4,r2,r3
 1005120:	2447c83a 	sub	r3,r4,r17
 1005124:	008003c4 	movi	r2,15
 1005128:	10fff70e 	bge	r2,r3,1005108 <_malloc_r+0xd0>
 100512c:	31bfffc4 	addi	r6,r6,-1
 1005130:	32400044 	addi	r9,r6,1
 1005134:	02804074 	movhi	r10,257
 1005138:	52b4de04 	addi	r10,r10,-11400
 100513c:	54000217 	ldw	r16,8(r10)
 1005140:	8280a026 	beq	r16,r10,10053c4 <_malloc_r+0x38c>
 1005144:	80800117 	ldw	r2,4(r16)
 1005148:	00ffff04 	movi	r3,-4
 100514c:	10ca703a 	and	r5,r2,r3
 1005150:	2c4dc83a 	sub	r6,r5,r17
 1005154:	008003c4 	movi	r2,15
 1005158:	11808316 	blt	r2,r6,1005368 <_malloc_r+0x330>
 100515c:	52800315 	stw	r10,12(r10)
 1005160:	52800215 	stw	r10,8(r10)
 1005164:	30002916 	blt	r6,zero,100520c <_malloc_r+0x1d4>
 1005168:	8147883a 	add	r3,r16,r5
 100516c:	18800117 	ldw	r2,4(r3)
 1005170:	9009883a 	mov	r4,r18
 1005174:	10800054 	ori	r2,r2,1
 1005178:	18800115 	stw	r2,4(r3)
 100517c:	100a2ac0 	call	100a2ac <__malloc_unlock>
 1005180:	80c00204 	addi	r3,r16,8
 1005184:	003fc006 	br	1005088 <_malloc_r+0x50>
 1005188:	02c04074 	movhi	r11,257
 100518c:	5af4dc04 	addi	r11,r11,-11408
 1005190:	8ac5883a 	add	r2,r17,r11
 1005194:	14000317 	ldw	r16,12(r2)
 1005198:	580f883a 	mov	r7,r11
 100519c:	8806d0fa 	srli	r3,r17,3
 10051a0:	14006c26 	beq	r2,r16,1005354 <_malloc_r+0x31c>
 10051a4:	80c00117 	ldw	r3,4(r16)
 10051a8:	00bfff04 	movi	r2,-4
 10051ac:	81800317 	ldw	r6,12(r16)
 10051b0:	1886703a 	and	r3,r3,r2
 10051b4:	80c7883a 	add	r3,r16,r3
 10051b8:	18800117 	ldw	r2,4(r3)
 10051bc:	81400217 	ldw	r5,8(r16)
 10051c0:	9009883a 	mov	r4,r18
 10051c4:	10800054 	ori	r2,r2,1
 10051c8:	18800115 	stw	r2,4(r3)
 10051cc:	31400215 	stw	r5,8(r6)
 10051d0:	29800315 	stw	r6,12(r5)
 10051d4:	100a2ac0 	call	100a2ac <__malloc_unlock>
 10051d8:	80c00204 	addi	r3,r16,8
 10051dc:	003faa06 	br	1005088 <_malloc_r+0x50>
 10051e0:	00800104 	movi	r2,4
 10051e4:	10c0052e 	bgeu	r2,r3,10051fc <_malloc_r+0x1c4>
 10051e8:	00800504 	movi	r2,20
 10051ec:	10c07836 	bltu	r2,r3,10053d0 <_malloc_r+0x398>
 10051f0:	198016c4 	addi	r6,r3,91
 10051f4:	300490fa 	slli	r2,r6,3
 10051f8:	003fbc06 	br	10050ec <_malloc_r+0xb4>
 10051fc:	8804d1ba 	srli	r2,r17,6
 1005200:	11800e04 	addi	r6,r2,56
 1005204:	300490fa 	slli	r2,r6,3
 1005208:	003fb806 	br	10050ec <_malloc_r+0xb4>
 100520c:	00807fc4 	movi	r2,511
 1005210:	1140bb36 	bltu	r2,r5,1005500 <_malloc_r+0x4c8>
 1005214:	2806d0fa 	srli	r3,r5,3
 1005218:	573ffe04 	addi	fp,r10,-8
 100521c:	00800044 	movi	r2,1
 1005220:	180890fa 	slli	r4,r3,3
 1005224:	1807d0ba 	srai	r3,r3,2
 1005228:	e1c00117 	ldw	r7,4(fp)
 100522c:	5909883a 	add	r4,r11,r4
 1005230:	21400217 	ldw	r5,8(r4)
 1005234:	10c4983a 	sll	r2,r2,r3
 1005238:	81000315 	stw	r4,12(r16)
 100523c:	81400215 	stw	r5,8(r16)
 1005240:	388eb03a 	or	r7,r7,r2
 1005244:	2c000315 	stw	r16,12(r5)
 1005248:	24000215 	stw	r16,8(r4)
 100524c:	e1c00115 	stw	r7,4(fp)
 1005250:	4807883a 	mov	r3,r9
 1005254:	4800cd16 	blt	r9,zero,100558c <_malloc_r+0x554>
 1005258:	1807d0ba 	srai	r3,r3,2
 100525c:	00800044 	movi	r2,1
 1005260:	10c8983a 	sll	r4,r2,r3
 1005264:	39004436 	bltu	r7,r4,1005378 <_malloc_r+0x340>
 1005268:	21c4703a 	and	r2,r4,r7
 100526c:	10000a1e 	bne	r2,zero,1005298 <_malloc_r+0x260>
 1005270:	2109883a 	add	r4,r4,r4
 1005274:	00bfff04 	movi	r2,-4
 1005278:	4884703a 	and	r2,r9,r2
 100527c:	3906703a 	and	r3,r7,r4
 1005280:	12400104 	addi	r9,r2,4
 1005284:	1800041e 	bne	r3,zero,1005298 <_malloc_r+0x260>
 1005288:	2109883a 	add	r4,r4,r4
 100528c:	3904703a 	and	r2,r7,r4
 1005290:	4a400104 	addi	r9,r9,4
 1005294:	103ffc26 	beq	r2,zero,1005288 <_malloc_r+0x250>
 1005298:	480490fa 	slli	r2,r9,3
 100529c:	4819883a 	mov	r12,r9
 10052a0:	023fff04 	movi	r8,-4
 10052a4:	589b883a 	add	r13,r11,r2
 10052a8:	6807883a 	mov	r3,r13
 10052ac:	014003c4 	movi	r5,15
 10052b0:	1c000317 	ldw	r16,12(r3)
 10052b4:	1c00041e 	bne	r3,r16,10052c8 <_malloc_r+0x290>
 10052b8:	0000a706 	br	1005558 <_malloc_r+0x520>
 10052bc:	3000ab0e 	bge	r6,zero,100556c <_malloc_r+0x534>
 10052c0:	84000317 	ldw	r16,12(r16)
 10052c4:	1c00a426 	beq	r3,r16,1005558 <_malloc_r+0x520>
 10052c8:	80800117 	ldw	r2,4(r16)
 10052cc:	1204703a 	and	r2,r2,r8
 10052d0:	144dc83a 	sub	r6,r2,r17
 10052d4:	29bff90e 	bge	r5,r6,10052bc <_malloc_r+0x284>
 10052d8:	81000317 	ldw	r4,12(r16)
 10052dc:	80c00217 	ldw	r3,8(r16)
 10052e0:	89400054 	ori	r5,r17,1
 10052e4:	8445883a 	add	r2,r16,r17
 10052e8:	20c00215 	stw	r3,8(r4)
 10052ec:	19000315 	stw	r4,12(r3)
 10052f0:	81400115 	stw	r5,4(r16)
 10052f4:	1187883a 	add	r3,r2,r6
 10052f8:	31000054 	ori	r4,r6,1
 10052fc:	50800315 	stw	r2,12(r10)
 1005300:	50800215 	stw	r2,8(r10)
 1005304:	19800015 	stw	r6,0(r3)
 1005308:	11000115 	stw	r4,4(r2)
 100530c:	12800215 	stw	r10,8(r2)
 1005310:	12800315 	stw	r10,12(r2)
 1005314:	9009883a 	mov	r4,r18
 1005318:	100a2ac0 	call	100a2ac <__malloc_unlock>
 100531c:	80c00204 	addi	r3,r16,8
 1005320:	003f5906 	br	1005088 <_malloc_r+0x50>
 1005324:	8109883a 	add	r4,r16,r4
 1005328:	20800117 	ldw	r2,4(r4)
 100532c:	80c00217 	ldw	r3,8(r16)
 1005330:	81400317 	ldw	r5,12(r16)
 1005334:	10800054 	ori	r2,r2,1
 1005338:	20800115 	stw	r2,4(r4)
 100533c:	28c00215 	stw	r3,8(r5)
 1005340:	19400315 	stw	r5,12(r3)
 1005344:	9009883a 	mov	r4,r18
 1005348:	100a2ac0 	call	100a2ac <__malloc_unlock>
 100534c:	80c00204 	addi	r3,r16,8
 1005350:	003f4d06 	br	1005088 <_malloc_r+0x50>
 1005354:	80800204 	addi	r2,r16,8
 1005358:	14000317 	ldw	r16,12(r2)
 100535c:	143f911e 	bne	r2,r16,10051a4 <_malloc_r+0x16c>
 1005360:	1a400084 	addi	r9,r3,2
 1005364:	003f7306 	br	1005134 <_malloc_r+0xfc>
 1005368:	88c00054 	ori	r3,r17,1
 100536c:	8445883a 	add	r2,r16,r17
 1005370:	80c00115 	stw	r3,4(r16)
 1005374:	003fdf06 	br	10052f4 <_malloc_r+0x2bc>
 1005378:	e4000217 	ldw	r16,8(fp)
 100537c:	00bfff04 	movi	r2,-4
 1005380:	80c00117 	ldw	r3,4(r16)
 1005384:	802d883a 	mov	r22,r16
 1005388:	18aa703a 	and	r21,r3,r2
 100538c:	ac401636 	bltu	r21,r17,10053e8 <_malloc_r+0x3b0>
 1005390:	ac49c83a 	sub	r4,r21,r17
 1005394:	008003c4 	movi	r2,15
 1005398:	1100130e 	bge	r2,r4,10053e8 <_malloc_r+0x3b0>
 100539c:	88800054 	ori	r2,r17,1
 10053a0:	8447883a 	add	r3,r16,r17
 10053a4:	80800115 	stw	r2,4(r16)
 10053a8:	20800054 	ori	r2,r4,1
 10053ac:	18800115 	stw	r2,4(r3)
 10053b0:	e0c00215 	stw	r3,8(fp)
 10053b4:	9009883a 	mov	r4,r18
 10053b8:	100a2ac0 	call	100a2ac <__malloc_unlock>
 10053bc:	80c00204 	addi	r3,r16,8
 10053c0:	003f3106 	br	1005088 <_malloc_r+0x50>
 10053c4:	39c00117 	ldw	r7,4(r7)
 10053c8:	573ffe04 	addi	fp,r10,-8
 10053cc:	003fa006 	br	1005250 <_malloc_r+0x218>
 10053d0:	00801504 	movi	r2,84
 10053d4:	10c06736 	bltu	r2,r3,1005574 <_malloc_r+0x53c>
 10053d8:	8804d33a 	srli	r2,r17,12
 10053dc:	11801b84 	addi	r6,r2,110
 10053e0:	300490fa 	slli	r2,r6,3
 10053e4:	003f4106 	br	10050ec <_malloc_r+0xb4>
 10053e8:	d0a6cc17 	ldw	r2,-25808(gp)
 10053ec:	d0e00517 	ldw	r3,-32748(gp)
 10053f0:	053fffc4 	movi	r20,-1
 10053f4:	10800404 	addi	r2,r2,16
 10053f8:	88a7883a 	add	r19,r17,r2
 10053fc:	1d000326 	beq	r3,r20,100540c <_malloc_r+0x3d4>
 1005400:	98c3ffc4 	addi	r3,r19,4095
 1005404:	00bc0004 	movi	r2,-4096
 1005408:	18a6703a 	and	r19,r3,r2
 100540c:	9009883a 	mov	r4,r18
 1005410:	980b883a 	mov	r5,r19
 1005414:	10070cc0 	call	10070cc <_sbrk_r>
 1005418:	1009883a 	mov	r4,r2
 100541c:	15000426 	beq	r2,r20,1005430 <_malloc_r+0x3f8>
 1005420:	854b883a 	add	r5,r16,r21
 1005424:	1029883a 	mov	r20,r2
 1005428:	11405a2e 	bgeu	r2,r5,1005594 <_malloc_r+0x55c>
 100542c:	87000c26 	beq	r16,fp,1005460 <_malloc_r+0x428>
 1005430:	e4000217 	ldw	r16,8(fp)
 1005434:	80c00117 	ldw	r3,4(r16)
 1005438:	00bfff04 	movi	r2,-4
 100543c:	1884703a 	and	r2,r3,r2
 1005440:	14400336 	bltu	r2,r17,1005450 <_malloc_r+0x418>
 1005444:	1449c83a 	sub	r4,r2,r17
 1005448:	008003c4 	movi	r2,15
 100544c:	113fd316 	blt	r2,r4,100539c <_malloc_r+0x364>
 1005450:	9009883a 	mov	r4,r18
 1005454:	100a2ac0 	call	100a2ac <__malloc_unlock>
 1005458:	0007883a 	mov	r3,zero
 100545c:	003f0a06 	br	1005088 <_malloc_r+0x50>
 1005460:	05c04074 	movhi	r23,257
 1005464:	bdc15804 	addi	r23,r23,1376
 1005468:	b8800017 	ldw	r2,0(r23)
 100546c:	988d883a 	add	r6,r19,r2
 1005470:	b9800015 	stw	r6,0(r23)
 1005474:	d0e00517 	ldw	r3,-32748(gp)
 1005478:	00bfffc4 	movi	r2,-1
 100547c:	18808e26 	beq	r3,r2,10056b8 <_malloc_r+0x680>
 1005480:	2145c83a 	sub	r2,r4,r5
 1005484:	3085883a 	add	r2,r6,r2
 1005488:	b8800015 	stw	r2,0(r23)
 100548c:	20c001cc 	andi	r3,r4,7
 1005490:	18005f1e 	bne	r3,zero,1005610 <_malloc_r+0x5d8>
 1005494:	000b883a 	mov	r5,zero
 1005498:	a4c5883a 	add	r2,r20,r19
 100549c:	1083ffcc 	andi	r2,r2,4095
 10054a0:	00c40004 	movi	r3,4096
 10054a4:	1887c83a 	sub	r3,r3,r2
 10054a8:	28e7883a 	add	r19,r5,r3
 10054ac:	9009883a 	mov	r4,r18
 10054b0:	980b883a 	mov	r5,r19
 10054b4:	10070cc0 	call	10070cc <_sbrk_r>
 10054b8:	1007883a 	mov	r3,r2
 10054bc:	00bfffc4 	movi	r2,-1
 10054c0:	18807a26 	beq	r3,r2,10056ac <_malloc_r+0x674>
 10054c4:	1d05c83a 	sub	r2,r3,r20
 10054c8:	9885883a 	add	r2,r19,r2
 10054cc:	10c00054 	ori	r3,r2,1
 10054d0:	b8800017 	ldw	r2,0(r23)
 10054d4:	a021883a 	mov	r16,r20
 10054d8:	a0c00115 	stw	r3,4(r20)
 10054dc:	9885883a 	add	r2,r19,r2
 10054e0:	b8800015 	stw	r2,0(r23)
 10054e4:	e5000215 	stw	r20,8(fp)
 10054e8:	b7003626 	beq	r22,fp,10055c4 <_malloc_r+0x58c>
 10054ec:	018003c4 	movi	r6,15
 10054f0:	35404b36 	bltu	r6,r21,1005620 <_malloc_r+0x5e8>
 10054f4:	00800044 	movi	r2,1
 10054f8:	a0800115 	stw	r2,4(r20)
 10054fc:	003fcd06 	br	1005434 <_malloc_r+0x3fc>
 1005500:	2808d27a 	srli	r4,r5,9
 1005504:	2000371e 	bne	r4,zero,10055e4 <_malloc_r+0x5ac>
 1005508:	2808d0fa 	srli	r4,r5,3
 100550c:	200690fa 	slli	r3,r4,3
 1005510:	1ad1883a 	add	r8,r3,r11
 1005514:	41800217 	ldw	r6,8(r8)
 1005518:	41805b26 	beq	r8,r6,1005688 <_malloc_r+0x650>
 100551c:	30800117 	ldw	r2,4(r6)
 1005520:	00ffff04 	movi	r3,-4
 1005524:	10c4703a 	and	r2,r2,r3
 1005528:	2880022e 	bgeu	r5,r2,1005534 <_malloc_r+0x4fc>
 100552c:	31800217 	ldw	r6,8(r6)
 1005530:	41bffa1e 	bne	r8,r6,100551c <_malloc_r+0x4e4>
 1005534:	32000317 	ldw	r8,12(r6)
 1005538:	39c00117 	ldw	r7,4(r7)
 100553c:	82000315 	stw	r8,12(r16)
 1005540:	81800215 	stw	r6,8(r16)
 1005544:	07004074 	movhi	fp,257
 1005548:	e734dc04 	addi	fp,fp,-11408
 100554c:	34000315 	stw	r16,12(r6)
 1005550:	44000215 	stw	r16,8(r8)
 1005554:	003f3e06 	br	1005250 <_malloc_r+0x218>
 1005558:	63000044 	addi	r12,r12,1
 100555c:	608000cc 	andi	r2,r12,3
 1005560:	10005d26 	beq	r2,zero,10056d8 <_malloc_r+0x6a0>
 1005564:	18c00204 	addi	r3,r3,8
 1005568:	003f5106 	br	10052b0 <_malloc_r+0x278>
 100556c:	8089883a 	add	r4,r16,r2
 1005570:	003f6d06 	br	1005328 <_malloc_r+0x2f0>
 1005574:	00805504 	movi	r2,340
 1005578:	10c02036 	bltu	r2,r3,10055fc <_malloc_r+0x5c4>
 100557c:	8804d3fa 	srli	r2,r17,15
 1005580:	11801dc4 	addi	r6,r2,119
 1005584:	300490fa 	slli	r2,r6,3
 1005588:	003ed806 	br	10050ec <_malloc_r+0xb4>
 100558c:	48c000c4 	addi	r3,r9,3
 1005590:	003f3106 	br	1005258 <_malloc_r+0x220>
 1005594:	05c04074 	movhi	r23,257
 1005598:	bdc15804 	addi	r23,r23,1376
 100559c:	b8800017 	ldw	r2,0(r23)
 10055a0:	988d883a 	add	r6,r19,r2
 10055a4:	b9800015 	stw	r6,0(r23)
 10055a8:	293fb21e 	bne	r5,r4,1005474 <_malloc_r+0x43c>
 10055ac:	2083ffcc 	andi	r2,r4,4095
 10055b0:	103fb01e 	bne	r2,zero,1005474 <_malloc_r+0x43c>
 10055b4:	e4000217 	ldw	r16,8(fp)
 10055b8:	9d45883a 	add	r2,r19,r21
 10055bc:	10800054 	ori	r2,r2,1
 10055c0:	80800115 	stw	r2,4(r16)
 10055c4:	b8c00017 	ldw	r3,0(r23)
 10055c8:	d0a6cd17 	ldw	r2,-25804(gp)
 10055cc:	10c0012e 	bgeu	r2,r3,10055d4 <_malloc_r+0x59c>
 10055d0:	d0e6cd15 	stw	r3,-25804(gp)
 10055d4:	d0a6ce17 	ldw	r2,-25800(gp)
 10055d8:	10ff962e 	bgeu	r2,r3,1005434 <_malloc_r+0x3fc>
 10055dc:	d0e6ce15 	stw	r3,-25800(gp)
 10055e0:	003f9406 	br	1005434 <_malloc_r+0x3fc>
 10055e4:	00800104 	movi	r2,4
 10055e8:	11001e36 	bltu	r2,r4,1005664 <_malloc_r+0x62c>
 10055ec:	2804d1ba 	srli	r2,r5,6
 10055f0:	11000e04 	addi	r4,r2,56
 10055f4:	200690fa 	slli	r3,r4,3
 10055f8:	003fc506 	br	1005510 <_malloc_r+0x4d8>
 10055fc:	00815504 	movi	r2,1364
 1005600:	10c01d2e 	bgeu	r2,r3,1005678 <_malloc_r+0x640>
 1005604:	01801f84 	movi	r6,126
 1005608:	0080fc04 	movi	r2,1008
 100560c:	003eb706 	br	10050ec <_malloc_r+0xb4>
 1005610:	00800204 	movi	r2,8
 1005614:	10cbc83a 	sub	r5,r2,r3
 1005618:	2169883a 	add	r20,r4,r5
 100561c:	003f9e06 	br	1005498 <_malloc_r+0x460>
 1005620:	00bffe04 	movi	r2,-8
 1005624:	a93ffd04 	addi	r4,r21,-12
 1005628:	2088703a 	and	r4,r4,r2
 100562c:	b10b883a 	add	r5,r22,r4
 1005630:	00c00144 	movi	r3,5
 1005634:	28c00215 	stw	r3,8(r5)
 1005638:	28c00115 	stw	r3,4(r5)
 100563c:	b0800117 	ldw	r2,4(r22)
 1005640:	1080004c 	andi	r2,r2,1
 1005644:	2084b03a 	or	r2,r4,r2
 1005648:	b0800115 	stw	r2,4(r22)
 100564c:	313fdd2e 	bgeu	r6,r4,10055c4 <_malloc_r+0x58c>
 1005650:	b1400204 	addi	r5,r22,8
 1005654:	9009883a 	mov	r4,r18
 1005658:	10044b00 	call	10044b0 <_free_r>
 100565c:	e4000217 	ldw	r16,8(fp)
 1005660:	003fd806 	br	10055c4 <_malloc_r+0x58c>
 1005664:	00800504 	movi	r2,20
 1005668:	11001536 	bltu	r2,r4,10056c0 <_malloc_r+0x688>
 100566c:	210016c4 	addi	r4,r4,91
 1005670:	200690fa 	slli	r3,r4,3
 1005674:	003fa606 	br	1005510 <_malloc_r+0x4d8>
 1005678:	8804d4ba 	srli	r2,r17,18
 100567c:	11801f04 	addi	r6,r2,124
 1005680:	300490fa 	slli	r2,r6,3
 1005684:	003e9906 	br	10050ec <_malloc_r+0xb4>
 1005688:	2009d0ba 	srai	r4,r4,2
 100568c:	01404074 	movhi	r5,257
 1005690:	2974dc04 	addi	r5,r5,-11408
 1005694:	00c00044 	movi	r3,1
 1005698:	28800117 	ldw	r2,4(r5)
 100569c:	1906983a 	sll	r3,r3,r4
 10056a0:	10c4b03a 	or	r2,r2,r3
 10056a4:	28800115 	stw	r2,4(r5)
 10056a8:	003fa306 	br	1005538 <_malloc_r+0x500>
 10056ac:	0027883a 	mov	r19,zero
 10056b0:	00c00044 	movi	r3,1
 10056b4:	003f8606 	br	10054d0 <_malloc_r+0x498>
 10056b8:	d1200515 	stw	r4,-32748(gp)
 10056bc:	003f7306 	br	100548c <_malloc_r+0x454>
 10056c0:	00801504 	movi	r2,84
 10056c4:	11001936 	bltu	r2,r4,100572c <_malloc_r+0x6f4>
 10056c8:	2804d33a 	srli	r2,r5,12
 10056cc:	11001b84 	addi	r4,r2,110
 10056d0:	200690fa 	slli	r3,r4,3
 10056d4:	003f8e06 	br	1005510 <_malloc_r+0x4d8>
 10056d8:	480b883a 	mov	r5,r9
 10056dc:	6807883a 	mov	r3,r13
 10056e0:	288000cc 	andi	r2,r5,3
 10056e4:	18fffe04 	addi	r3,r3,-8
 10056e8:	297fffc4 	addi	r5,r5,-1
 10056ec:	10001526 	beq	r2,zero,1005744 <_malloc_r+0x70c>
 10056f0:	18800217 	ldw	r2,8(r3)
 10056f4:	10fffa26 	beq	r2,r3,10056e0 <_malloc_r+0x6a8>
 10056f8:	2109883a 	add	r4,r4,r4
 10056fc:	393f1e36 	bltu	r7,r4,1005378 <_malloc_r+0x340>
 1005700:	203f1d26 	beq	r4,zero,1005378 <_malloc_r+0x340>
 1005704:	21c4703a 	and	r2,r4,r7
 1005708:	10000226 	beq	r2,zero,1005714 <_malloc_r+0x6dc>
 100570c:	6013883a 	mov	r9,r12
 1005710:	003ee106 	br	1005298 <_malloc_r+0x260>
 1005714:	2109883a 	add	r4,r4,r4
 1005718:	3904703a 	and	r2,r7,r4
 100571c:	63000104 	addi	r12,r12,4
 1005720:	103ffc26 	beq	r2,zero,1005714 <_malloc_r+0x6dc>
 1005724:	6013883a 	mov	r9,r12
 1005728:	003edb06 	br	1005298 <_malloc_r+0x260>
 100572c:	00805504 	movi	r2,340
 1005730:	11000836 	bltu	r2,r4,1005754 <_malloc_r+0x71c>
 1005734:	2804d3fa 	srli	r2,r5,15
 1005738:	11001dc4 	addi	r4,r2,119
 100573c:	200690fa 	slli	r3,r4,3
 1005740:	003f7306 	br	1005510 <_malloc_r+0x4d8>
 1005744:	0104303a 	nor	r2,zero,r4
 1005748:	388e703a 	and	r7,r7,r2
 100574c:	e1c00115 	stw	r7,4(fp)
 1005750:	003fe906 	br	10056f8 <_malloc_r+0x6c0>
 1005754:	00815504 	movi	r2,1364
 1005758:	1100032e 	bgeu	r2,r4,1005768 <_malloc_r+0x730>
 100575c:	01001f84 	movi	r4,126
 1005760:	00c0fc04 	movi	r3,1008
 1005764:	003f6a06 	br	1005510 <_malloc_r+0x4d8>
 1005768:	2804d4ba 	srli	r2,r5,18
 100576c:	11001f04 	addi	r4,r2,124
 1005770:	200690fa 	slli	r3,r4,3
 1005774:	003f6606 	br	1005510 <_malloc_r+0x4d8>

01005778 <memchr>:
 1005778:	008000c4 	movi	r2,3
 100577c:	29403fcc 	andi	r5,r5,255
 1005780:	2007883a 	mov	r3,r4
 1005784:	1180022e 	bgeu	r2,r6,1005790 <memchr+0x18>
 1005788:	2084703a 	and	r2,r4,r2
 100578c:	10000b26 	beq	r2,zero,10057bc <memchr+0x44>
 1005790:	313fffc4 	addi	r4,r6,-1
 1005794:	3000051e 	bne	r6,zero,10057ac <memchr+0x34>
 1005798:	00002c06 	br	100584c <memchr+0xd4>
 100579c:	213fffc4 	addi	r4,r4,-1
 10057a0:	00bfffc4 	movi	r2,-1
 10057a4:	18c00044 	addi	r3,r3,1
 10057a8:	20802826 	beq	r4,r2,100584c <memchr+0xd4>
 10057ac:	18800003 	ldbu	r2,0(r3)
 10057b0:	28bffa1e 	bne	r5,r2,100579c <memchr+0x24>
 10057b4:	1805883a 	mov	r2,r3
 10057b8:	f800283a 	ret
 10057bc:	0011883a 	mov	r8,zero
 10057c0:	0007883a 	mov	r3,zero
 10057c4:	01c00104 	movi	r7,4
 10057c8:	4004923a 	slli	r2,r8,8
 10057cc:	18c00044 	addi	r3,r3,1
 10057d0:	1151883a 	add	r8,r2,r5
 10057d4:	19fffc1e 	bne	r3,r7,10057c8 <memchr+0x50>
 10057d8:	02bfbff4 	movhi	r10,65279
 10057dc:	52bfbfc4 	addi	r10,r10,-257
 10057e0:	02602074 	movhi	r9,32897
 10057e4:	4a602004 	addi	r9,r9,-32640
 10057e8:	02c000c4 	movi	r11,3
 10057ec:	20800017 	ldw	r2,0(r4)
 10057f0:	31bfff04 	addi	r6,r6,-4
 10057f4:	200f883a 	mov	r7,r4
 10057f8:	1204f03a 	xor	r2,r2,r8
 10057fc:	1287883a 	add	r3,r2,r10
 1005800:	1a46703a 	and	r3,r3,r9
 1005804:	0084303a 	nor	r2,zero,r2
 1005808:	10c4703a 	and	r2,r2,r3
 100580c:	10000b26 	beq	r2,zero,100583c <memchr+0xc4>
 1005810:	20800003 	ldbu	r2,0(r4)
 1005814:	28800f26 	beq	r5,r2,1005854 <memchr+0xdc>
 1005818:	20800043 	ldbu	r2,1(r4)
 100581c:	21c00044 	addi	r7,r4,1
 1005820:	28800c26 	beq	r5,r2,1005854 <memchr+0xdc>
 1005824:	20800083 	ldbu	r2,2(r4)
 1005828:	21c00084 	addi	r7,r4,2
 100582c:	28800926 	beq	r5,r2,1005854 <memchr+0xdc>
 1005830:	208000c3 	ldbu	r2,3(r4)
 1005834:	21c000c4 	addi	r7,r4,3
 1005838:	28800626 	beq	r5,r2,1005854 <memchr+0xdc>
 100583c:	21000104 	addi	r4,r4,4
 1005840:	59bfea36 	bltu	r11,r6,10057ec <memchr+0x74>
 1005844:	2007883a 	mov	r3,r4
 1005848:	003fd106 	br	1005790 <memchr+0x18>
 100584c:	0005883a 	mov	r2,zero
 1005850:	f800283a 	ret
 1005854:	3805883a 	mov	r2,r7
 1005858:	f800283a 	ret

0100585c <memcpy>:
 100585c:	01c003c4 	movi	r7,15
 1005860:	2007883a 	mov	r3,r4
 1005864:	3980032e 	bgeu	r7,r6,1005874 <memcpy+0x18>
 1005868:	2904b03a 	or	r2,r5,r4
 100586c:	108000cc 	andi	r2,r2,3
 1005870:	10000926 	beq	r2,zero,1005898 <memcpy+0x3c>
 1005874:	30000626 	beq	r6,zero,1005890 <memcpy+0x34>
 1005878:	30cd883a 	add	r6,r6,r3
 100587c:	28800003 	ldbu	r2,0(r5)
 1005880:	29400044 	addi	r5,r5,1
 1005884:	18800005 	stb	r2,0(r3)
 1005888:	18c00044 	addi	r3,r3,1
 100588c:	30fffb1e 	bne	r6,r3,100587c <memcpy+0x20>
 1005890:	2005883a 	mov	r2,r4
 1005894:	f800283a 	ret
 1005898:	3811883a 	mov	r8,r7
 100589c:	200f883a 	mov	r7,r4
 10058a0:	28c00017 	ldw	r3,0(r5)
 10058a4:	31bffc04 	addi	r6,r6,-16
 10058a8:	38c00015 	stw	r3,0(r7)
 10058ac:	28800117 	ldw	r2,4(r5)
 10058b0:	38800115 	stw	r2,4(r7)
 10058b4:	28c00217 	ldw	r3,8(r5)
 10058b8:	38c00215 	stw	r3,8(r7)
 10058bc:	28800317 	ldw	r2,12(r5)
 10058c0:	29400404 	addi	r5,r5,16
 10058c4:	38800315 	stw	r2,12(r7)
 10058c8:	39c00404 	addi	r7,r7,16
 10058cc:	41bff436 	bltu	r8,r6,10058a0 <memcpy+0x44>
 10058d0:	008000c4 	movi	r2,3
 10058d4:	1180072e 	bgeu	r2,r6,10058f4 <memcpy+0x98>
 10058d8:	1007883a 	mov	r3,r2
 10058dc:	28800017 	ldw	r2,0(r5)
 10058e0:	31bfff04 	addi	r6,r6,-4
 10058e4:	29400104 	addi	r5,r5,4
 10058e8:	38800015 	stw	r2,0(r7)
 10058ec:	39c00104 	addi	r7,r7,4
 10058f0:	19bffa36 	bltu	r3,r6,10058dc <memcpy+0x80>
 10058f4:	3807883a 	mov	r3,r7
 10058f8:	003fde06 	br	1005874 <memcpy+0x18>

010058fc <memmove>:
 10058fc:	2807883a 	mov	r3,r5
 1005900:	2011883a 	mov	r8,r4
 1005904:	29000c2e 	bgeu	r5,r4,1005938 <memmove+0x3c>
 1005908:	298f883a 	add	r7,r5,r6
 100590c:	21c00a2e 	bgeu	r4,r7,1005938 <memmove+0x3c>
 1005910:	30000726 	beq	r6,zero,1005930 <memmove+0x34>
 1005914:	2187883a 	add	r3,r4,r6
 1005918:	198dc83a 	sub	r6,r3,r6
 100591c:	39ffffc4 	addi	r7,r7,-1
 1005920:	38800003 	ldbu	r2,0(r7)
 1005924:	18ffffc4 	addi	r3,r3,-1
 1005928:	18800005 	stb	r2,0(r3)
 100592c:	19bffb1e 	bne	r3,r6,100591c <memmove+0x20>
 1005930:	2005883a 	mov	r2,r4
 1005934:	f800283a 	ret
 1005938:	01c003c4 	movi	r7,15
 100593c:	39800a36 	bltu	r7,r6,1005968 <memmove+0x6c>
 1005940:	303ffb26 	beq	r6,zero,1005930 <memmove+0x34>
 1005944:	400f883a 	mov	r7,r8
 1005948:	320d883a 	add	r6,r6,r8
 100594c:	28800003 	ldbu	r2,0(r5)
 1005950:	29400044 	addi	r5,r5,1
 1005954:	38800005 	stb	r2,0(r7)
 1005958:	39c00044 	addi	r7,r7,1
 100595c:	39bffb1e 	bne	r7,r6,100594c <memmove+0x50>
 1005960:	2005883a 	mov	r2,r4
 1005964:	f800283a 	ret
 1005968:	1904b03a 	or	r2,r3,r4
 100596c:	108000cc 	andi	r2,r2,3
 1005970:	103ff31e 	bne	r2,zero,1005940 <memmove+0x44>
 1005974:	3811883a 	mov	r8,r7
 1005978:	180b883a 	mov	r5,r3
 100597c:	200f883a 	mov	r7,r4
 1005980:	28c00017 	ldw	r3,0(r5)
 1005984:	31bffc04 	addi	r6,r6,-16
 1005988:	38c00015 	stw	r3,0(r7)
 100598c:	28800117 	ldw	r2,4(r5)
 1005990:	38800115 	stw	r2,4(r7)
 1005994:	28c00217 	ldw	r3,8(r5)
 1005998:	38c00215 	stw	r3,8(r7)
 100599c:	28800317 	ldw	r2,12(r5)
 10059a0:	29400404 	addi	r5,r5,16
 10059a4:	38800315 	stw	r2,12(r7)
 10059a8:	39c00404 	addi	r7,r7,16
 10059ac:	41bff436 	bltu	r8,r6,1005980 <memmove+0x84>
 10059b0:	008000c4 	movi	r2,3
 10059b4:	1180072e 	bgeu	r2,r6,10059d4 <memmove+0xd8>
 10059b8:	1007883a 	mov	r3,r2
 10059bc:	28800017 	ldw	r2,0(r5)
 10059c0:	31bfff04 	addi	r6,r6,-4
 10059c4:	29400104 	addi	r5,r5,4
 10059c8:	38800015 	stw	r2,0(r7)
 10059cc:	39c00104 	addi	r7,r7,4
 10059d0:	19bffa36 	bltu	r3,r6,10059bc <memmove+0xc0>
 10059d4:	3811883a 	mov	r8,r7
 10059d8:	003fd906 	br	1005940 <memmove+0x44>

010059dc <memset>:
 10059dc:	008000c4 	movi	r2,3
 10059e0:	29403fcc 	andi	r5,r5,255
 10059e4:	2007883a 	mov	r3,r4
 10059e8:	1180022e 	bgeu	r2,r6,10059f4 <memset+0x18>
 10059ec:	2084703a 	and	r2,r4,r2
 10059f0:	10000826 	beq	r2,zero,1005a14 <memset+0x38>
 10059f4:	30000526 	beq	r6,zero,1005a0c <memset+0x30>
 10059f8:	2805883a 	mov	r2,r5
 10059fc:	30cd883a 	add	r6,r6,r3
 1005a00:	18800005 	stb	r2,0(r3)
 1005a04:	18c00044 	addi	r3,r3,1
 1005a08:	19bffd1e 	bne	r3,r6,1005a00 <memset+0x24>
 1005a0c:	2005883a 	mov	r2,r4
 1005a10:	f800283a 	ret
 1005a14:	2804923a 	slli	r2,r5,8
 1005a18:	020003c4 	movi	r8,15
 1005a1c:	200f883a 	mov	r7,r4
 1005a20:	2884b03a 	or	r2,r5,r2
 1005a24:	1006943a 	slli	r3,r2,16
 1005a28:	10c6b03a 	or	r3,r2,r3
 1005a2c:	41800a2e 	bgeu	r8,r6,1005a58 <memset+0x7c>
 1005a30:	4005883a 	mov	r2,r8
 1005a34:	31bffc04 	addi	r6,r6,-16
 1005a38:	38c00015 	stw	r3,0(r7)
 1005a3c:	38c00115 	stw	r3,4(r7)
 1005a40:	38c00215 	stw	r3,8(r7)
 1005a44:	38c00315 	stw	r3,12(r7)
 1005a48:	39c00404 	addi	r7,r7,16
 1005a4c:	11bff936 	bltu	r2,r6,1005a34 <memset+0x58>
 1005a50:	008000c4 	movi	r2,3
 1005a54:	1180052e 	bgeu	r2,r6,1005a6c <memset+0x90>
 1005a58:	31bfff04 	addi	r6,r6,-4
 1005a5c:	008000c4 	movi	r2,3
 1005a60:	38c00015 	stw	r3,0(r7)
 1005a64:	39c00104 	addi	r7,r7,4
 1005a68:	11bffb36 	bltu	r2,r6,1005a58 <memset+0x7c>
 1005a6c:	3807883a 	mov	r3,r7
 1005a70:	003fe006 	br	10059f4 <memset+0x18>

01005a74 <_Bfree>:
 1005a74:	28000826 	beq	r5,zero,1005a98 <_Bfree+0x24>
 1005a78:	28800117 	ldw	r2,4(r5)
 1005a7c:	21001317 	ldw	r4,76(r4)
 1005a80:	1085883a 	add	r2,r2,r2
 1005a84:	1085883a 	add	r2,r2,r2
 1005a88:	1105883a 	add	r2,r2,r4
 1005a8c:	10c00017 	ldw	r3,0(r2)
 1005a90:	28c00015 	stw	r3,0(r5)
 1005a94:	11400015 	stw	r5,0(r2)
 1005a98:	f800283a 	ret

01005a9c <__hi0bits>:
 1005a9c:	20bfffec 	andhi	r2,r4,65535
 1005aa0:	10001426 	beq	r2,zero,1005af4 <__hi0bits+0x58>
 1005aa4:	0007883a 	mov	r3,zero
 1005aa8:	20bfc02c 	andhi	r2,r4,65280
 1005aac:	1000021e 	bne	r2,zero,1005ab8 <__hi0bits+0x1c>
 1005ab0:	2008923a 	slli	r4,r4,8
 1005ab4:	18c00204 	addi	r3,r3,8
 1005ab8:	20bc002c 	andhi	r2,r4,61440
 1005abc:	1000021e 	bne	r2,zero,1005ac8 <__hi0bits+0x2c>
 1005ac0:	2008913a 	slli	r4,r4,4
 1005ac4:	18c00104 	addi	r3,r3,4
 1005ac8:	20b0002c 	andhi	r2,r4,49152
 1005acc:	1000031e 	bne	r2,zero,1005adc <__hi0bits+0x40>
 1005ad0:	2105883a 	add	r2,r4,r4
 1005ad4:	18c00084 	addi	r3,r3,2
 1005ad8:	1089883a 	add	r4,r2,r2
 1005adc:	20000316 	blt	r4,zero,1005aec <__hi0bits+0x50>
 1005ae0:	2090002c 	andhi	r2,r4,16384
 1005ae4:	10000626 	beq	r2,zero,1005b00 <__hi0bits+0x64>
 1005ae8:	18c00044 	addi	r3,r3,1
 1005aec:	1805883a 	mov	r2,r3
 1005af0:	f800283a 	ret
 1005af4:	2008943a 	slli	r4,r4,16
 1005af8:	00c00404 	movi	r3,16
 1005afc:	003fea06 	br	1005aa8 <__hi0bits+0xc>
 1005b00:	00c00804 	movi	r3,32
 1005b04:	1805883a 	mov	r2,r3
 1005b08:	f800283a 	ret

01005b0c <__lo0bits>:
 1005b0c:	20c00017 	ldw	r3,0(r4)
 1005b10:	188001cc 	andi	r2,r3,7
 1005b14:	10000a26 	beq	r2,zero,1005b40 <__lo0bits+0x34>
 1005b18:	1880004c 	andi	r2,r3,1
 1005b1c:	1005003a 	cmpeq	r2,r2,zero
 1005b20:	10002126 	beq	r2,zero,1005ba8 <__lo0bits+0x9c>
 1005b24:	1880008c 	andi	r2,r3,2
 1005b28:	1000251e 	bne	r2,zero,1005bc0 <__lo0bits+0xb4>
 1005b2c:	1804d0ba 	srli	r2,r3,2
 1005b30:	01400084 	movi	r5,2
 1005b34:	20800015 	stw	r2,0(r4)
 1005b38:	2805883a 	mov	r2,r5
 1005b3c:	f800283a 	ret
 1005b40:	18bfffcc 	andi	r2,r3,65535
 1005b44:	10001526 	beq	r2,zero,1005b9c <__lo0bits+0x90>
 1005b48:	000b883a 	mov	r5,zero
 1005b4c:	18803fcc 	andi	r2,r3,255
 1005b50:	1000021e 	bne	r2,zero,1005b5c <__lo0bits+0x50>
 1005b54:	1806d23a 	srli	r3,r3,8
 1005b58:	29400204 	addi	r5,r5,8
 1005b5c:	188003cc 	andi	r2,r3,15
 1005b60:	1000021e 	bne	r2,zero,1005b6c <__lo0bits+0x60>
 1005b64:	1806d13a 	srli	r3,r3,4
 1005b68:	29400104 	addi	r5,r5,4
 1005b6c:	188000cc 	andi	r2,r3,3
 1005b70:	1000021e 	bne	r2,zero,1005b7c <__lo0bits+0x70>
 1005b74:	1806d0ba 	srli	r3,r3,2
 1005b78:	29400084 	addi	r5,r5,2
 1005b7c:	1880004c 	andi	r2,r3,1
 1005b80:	1000031e 	bne	r2,zero,1005b90 <__lo0bits+0x84>
 1005b84:	1806d07a 	srli	r3,r3,1
 1005b88:	18000a26 	beq	r3,zero,1005bb4 <__lo0bits+0xa8>
 1005b8c:	29400044 	addi	r5,r5,1
 1005b90:	2805883a 	mov	r2,r5
 1005b94:	20c00015 	stw	r3,0(r4)
 1005b98:	f800283a 	ret
 1005b9c:	1806d43a 	srli	r3,r3,16
 1005ba0:	01400404 	movi	r5,16
 1005ba4:	003fe906 	br	1005b4c <__lo0bits+0x40>
 1005ba8:	000b883a 	mov	r5,zero
 1005bac:	2805883a 	mov	r2,r5
 1005bb0:	f800283a 	ret
 1005bb4:	01400804 	movi	r5,32
 1005bb8:	2805883a 	mov	r2,r5
 1005bbc:	f800283a 	ret
 1005bc0:	1804d07a 	srli	r2,r3,1
 1005bc4:	01400044 	movi	r5,1
 1005bc8:	20800015 	stw	r2,0(r4)
 1005bcc:	003fda06 	br	1005b38 <__lo0bits+0x2c>

01005bd0 <__mcmp>:
 1005bd0:	20800417 	ldw	r2,16(r4)
 1005bd4:	28c00417 	ldw	r3,16(r5)
 1005bd8:	10cfc83a 	sub	r7,r2,r3
 1005bdc:	38000c1e 	bne	r7,zero,1005c10 <__mcmp+0x40>
 1005be0:	18c5883a 	add	r2,r3,r3
 1005be4:	1085883a 	add	r2,r2,r2
 1005be8:	10c00504 	addi	r3,r2,20
 1005bec:	21000504 	addi	r4,r4,20
 1005bf0:	28cb883a 	add	r5,r5,r3
 1005bf4:	2085883a 	add	r2,r4,r2
 1005bf8:	10bfff04 	addi	r2,r2,-4
 1005bfc:	297fff04 	addi	r5,r5,-4
 1005c00:	11800017 	ldw	r6,0(r2)
 1005c04:	28c00017 	ldw	r3,0(r5)
 1005c08:	30c0031e 	bne	r6,r3,1005c18 <__mcmp+0x48>
 1005c0c:	20bffa36 	bltu	r4,r2,1005bf8 <__mcmp+0x28>
 1005c10:	3805883a 	mov	r2,r7
 1005c14:	f800283a 	ret
 1005c18:	30c00336 	bltu	r6,r3,1005c28 <__mcmp+0x58>
 1005c1c:	01c00044 	movi	r7,1
 1005c20:	3805883a 	mov	r2,r7
 1005c24:	f800283a 	ret
 1005c28:	01ffffc4 	movi	r7,-1
 1005c2c:	003ff806 	br	1005c10 <__mcmp+0x40>

01005c30 <__ulp>:
 1005c30:	295ffc2c 	andhi	r5,r5,32752
 1005c34:	013f3034 	movhi	r4,64704
 1005c38:	290b883a 	add	r5,r5,r4
 1005c3c:	0145c83a 	sub	r2,zero,r5
 1005c40:	1007d53a 	srai	r3,r2,20
 1005c44:	000d883a 	mov	r6,zero
 1005c48:	0140040e 	bge	zero,r5,1005c5c <__ulp+0x2c>
 1005c4c:	280f883a 	mov	r7,r5
 1005c50:	3807883a 	mov	r3,r7
 1005c54:	3005883a 	mov	r2,r6
 1005c58:	f800283a 	ret
 1005c5c:	008004c4 	movi	r2,19
 1005c60:	193ffb04 	addi	r4,r3,-20
 1005c64:	10c00c0e 	bge	r2,r3,1005c98 <__ulp+0x68>
 1005c68:	008007c4 	movi	r2,31
 1005c6c:	1107c83a 	sub	r3,r2,r4
 1005c70:	00800784 	movi	r2,30
 1005c74:	01400044 	movi	r5,1
 1005c78:	11000216 	blt	r2,r4,1005c84 <__ulp+0x54>
 1005c7c:	00800044 	movi	r2,1
 1005c80:	10ca983a 	sll	r5,r2,r3
 1005c84:	000f883a 	mov	r7,zero
 1005c88:	280d883a 	mov	r6,r5
 1005c8c:	3807883a 	mov	r3,r7
 1005c90:	3005883a 	mov	r2,r6
 1005c94:	f800283a 	ret
 1005c98:	00800234 	movhi	r2,8
 1005c9c:	10cfd83a 	sra	r7,r2,r3
 1005ca0:	000d883a 	mov	r6,zero
 1005ca4:	3005883a 	mov	r2,r6
 1005ca8:	3807883a 	mov	r3,r7
 1005cac:	f800283a 	ret

01005cb0 <__b2d>:
 1005cb0:	20800417 	ldw	r2,16(r4)
 1005cb4:	defff904 	addi	sp,sp,-28
 1005cb8:	dd000415 	stw	r20,16(sp)
 1005cbc:	1085883a 	add	r2,r2,r2
 1005cc0:	25000504 	addi	r20,r4,20
 1005cc4:	1085883a 	add	r2,r2,r2
 1005cc8:	dc000015 	stw	r16,0(sp)
 1005ccc:	a0a1883a 	add	r16,r20,r2
 1005cd0:	dd400515 	stw	r21,20(sp)
 1005cd4:	857fff17 	ldw	r21,-4(r16)
 1005cd8:	dc400115 	stw	r17,4(sp)
 1005cdc:	dfc00615 	stw	ra,24(sp)
 1005ce0:	a809883a 	mov	r4,r21
 1005ce4:	2823883a 	mov	r17,r5
 1005ce8:	dcc00315 	stw	r19,12(sp)
 1005cec:	dc800215 	stw	r18,8(sp)
 1005cf0:	1005a9c0 	call	1005a9c <__hi0bits>
 1005cf4:	100b883a 	mov	r5,r2
 1005cf8:	00800804 	movi	r2,32
 1005cfc:	1145c83a 	sub	r2,r2,r5
 1005d00:	88800015 	stw	r2,0(r17)
 1005d04:	00800284 	movi	r2,10
 1005d08:	80ffff04 	addi	r3,r16,-4
 1005d0c:	11401416 	blt	r2,r5,1005d60 <__b2d+0xb0>
 1005d10:	008002c4 	movi	r2,11
 1005d14:	1149c83a 	sub	r4,r2,r5
 1005d18:	a0c02736 	bltu	r20,r3,1005db8 <__b2d+0x108>
 1005d1c:	000d883a 	mov	r6,zero
 1005d20:	28800544 	addi	r2,r5,21
 1005d24:	a906d83a 	srl	r3,r21,r4
 1005d28:	a884983a 	sll	r2,r21,r2
 1005d2c:	1ccffc34 	orhi	r19,r3,16368
 1005d30:	11a4b03a 	or	r18,r2,r6
 1005d34:	9005883a 	mov	r2,r18
 1005d38:	9807883a 	mov	r3,r19
 1005d3c:	dfc00617 	ldw	ra,24(sp)
 1005d40:	dd400517 	ldw	r21,20(sp)
 1005d44:	dd000417 	ldw	r20,16(sp)
 1005d48:	dcc00317 	ldw	r19,12(sp)
 1005d4c:	dc800217 	ldw	r18,8(sp)
 1005d50:	dc400117 	ldw	r17,4(sp)
 1005d54:	dc000017 	ldw	r16,0(sp)
 1005d58:	dec00704 	addi	sp,sp,28
 1005d5c:	f800283a 	ret
 1005d60:	a0c00e36 	bltu	r20,r3,1005d9c <__b2d+0xec>
 1005d64:	293ffd44 	addi	r4,r5,-11
 1005d68:	000d883a 	mov	r6,zero
 1005d6c:	20000f26 	beq	r4,zero,1005dac <__b2d+0xfc>
 1005d70:	00800804 	movi	r2,32
 1005d74:	110bc83a 	sub	r5,r2,r4
 1005d78:	a0c01236 	bltu	r20,r3,1005dc4 <__b2d+0x114>
 1005d7c:	000f883a 	mov	r7,zero
 1005d80:	a904983a 	sll	r2,r21,r4
 1005d84:	3146d83a 	srl	r3,r6,r5
 1005d88:	3108983a 	sll	r4,r6,r4
 1005d8c:	108ffc34 	orhi	r2,r2,16368
 1005d90:	18a6b03a 	or	r19,r3,r2
 1005d94:	3924b03a 	or	r18,r7,r4
 1005d98:	003fe606 	br	1005d34 <__b2d+0x84>
 1005d9c:	293ffd44 	addi	r4,r5,-11
 1005da0:	81bffe17 	ldw	r6,-8(r16)
 1005da4:	80fffe04 	addi	r3,r16,-8
 1005da8:	203ff11e 	bne	r4,zero,1005d70 <__b2d+0xc0>
 1005dac:	accffc34 	orhi	r19,r21,16368
 1005db0:	3025883a 	mov	r18,r6
 1005db4:	003fdf06 	br	1005d34 <__b2d+0x84>
 1005db8:	18bfff17 	ldw	r2,-4(r3)
 1005dbc:	110cd83a 	srl	r6,r2,r4
 1005dc0:	003fd706 	br	1005d20 <__b2d+0x70>
 1005dc4:	18bfff17 	ldw	r2,-4(r3)
 1005dc8:	114ed83a 	srl	r7,r2,r5
 1005dcc:	003fec06 	br	1005d80 <__b2d+0xd0>

01005dd0 <__ratio>:
 1005dd0:	defff904 	addi	sp,sp,-28
 1005dd4:	dc400215 	stw	r17,8(sp)
 1005dd8:	2823883a 	mov	r17,r5
 1005ddc:	d80b883a 	mov	r5,sp
 1005de0:	dfc00615 	stw	ra,24(sp)
 1005de4:	dd000515 	stw	r20,20(sp)
 1005de8:	dcc00415 	stw	r19,16(sp)
 1005dec:	dc800315 	stw	r18,12(sp)
 1005df0:	2025883a 	mov	r18,r4
 1005df4:	1005cb00 	call	1005cb0 <__b2d>
 1005df8:	8809883a 	mov	r4,r17
 1005dfc:	d9400104 	addi	r5,sp,4
 1005e00:	1027883a 	mov	r19,r2
 1005e04:	1829883a 	mov	r20,r3
 1005e08:	1005cb00 	call	1005cb0 <__b2d>
 1005e0c:	89000417 	ldw	r4,16(r17)
 1005e10:	91c00417 	ldw	r7,16(r18)
 1005e14:	d9800117 	ldw	r6,4(sp)
 1005e18:	180b883a 	mov	r5,r3
 1005e1c:	390fc83a 	sub	r7,r7,r4
 1005e20:	1009883a 	mov	r4,r2
 1005e24:	d8800017 	ldw	r2,0(sp)
 1005e28:	380e917a 	slli	r7,r7,5
 1005e2c:	2011883a 	mov	r8,r4
 1005e30:	1185c83a 	sub	r2,r2,r6
 1005e34:	11c5883a 	add	r2,r2,r7
 1005e38:	1006953a 	slli	r3,r2,20
 1005e3c:	2813883a 	mov	r9,r5
 1005e40:	00800d0e 	bge	zero,r2,1005e78 <__ratio+0xa8>
 1005e44:	1d29883a 	add	r20,r3,r20
 1005e48:	a00b883a 	mov	r5,r20
 1005e4c:	480f883a 	mov	r7,r9
 1005e50:	9809883a 	mov	r4,r19
 1005e54:	400d883a 	mov	r6,r8
 1005e58:	1008c2c0 	call	1008c2c <__divdf3>
 1005e5c:	dfc00617 	ldw	ra,24(sp)
 1005e60:	dd000517 	ldw	r20,20(sp)
 1005e64:	dcc00417 	ldw	r19,16(sp)
 1005e68:	dc800317 	ldw	r18,12(sp)
 1005e6c:	dc400217 	ldw	r17,8(sp)
 1005e70:	dec00704 	addi	sp,sp,28
 1005e74:	f800283a 	ret
 1005e78:	28d3c83a 	sub	r9,r5,r3
 1005e7c:	003ff206 	br	1005e48 <__ratio+0x78>

01005e80 <_mprec_log10>:
 1005e80:	defffe04 	addi	sp,sp,-8
 1005e84:	008005c4 	movi	r2,23
 1005e88:	dc000015 	stw	r16,0(sp)
 1005e8c:	dfc00115 	stw	ra,4(sp)
 1005e90:	2021883a 	mov	r16,r4
 1005e94:	11000c16 	blt	r2,r4,1005ec8 <_mprec_log10+0x48>
 1005e98:	200490fa 	slli	r2,r4,3
 1005e9c:	00c04074 	movhi	r3,257
 1005ea0:	18f33204 	addi	r3,r3,-13112
 1005ea4:	10c5883a 	add	r2,r2,r3
 1005ea8:	12400117 	ldw	r9,4(r2)
 1005eac:	12000017 	ldw	r8,0(r2)
 1005eb0:	4807883a 	mov	r3,r9
 1005eb4:	4005883a 	mov	r2,r8
 1005eb8:	dfc00117 	ldw	ra,4(sp)
 1005ebc:	dc000017 	ldw	r16,0(sp)
 1005ec0:	dec00204 	addi	sp,sp,8
 1005ec4:	f800283a 	ret
 1005ec8:	0011883a 	mov	r8,zero
 1005ecc:	024ffc34 	movhi	r9,16368
 1005ed0:	0005883a 	mov	r2,zero
 1005ed4:	00d00934 	movhi	r3,16420
 1005ed8:	480b883a 	mov	r5,r9
 1005edc:	4009883a 	mov	r4,r8
 1005ee0:	180f883a 	mov	r7,r3
 1005ee4:	100d883a 	mov	r6,r2
 1005ee8:	10088680 	call	1008868 <__muldf3>
 1005eec:	843fffc4 	addi	r16,r16,-1
 1005ef0:	1011883a 	mov	r8,r2
 1005ef4:	1813883a 	mov	r9,r3
 1005ef8:	803ff51e 	bne	r16,zero,1005ed0 <_mprec_log10+0x50>
 1005efc:	4005883a 	mov	r2,r8
 1005f00:	4807883a 	mov	r3,r9
 1005f04:	dfc00117 	ldw	ra,4(sp)
 1005f08:	dc000017 	ldw	r16,0(sp)
 1005f0c:	dec00204 	addi	sp,sp,8
 1005f10:	f800283a 	ret

01005f14 <__copybits>:
 1005f14:	297fffc4 	addi	r5,r5,-1
 1005f18:	30800417 	ldw	r2,16(r6)
 1005f1c:	280bd17a 	srai	r5,r5,5
 1005f20:	31800504 	addi	r6,r6,20
 1005f24:	1085883a 	add	r2,r2,r2
 1005f28:	294b883a 	add	r5,r5,r5
 1005f2c:	294b883a 	add	r5,r5,r5
 1005f30:	1085883a 	add	r2,r2,r2
 1005f34:	290b883a 	add	r5,r5,r4
 1005f38:	3087883a 	add	r3,r6,r2
 1005f3c:	29400104 	addi	r5,r5,4
 1005f40:	30c0052e 	bgeu	r6,r3,1005f58 <__copybits+0x44>
 1005f44:	30800017 	ldw	r2,0(r6)
 1005f48:	31800104 	addi	r6,r6,4
 1005f4c:	20800015 	stw	r2,0(r4)
 1005f50:	21000104 	addi	r4,r4,4
 1005f54:	30fffb36 	bltu	r6,r3,1005f44 <__copybits+0x30>
 1005f58:	2140032e 	bgeu	r4,r5,1005f68 <__copybits+0x54>
 1005f5c:	20000015 	stw	zero,0(r4)
 1005f60:	21000104 	addi	r4,r4,4
 1005f64:	217ffd36 	bltu	r4,r5,1005f5c <__copybits+0x48>
 1005f68:	f800283a 	ret

01005f6c <__any_on>:
 1005f6c:	20800417 	ldw	r2,16(r4)
 1005f70:	2807d17a 	srai	r3,r5,5
 1005f74:	21000504 	addi	r4,r4,20
 1005f78:	10c00d0e 	bge	r2,r3,1005fb0 <__any_on+0x44>
 1005f7c:	1085883a 	add	r2,r2,r2
 1005f80:	1085883a 	add	r2,r2,r2
 1005f84:	208d883a 	add	r6,r4,r2
 1005f88:	2180182e 	bgeu	r4,r6,1005fec <__any_on+0x80>
 1005f8c:	30bfff17 	ldw	r2,-4(r6)
 1005f90:	30ffff04 	addi	r3,r6,-4
 1005f94:	1000041e 	bne	r2,zero,1005fa8 <__any_on+0x3c>
 1005f98:	20c0142e 	bgeu	r4,r3,1005fec <__any_on+0x80>
 1005f9c:	18ffff04 	addi	r3,r3,-4
 1005fa0:	18800017 	ldw	r2,0(r3)
 1005fa4:	103ffc26 	beq	r2,zero,1005f98 <__any_on+0x2c>
 1005fa8:	00800044 	movi	r2,1
 1005fac:	f800283a 	ret
 1005fb0:	18800a0e 	bge	r3,r2,1005fdc <__any_on+0x70>
 1005fb4:	294007cc 	andi	r5,r5,31
 1005fb8:	28000826 	beq	r5,zero,1005fdc <__any_on+0x70>
 1005fbc:	18c5883a 	add	r2,r3,r3
 1005fc0:	1085883a 	add	r2,r2,r2
 1005fc4:	208d883a 	add	r6,r4,r2
 1005fc8:	30c00017 	ldw	r3,0(r6)
 1005fcc:	1944d83a 	srl	r2,r3,r5
 1005fd0:	1144983a 	sll	r2,r2,r5
 1005fd4:	18bff41e 	bne	r3,r2,1005fa8 <__any_on+0x3c>
 1005fd8:	003feb06 	br	1005f88 <__any_on+0x1c>
 1005fdc:	18c5883a 	add	r2,r3,r3
 1005fe0:	1085883a 	add	r2,r2,r2
 1005fe4:	208d883a 	add	r6,r4,r2
 1005fe8:	003fe706 	br	1005f88 <__any_on+0x1c>
 1005fec:	0005883a 	mov	r2,zero
 1005ff0:	f800283a 	ret

01005ff4 <_Balloc>:
 1005ff4:	20c01317 	ldw	r3,76(r4)
 1005ff8:	defffb04 	addi	sp,sp,-20
 1005ffc:	dcc00315 	stw	r19,12(sp)
 1006000:	dc800215 	stw	r18,8(sp)
 1006004:	dfc00415 	stw	ra,16(sp)
 1006008:	2825883a 	mov	r18,r5
 100600c:	dc400115 	stw	r17,4(sp)
 1006010:	dc000015 	stw	r16,0(sp)
 1006014:	2027883a 	mov	r19,r4
 1006018:	01800404 	movi	r6,16
 100601c:	01400104 	movi	r5,4
 1006020:	18001726 	beq	r3,zero,1006080 <_Balloc+0x8c>
 1006024:	01400044 	movi	r5,1
 1006028:	9485883a 	add	r2,r18,r18
 100602c:	2ca2983a 	sll	r17,r5,r18
 1006030:	1085883a 	add	r2,r2,r2
 1006034:	10c7883a 	add	r3,r2,r3
 1006038:	1c000017 	ldw	r16,0(r3)
 100603c:	8c4d883a 	add	r6,r17,r17
 1006040:	318d883a 	add	r6,r6,r6
 1006044:	9809883a 	mov	r4,r19
 1006048:	31800504 	addi	r6,r6,20
 100604c:	80001226 	beq	r16,zero,1006098 <_Balloc+0xa4>
 1006050:	80800017 	ldw	r2,0(r16)
 1006054:	18800015 	stw	r2,0(r3)
 1006058:	80000415 	stw	zero,16(r16)
 100605c:	80000315 	stw	zero,12(r16)
 1006060:	8005883a 	mov	r2,r16
 1006064:	dfc00417 	ldw	ra,16(sp)
 1006068:	dcc00317 	ldw	r19,12(sp)
 100606c:	dc800217 	ldw	r18,8(sp)
 1006070:	dc400117 	ldw	r17,4(sp)
 1006074:	dc000017 	ldw	r16,0(sp)
 1006078:	dec00504 	addi	sp,sp,20
 100607c:	f800283a 	ret
 1006080:	10073bc0 	call	10073bc <_calloc_r>
 1006084:	1007883a 	mov	r3,r2
 1006088:	0021883a 	mov	r16,zero
 100608c:	98801315 	stw	r2,76(r19)
 1006090:	103fe41e 	bne	r2,zero,1006024 <_Balloc+0x30>
 1006094:	003ff206 	br	1006060 <_Balloc+0x6c>
 1006098:	10073bc0 	call	10073bc <_calloc_r>
 100609c:	103ff026 	beq	r2,zero,1006060 <_Balloc+0x6c>
 10060a0:	1021883a 	mov	r16,r2
 10060a4:	14800115 	stw	r18,4(r2)
 10060a8:	14400215 	stw	r17,8(r2)
 10060ac:	003fea06 	br	1006058 <_Balloc+0x64>

010060b0 <__d2b>:
 10060b0:	defff504 	addi	sp,sp,-44
 10060b4:	dcc00515 	stw	r19,20(sp)
 10060b8:	04c00044 	movi	r19,1
 10060bc:	dc000215 	stw	r16,8(sp)
 10060c0:	2821883a 	mov	r16,r5
 10060c4:	980b883a 	mov	r5,r19
 10060c8:	ddc00915 	stw	r23,36(sp)
 10060cc:	dd800815 	stw	r22,32(sp)
 10060d0:	dd400715 	stw	r21,28(sp)
 10060d4:	dd000615 	stw	r20,24(sp)
 10060d8:	dc800415 	stw	r18,16(sp)
 10060dc:	dc400315 	stw	r17,12(sp)
 10060e0:	dfc00a15 	stw	ra,40(sp)
 10060e4:	3023883a 	mov	r17,r6
 10060e8:	382d883a 	mov	r22,r7
 10060ec:	ddc00b17 	ldw	r23,44(sp)
 10060f0:	1005ff40 	call	1005ff4 <_Balloc>
 10060f4:	1025883a 	mov	r18,r2
 10060f8:	00a00034 	movhi	r2,32768
 10060fc:	10bfffc4 	addi	r2,r2,-1
 1006100:	8888703a 	and	r4,r17,r2
 1006104:	202ad53a 	srli	r21,r4,20
 1006108:	00800434 	movhi	r2,16
 100610c:	10bfffc4 	addi	r2,r2,-1
 1006110:	8886703a 	and	r3,r17,r2
 1006114:	a829003a 	cmpeq	r20,r21,zero
 1006118:	800b883a 	mov	r5,r16
 100611c:	d8c00115 	stw	r3,4(sp)
 1006120:	94000504 	addi	r16,r18,20
 1006124:	a000021e 	bne	r20,zero,1006130 <__d2b+0x80>
 1006128:	18c00434 	orhi	r3,r3,16
 100612c:	d8c00115 	stw	r3,4(sp)
 1006130:	28002726 	beq	r5,zero,10061d0 <__d2b+0x120>
 1006134:	d809883a 	mov	r4,sp
 1006138:	d9400015 	stw	r5,0(sp)
 100613c:	1005b0c0 	call	1005b0c <__lo0bits>
 1006140:	100d883a 	mov	r6,r2
 1006144:	10003526 	beq	r2,zero,100621c <__d2b+0x16c>
 1006148:	d8c00117 	ldw	r3,4(sp)
 100614c:	00800804 	movi	r2,32
 1006150:	1185c83a 	sub	r2,r2,r6
 1006154:	d9000017 	ldw	r4,0(sp)
 1006158:	1886983a 	sll	r3,r3,r2
 100615c:	1906b03a 	or	r3,r3,r4
 1006160:	90c00515 	stw	r3,20(r18)
 1006164:	d8c00117 	ldw	r3,4(sp)
 1006168:	1986d83a 	srl	r3,r3,r6
 100616c:	d8c00115 	stw	r3,4(sp)
 1006170:	180b003a 	cmpeq	r5,r3,zero
 1006174:	00800084 	movi	r2,2
 1006178:	114bc83a 	sub	r5,r2,r5
 100617c:	80c00115 	stw	r3,4(r16)
 1006180:	91400415 	stw	r5,16(r18)
 1006184:	a0001a1e 	bne	r20,zero,10061f0 <__d2b+0x140>
 1006188:	3545883a 	add	r2,r6,r21
 100618c:	10bef344 	addi	r2,r2,-1075
 1006190:	00c00d44 	movi	r3,53
 1006194:	b0800015 	stw	r2,0(r22)
 1006198:	1987c83a 	sub	r3,r3,r6
 100619c:	b8c00015 	stw	r3,0(r23)
 10061a0:	9005883a 	mov	r2,r18
 10061a4:	dfc00a17 	ldw	ra,40(sp)
 10061a8:	ddc00917 	ldw	r23,36(sp)
 10061ac:	dd800817 	ldw	r22,32(sp)
 10061b0:	dd400717 	ldw	r21,28(sp)
 10061b4:	dd000617 	ldw	r20,24(sp)
 10061b8:	dcc00517 	ldw	r19,20(sp)
 10061bc:	dc800417 	ldw	r18,16(sp)
 10061c0:	dc400317 	ldw	r17,12(sp)
 10061c4:	dc000217 	ldw	r16,8(sp)
 10061c8:	dec00b04 	addi	sp,sp,44
 10061cc:	f800283a 	ret
 10061d0:	d9000104 	addi	r4,sp,4
 10061d4:	1005b0c0 	call	1005b0c <__lo0bits>
 10061d8:	11800804 	addi	r6,r2,32
 10061dc:	d8800117 	ldw	r2,4(sp)
 10061e0:	94c00415 	stw	r19,16(r18)
 10061e4:	980b883a 	mov	r5,r19
 10061e8:	90800515 	stw	r2,20(r18)
 10061ec:	a03fe626 	beq	r20,zero,1006188 <__d2b+0xd8>
 10061f0:	2945883a 	add	r2,r5,r5
 10061f4:	1085883a 	add	r2,r2,r2
 10061f8:	1405883a 	add	r2,r2,r16
 10061fc:	113fff17 	ldw	r4,-4(r2)
 1006200:	30fef384 	addi	r3,r6,-1074
 1006204:	2820917a 	slli	r16,r5,5
 1006208:	b0c00015 	stw	r3,0(r22)
 100620c:	1005a9c0 	call	1005a9c <__hi0bits>
 1006210:	80a1c83a 	sub	r16,r16,r2
 1006214:	bc000015 	stw	r16,0(r23)
 1006218:	003fe106 	br	10061a0 <__d2b+0xf0>
 100621c:	d8800017 	ldw	r2,0(sp)
 1006220:	90800515 	stw	r2,20(r18)
 1006224:	d8c00117 	ldw	r3,4(sp)
 1006228:	003fd106 	br	1006170 <__d2b+0xc0>

0100622c <__mdiff>:
 100622c:	defffb04 	addi	sp,sp,-20
 1006230:	dc000015 	stw	r16,0(sp)
 1006234:	2821883a 	mov	r16,r5
 1006238:	dc800215 	stw	r18,8(sp)
 100623c:	300b883a 	mov	r5,r6
 1006240:	2025883a 	mov	r18,r4
 1006244:	8009883a 	mov	r4,r16
 1006248:	dc400115 	stw	r17,4(sp)
 100624c:	dfc00415 	stw	ra,16(sp)
 1006250:	dcc00315 	stw	r19,12(sp)
 1006254:	3023883a 	mov	r17,r6
 1006258:	1005bd00 	call	1005bd0 <__mcmp>
 100625c:	10004226 	beq	r2,zero,1006368 <__mdiff+0x13c>
 1006260:	10005016 	blt	r2,zero,10063a4 <__mdiff+0x178>
 1006264:	0027883a 	mov	r19,zero
 1006268:	81400117 	ldw	r5,4(r16)
 100626c:	9009883a 	mov	r4,r18
 1006270:	1005ff40 	call	1005ff4 <_Balloc>
 1006274:	1019883a 	mov	r12,r2
 1006278:	82800417 	ldw	r10,16(r16)
 100627c:	88800417 	ldw	r2,16(r17)
 1006280:	81800504 	addi	r6,r16,20
 1006284:	5287883a 	add	r3,r10,r10
 1006288:	1085883a 	add	r2,r2,r2
 100628c:	18c7883a 	add	r3,r3,r3
 1006290:	1085883a 	add	r2,r2,r2
 1006294:	8a000504 	addi	r8,r17,20
 1006298:	64c00315 	stw	r19,12(r12)
 100629c:	30db883a 	add	r13,r6,r3
 10062a0:	4097883a 	add	r11,r8,r2
 10062a4:	61c00504 	addi	r7,r12,20
 10062a8:	0013883a 	mov	r9,zero
 10062ac:	31000017 	ldw	r4,0(r6)
 10062b0:	41400017 	ldw	r5,0(r8)
 10062b4:	42000104 	addi	r8,r8,4
 10062b8:	20bfffcc 	andi	r2,r4,65535
 10062bc:	28ffffcc 	andi	r3,r5,65535
 10062c0:	10c5c83a 	sub	r2,r2,r3
 10062c4:	1245883a 	add	r2,r2,r9
 10062c8:	2008d43a 	srli	r4,r4,16
 10062cc:	280ad43a 	srli	r5,r5,16
 10062d0:	1007d43a 	srai	r3,r2,16
 10062d4:	3880000d 	sth	r2,0(r7)
 10062d8:	2149c83a 	sub	r4,r4,r5
 10062dc:	20c9883a 	add	r4,r4,r3
 10062e0:	3900008d 	sth	r4,2(r7)
 10062e4:	31800104 	addi	r6,r6,4
 10062e8:	39c00104 	addi	r7,r7,4
 10062ec:	2013d43a 	srai	r9,r4,16
 10062f0:	42ffee36 	bltu	r8,r11,10062ac <__mdiff+0x80>
 10062f4:	33400c2e 	bgeu	r6,r13,1006328 <__mdiff+0xfc>
 10062f8:	30800017 	ldw	r2,0(r6)
 10062fc:	31800104 	addi	r6,r6,4
 1006300:	10ffffcc 	andi	r3,r2,65535
 1006304:	1a47883a 	add	r3,r3,r9
 1006308:	1004d43a 	srli	r2,r2,16
 100630c:	1809d43a 	srai	r4,r3,16
 1006310:	38c0000d 	sth	r3,0(r7)
 1006314:	1105883a 	add	r2,r2,r4
 1006318:	3880008d 	sth	r2,2(r7)
 100631c:	1013d43a 	srai	r9,r2,16
 1006320:	39c00104 	addi	r7,r7,4
 1006324:	337ff436 	bltu	r6,r13,10062f8 <__mdiff+0xcc>
 1006328:	38bfff17 	ldw	r2,-4(r7)
 100632c:	38ffff04 	addi	r3,r7,-4
 1006330:	1000041e 	bne	r2,zero,1006344 <__mdiff+0x118>
 1006334:	18ffff04 	addi	r3,r3,-4
 1006338:	18800017 	ldw	r2,0(r3)
 100633c:	52bfffc4 	addi	r10,r10,-1
 1006340:	103ffc26 	beq	r2,zero,1006334 <__mdiff+0x108>
 1006344:	6005883a 	mov	r2,r12
 1006348:	62800415 	stw	r10,16(r12)
 100634c:	dfc00417 	ldw	ra,16(sp)
 1006350:	dcc00317 	ldw	r19,12(sp)
 1006354:	dc800217 	ldw	r18,8(sp)
 1006358:	dc400117 	ldw	r17,4(sp)
 100635c:	dc000017 	ldw	r16,0(sp)
 1006360:	dec00504 	addi	sp,sp,20
 1006364:	f800283a 	ret
 1006368:	9009883a 	mov	r4,r18
 100636c:	000b883a 	mov	r5,zero
 1006370:	1005ff40 	call	1005ff4 <_Balloc>
 1006374:	1019883a 	mov	r12,r2
 1006378:	00800044 	movi	r2,1
 100637c:	60800415 	stw	r2,16(r12)
 1006380:	6005883a 	mov	r2,r12
 1006384:	60000515 	stw	zero,20(r12)
 1006388:	dfc00417 	ldw	ra,16(sp)
 100638c:	dcc00317 	ldw	r19,12(sp)
 1006390:	dc800217 	ldw	r18,8(sp)
 1006394:	dc400117 	ldw	r17,4(sp)
 1006398:	dc000017 	ldw	r16,0(sp)
 100639c:	dec00504 	addi	sp,sp,20
 10063a0:	f800283a 	ret
 10063a4:	880d883a 	mov	r6,r17
 10063a8:	04c00044 	movi	r19,1
 10063ac:	8023883a 	mov	r17,r16
 10063b0:	3021883a 	mov	r16,r6
 10063b4:	003fac06 	br	1006268 <__mdiff+0x3c>

010063b8 <__lshift>:
 10063b8:	defff904 	addi	sp,sp,-28
 10063bc:	28800417 	ldw	r2,16(r5)
 10063c0:	dc000015 	stw	r16,0(sp)
 10063c4:	3021d17a 	srai	r16,r6,5
 10063c8:	28c00217 	ldw	r3,8(r5)
 10063cc:	10800044 	addi	r2,r2,1
 10063d0:	dc400115 	stw	r17,4(sp)
 10063d4:	80a3883a 	add	r17,r16,r2
 10063d8:	dd400515 	stw	r21,20(sp)
 10063dc:	dd000415 	stw	r20,16(sp)
 10063e0:	dc800215 	stw	r18,8(sp)
 10063e4:	dfc00615 	stw	ra,24(sp)
 10063e8:	2825883a 	mov	r18,r5
 10063ec:	dcc00315 	stw	r19,12(sp)
 10063f0:	3029883a 	mov	r20,r6
 10063f4:	202b883a 	mov	r21,r4
 10063f8:	29400117 	ldw	r5,4(r5)
 10063fc:	1c40030e 	bge	r3,r17,100640c <__lshift+0x54>
 1006400:	18c7883a 	add	r3,r3,r3
 1006404:	29400044 	addi	r5,r5,1
 1006408:	1c7ffd16 	blt	r3,r17,1006400 <__lshift+0x48>
 100640c:	a809883a 	mov	r4,r21
 1006410:	1005ff40 	call	1005ff4 <_Balloc>
 1006414:	1027883a 	mov	r19,r2
 1006418:	11400504 	addi	r5,r2,20
 100641c:	0400090e 	bge	zero,r16,1006444 <__lshift+0x8c>
 1006420:	2805883a 	mov	r2,r5
 1006424:	0007883a 	mov	r3,zero
 1006428:	18c00044 	addi	r3,r3,1
 100642c:	10000015 	stw	zero,0(r2)
 1006430:	10800104 	addi	r2,r2,4
 1006434:	80fffc1e 	bne	r16,r3,1006428 <__lshift+0x70>
 1006438:	8405883a 	add	r2,r16,r16
 100643c:	1085883a 	add	r2,r2,r2
 1006440:	288b883a 	add	r5,r5,r2
 1006444:	90800417 	ldw	r2,16(r18)
 1006448:	91000504 	addi	r4,r18,20
 100644c:	a18007cc 	andi	r6,r20,31
 1006450:	1085883a 	add	r2,r2,r2
 1006454:	1085883a 	add	r2,r2,r2
 1006458:	208f883a 	add	r7,r4,r2
 100645c:	30001e26 	beq	r6,zero,10064d8 <__lshift+0x120>
 1006460:	00800804 	movi	r2,32
 1006464:	1191c83a 	sub	r8,r2,r6
 1006468:	0007883a 	mov	r3,zero
 100646c:	20800017 	ldw	r2,0(r4)
 1006470:	1184983a 	sll	r2,r2,r6
 1006474:	1884b03a 	or	r2,r3,r2
 1006478:	28800015 	stw	r2,0(r5)
 100647c:	20c00017 	ldw	r3,0(r4)
 1006480:	21000104 	addi	r4,r4,4
 1006484:	29400104 	addi	r5,r5,4
 1006488:	1a06d83a 	srl	r3,r3,r8
 100648c:	21fff736 	bltu	r4,r7,100646c <__lshift+0xb4>
 1006490:	28c00015 	stw	r3,0(r5)
 1006494:	18000126 	beq	r3,zero,100649c <__lshift+0xe4>
 1006498:	8c400044 	addi	r17,r17,1
 100649c:	88bfffc4 	addi	r2,r17,-1
 10064a0:	98800415 	stw	r2,16(r19)
 10064a4:	a809883a 	mov	r4,r21
 10064a8:	900b883a 	mov	r5,r18
 10064ac:	1005a740 	call	1005a74 <_Bfree>
 10064b0:	9805883a 	mov	r2,r19
 10064b4:	dfc00617 	ldw	ra,24(sp)
 10064b8:	dd400517 	ldw	r21,20(sp)
 10064bc:	dd000417 	ldw	r20,16(sp)
 10064c0:	dcc00317 	ldw	r19,12(sp)
 10064c4:	dc800217 	ldw	r18,8(sp)
 10064c8:	dc400117 	ldw	r17,4(sp)
 10064cc:	dc000017 	ldw	r16,0(sp)
 10064d0:	dec00704 	addi	sp,sp,28
 10064d4:	f800283a 	ret
 10064d8:	20800017 	ldw	r2,0(r4)
 10064dc:	21000104 	addi	r4,r4,4
 10064e0:	28800015 	stw	r2,0(r5)
 10064e4:	29400104 	addi	r5,r5,4
 10064e8:	21ffec2e 	bgeu	r4,r7,100649c <__lshift+0xe4>
 10064ec:	20800017 	ldw	r2,0(r4)
 10064f0:	21000104 	addi	r4,r4,4
 10064f4:	28800015 	stw	r2,0(r5)
 10064f8:	29400104 	addi	r5,r5,4
 10064fc:	21fff636 	bltu	r4,r7,10064d8 <__lshift+0x120>
 1006500:	003fe606 	br	100649c <__lshift+0xe4>

01006504 <__multiply>:
 1006504:	defff904 	addi	sp,sp,-28
 1006508:	dcc00315 	stw	r19,12(sp)
 100650c:	dc800215 	stw	r18,8(sp)
 1006510:	2cc00417 	ldw	r19,16(r5)
 1006514:	34800417 	ldw	r18,16(r6)
 1006518:	dd000415 	stw	r20,16(sp)
 100651c:	dc400115 	stw	r17,4(sp)
 1006520:	dfc00615 	stw	ra,24(sp)
 1006524:	dd400515 	stw	r21,20(sp)
 1006528:	dc000015 	stw	r16,0(sp)
 100652c:	2823883a 	mov	r17,r5
 1006530:	3029883a 	mov	r20,r6
 1006534:	9c80040e 	bge	r19,r18,1006548 <__multiply+0x44>
 1006538:	9027883a 	mov	r19,r18
 100653c:	2c800417 	ldw	r18,16(r5)
 1006540:	2829883a 	mov	r20,r5
 1006544:	3023883a 	mov	r17,r6
 1006548:	88800217 	ldw	r2,8(r17)
 100654c:	9ca1883a 	add	r16,r19,r18
 1006550:	89400117 	ldw	r5,4(r17)
 1006554:	1400010e 	bge	r2,r16,100655c <__multiply+0x58>
 1006558:	29400044 	addi	r5,r5,1
 100655c:	1005ff40 	call	1005ff4 <_Balloc>
 1006560:	102b883a 	mov	r21,r2
 1006564:	8405883a 	add	r2,r16,r16
 1006568:	1085883a 	add	r2,r2,r2
 100656c:	a9000504 	addi	r4,r21,20
 1006570:	209d883a 	add	r14,r4,r2
 1006574:	2380042e 	bgeu	r4,r14,1006588 <__multiply+0x84>
 1006578:	2005883a 	mov	r2,r4
 100657c:	10000015 	stw	zero,0(r2)
 1006580:	10800104 	addi	r2,r2,4
 1006584:	13bffd36 	bltu	r2,r14,100657c <__multiply+0x78>
 1006588:	9485883a 	add	r2,r18,r18
 100658c:	9cc7883a 	add	r3,r19,r19
 1006590:	a1800504 	addi	r6,r20,20
 1006594:	1085883a 	add	r2,r2,r2
 1006598:	8b400504 	addi	r13,r17,20
 100659c:	18c7883a 	add	r3,r3,r3
 10065a0:	309f883a 	add	r15,r6,r2
 10065a4:	68d7883a 	add	r11,r13,r3
 10065a8:	33c03b2e 	bgeu	r6,r15,1006698 <__multiply+0x194>
 10065ac:	2019883a 	mov	r12,r4
 10065b0:	30800017 	ldw	r2,0(r6)
 10065b4:	127fffcc 	andi	r9,r2,65535
 10065b8:	48001826 	beq	r9,zero,100661c <__multiply+0x118>
 10065bc:	6811883a 	mov	r8,r13
 10065c0:	600f883a 	mov	r7,r12
 10065c4:	0015883a 	mov	r10,zero
 10065c8:	40c00017 	ldw	r3,0(r8)
 10065cc:	39400017 	ldw	r5,0(r7)
 10065d0:	42000104 	addi	r8,r8,4
 10065d4:	193fffcc 	andi	r4,r3,65535
 10065d8:	4909383a 	mul	r4,r9,r4
 10065dc:	1806d43a 	srli	r3,r3,16
 10065e0:	28bfffcc 	andi	r2,r5,65535
 10065e4:	5085883a 	add	r2,r10,r2
 10065e8:	2089883a 	add	r4,r4,r2
 10065ec:	48c7383a 	mul	r3,r9,r3
 10065f0:	280ad43a 	srli	r5,r5,16
 10065f4:	2004d43a 	srli	r2,r4,16
 10065f8:	3900000d 	sth	r4,0(r7)
 10065fc:	1947883a 	add	r3,r3,r5
 1006600:	10c5883a 	add	r2,r2,r3
 1006604:	3880008d 	sth	r2,2(r7)
 1006608:	1014d43a 	srli	r10,r2,16
 100660c:	39c00104 	addi	r7,r7,4
 1006610:	42ffed36 	bltu	r8,r11,10065c8 <__multiply+0xc4>
 1006614:	3a800015 	stw	r10,0(r7)
 1006618:	30800017 	ldw	r2,0(r6)
 100661c:	1012d43a 	srli	r9,r2,16
 1006620:	48001926 	beq	r9,zero,1006688 <__multiply+0x184>
 1006624:	60800017 	ldw	r2,0(r12)
 1006628:	6811883a 	mov	r8,r13
 100662c:	600f883a 	mov	r7,r12
 1006630:	0015883a 	mov	r10,zero
 1006634:	100b883a 	mov	r5,r2
 1006638:	41000017 	ldw	r4,0(r8)
 100663c:	2806d43a 	srli	r3,r5,16
 1006640:	3880000d 	sth	r2,0(r7)
 1006644:	20bfffcc 	andi	r2,r4,65535
 1006648:	4885383a 	mul	r2,r9,r2
 100664c:	50c7883a 	add	r3,r10,r3
 1006650:	2008d43a 	srli	r4,r4,16
 1006654:	10c5883a 	add	r2,r2,r3
 1006658:	3880008d 	sth	r2,2(r7)
 100665c:	39c00104 	addi	r7,r7,4
 1006660:	39400017 	ldw	r5,0(r7)
 1006664:	4909383a 	mul	r4,r9,r4
 1006668:	1004d43a 	srli	r2,r2,16
 100666c:	28ffffcc 	andi	r3,r5,65535
 1006670:	20c9883a 	add	r4,r4,r3
 1006674:	1105883a 	add	r2,r2,r4
 1006678:	42000104 	addi	r8,r8,4
 100667c:	1014d43a 	srli	r10,r2,16
 1006680:	42ffed36 	bltu	r8,r11,1006638 <__multiply+0x134>
 1006684:	38800015 	stw	r2,0(r7)
 1006688:	31800104 	addi	r6,r6,4
 100668c:	33c0022e 	bgeu	r6,r15,1006698 <__multiply+0x194>
 1006690:	63000104 	addi	r12,r12,4
 1006694:	003fc606 	br	10065b0 <__multiply+0xac>
 1006698:	0400090e 	bge	zero,r16,10066c0 <__multiply+0x1bc>
 100669c:	70bfff17 	ldw	r2,-4(r14)
 10066a0:	70ffff04 	addi	r3,r14,-4
 10066a4:	10000326 	beq	r2,zero,10066b4 <__multiply+0x1b0>
 10066a8:	00000506 	br	10066c0 <__multiply+0x1bc>
 10066ac:	18800017 	ldw	r2,0(r3)
 10066b0:	1000031e 	bne	r2,zero,10066c0 <__multiply+0x1bc>
 10066b4:	843fffc4 	addi	r16,r16,-1
 10066b8:	18ffff04 	addi	r3,r3,-4
 10066bc:	803ffb1e 	bne	r16,zero,10066ac <__multiply+0x1a8>
 10066c0:	a805883a 	mov	r2,r21
 10066c4:	ac000415 	stw	r16,16(r21)
 10066c8:	dfc00617 	ldw	ra,24(sp)
 10066cc:	dd400517 	ldw	r21,20(sp)
 10066d0:	dd000417 	ldw	r20,16(sp)
 10066d4:	dcc00317 	ldw	r19,12(sp)
 10066d8:	dc800217 	ldw	r18,8(sp)
 10066dc:	dc400117 	ldw	r17,4(sp)
 10066e0:	dc000017 	ldw	r16,0(sp)
 10066e4:	dec00704 	addi	sp,sp,28
 10066e8:	f800283a 	ret

010066ec <__i2b>:
 10066ec:	defffd04 	addi	sp,sp,-12
 10066f0:	dc000015 	stw	r16,0(sp)
 10066f4:	04000044 	movi	r16,1
 10066f8:	dc800115 	stw	r18,4(sp)
 10066fc:	2825883a 	mov	r18,r5
 1006700:	800b883a 	mov	r5,r16
 1006704:	dfc00215 	stw	ra,8(sp)
 1006708:	1005ff40 	call	1005ff4 <_Balloc>
 100670c:	14000415 	stw	r16,16(r2)
 1006710:	14800515 	stw	r18,20(r2)
 1006714:	dfc00217 	ldw	ra,8(sp)
 1006718:	dc800117 	ldw	r18,4(sp)
 100671c:	dc000017 	ldw	r16,0(sp)
 1006720:	dec00304 	addi	sp,sp,12
 1006724:	f800283a 	ret

01006728 <__multadd>:
 1006728:	defffa04 	addi	sp,sp,-24
 100672c:	dc800215 	stw	r18,8(sp)
 1006730:	2c800417 	ldw	r18,16(r5)
 1006734:	dd000415 	stw	r20,16(sp)
 1006738:	dcc00315 	stw	r19,12(sp)
 100673c:	dc000015 	stw	r16,0(sp)
 1006740:	dfc00515 	stw	ra,20(sp)
 1006744:	3821883a 	mov	r16,r7
 1006748:	dc400115 	stw	r17,4(sp)
 100674c:	2827883a 	mov	r19,r5
 1006750:	2029883a 	mov	r20,r4
 1006754:	2a000504 	addi	r8,r5,20
 1006758:	000f883a 	mov	r7,zero
 100675c:	40800017 	ldw	r2,0(r8)
 1006760:	39c00044 	addi	r7,r7,1
 1006764:	10ffffcc 	andi	r3,r2,65535
 1006768:	1987383a 	mul	r3,r3,r6
 100676c:	1004d43a 	srli	r2,r2,16
 1006770:	1c07883a 	add	r3,r3,r16
 1006774:	180ad43a 	srli	r5,r3,16
 1006778:	1185383a 	mul	r2,r2,r6
 100677c:	18ffffcc 	andi	r3,r3,65535
 1006780:	1145883a 	add	r2,r2,r5
 1006784:	1008943a 	slli	r4,r2,16
 1006788:	1020d43a 	srli	r16,r2,16
 100678c:	20c9883a 	add	r4,r4,r3
 1006790:	41000015 	stw	r4,0(r8)
 1006794:	42000104 	addi	r8,r8,4
 1006798:	3cbff016 	blt	r7,r18,100675c <__multadd+0x34>
 100679c:	80000826 	beq	r16,zero,10067c0 <__multadd+0x98>
 10067a0:	98800217 	ldw	r2,8(r19)
 10067a4:	90800f0e 	bge	r18,r2,10067e4 <__multadd+0xbc>
 10067a8:	9485883a 	add	r2,r18,r18
 10067ac:	1085883a 	add	r2,r2,r2
 10067b0:	14c5883a 	add	r2,r2,r19
 10067b4:	90c00044 	addi	r3,r18,1
 10067b8:	14000515 	stw	r16,20(r2)
 10067bc:	98c00415 	stw	r3,16(r19)
 10067c0:	9805883a 	mov	r2,r19
 10067c4:	dfc00517 	ldw	ra,20(sp)
 10067c8:	dd000417 	ldw	r20,16(sp)
 10067cc:	dcc00317 	ldw	r19,12(sp)
 10067d0:	dc800217 	ldw	r18,8(sp)
 10067d4:	dc400117 	ldw	r17,4(sp)
 10067d8:	dc000017 	ldw	r16,0(sp)
 10067dc:	dec00604 	addi	sp,sp,24
 10067e0:	f800283a 	ret
 10067e4:	99400117 	ldw	r5,4(r19)
 10067e8:	a009883a 	mov	r4,r20
 10067ec:	29400044 	addi	r5,r5,1
 10067f0:	1005ff40 	call	1005ff4 <_Balloc>
 10067f4:	99800417 	ldw	r6,16(r19)
 10067f8:	99400304 	addi	r5,r19,12
 10067fc:	11000304 	addi	r4,r2,12
 1006800:	318d883a 	add	r6,r6,r6
 1006804:	318d883a 	add	r6,r6,r6
 1006808:	31800204 	addi	r6,r6,8
 100680c:	1023883a 	mov	r17,r2
 1006810:	100585c0 	call	100585c <memcpy>
 1006814:	980b883a 	mov	r5,r19
 1006818:	a009883a 	mov	r4,r20
 100681c:	1005a740 	call	1005a74 <_Bfree>
 1006820:	8827883a 	mov	r19,r17
 1006824:	003fe006 	br	10067a8 <__multadd+0x80>

01006828 <__pow5mult>:
 1006828:	defffa04 	addi	sp,sp,-24
 100682c:	308000cc 	andi	r2,r6,3
 1006830:	dd000415 	stw	r20,16(sp)
 1006834:	dcc00315 	stw	r19,12(sp)
 1006838:	dc000015 	stw	r16,0(sp)
 100683c:	dfc00515 	stw	ra,20(sp)
 1006840:	dc800215 	stw	r18,8(sp)
 1006844:	dc400115 	stw	r17,4(sp)
 1006848:	3021883a 	mov	r16,r6
 100684c:	2027883a 	mov	r19,r4
 1006850:	2829883a 	mov	r20,r5
 1006854:	10002b1e 	bne	r2,zero,1006904 <__pow5mult+0xdc>
 1006858:	8025d0ba 	srai	r18,r16,2
 100685c:	90001b26 	beq	r18,zero,10068cc <__pow5mult+0xa4>
 1006860:	9c001217 	ldw	r16,72(r19)
 1006864:	8000081e 	bne	r16,zero,1006888 <__pow5mult+0x60>
 1006868:	00003006 	br	100692c <__pow5mult+0x104>
 100686c:	800b883a 	mov	r5,r16
 1006870:	800d883a 	mov	r6,r16
 1006874:	9809883a 	mov	r4,r19
 1006878:	90001426 	beq	r18,zero,10068cc <__pow5mult+0xa4>
 100687c:	80800017 	ldw	r2,0(r16)
 1006880:	10001b26 	beq	r2,zero,10068f0 <__pow5mult+0xc8>
 1006884:	1021883a 	mov	r16,r2
 1006888:	9080004c 	andi	r2,r18,1
 100688c:	1005003a 	cmpeq	r2,r2,zero
 1006890:	9025d07a 	srai	r18,r18,1
 1006894:	800d883a 	mov	r6,r16
 1006898:	9809883a 	mov	r4,r19
 100689c:	a00b883a 	mov	r5,r20
 10068a0:	103ff21e 	bne	r2,zero,100686c <__pow5mult+0x44>
 10068a4:	10065040 	call	1006504 <__multiply>
 10068a8:	a00b883a 	mov	r5,r20
 10068ac:	9809883a 	mov	r4,r19
 10068b0:	1023883a 	mov	r17,r2
 10068b4:	1005a740 	call	1005a74 <_Bfree>
 10068b8:	8829883a 	mov	r20,r17
 10068bc:	800b883a 	mov	r5,r16
 10068c0:	800d883a 	mov	r6,r16
 10068c4:	9809883a 	mov	r4,r19
 10068c8:	903fec1e 	bne	r18,zero,100687c <__pow5mult+0x54>
 10068cc:	a005883a 	mov	r2,r20
 10068d0:	dfc00517 	ldw	ra,20(sp)
 10068d4:	dd000417 	ldw	r20,16(sp)
 10068d8:	dcc00317 	ldw	r19,12(sp)
 10068dc:	dc800217 	ldw	r18,8(sp)
 10068e0:	dc400117 	ldw	r17,4(sp)
 10068e4:	dc000017 	ldw	r16,0(sp)
 10068e8:	dec00604 	addi	sp,sp,24
 10068ec:	f800283a 	ret
 10068f0:	10065040 	call	1006504 <__multiply>
 10068f4:	80800015 	stw	r2,0(r16)
 10068f8:	1021883a 	mov	r16,r2
 10068fc:	10000015 	stw	zero,0(r2)
 1006900:	003fe106 	br	1006888 <__pow5mult+0x60>
 1006904:	1085883a 	add	r2,r2,r2
 1006908:	00c04074 	movhi	r3,257
 100690c:	18f37804 	addi	r3,r3,-12832
 1006910:	1085883a 	add	r2,r2,r2
 1006914:	10c5883a 	add	r2,r2,r3
 1006918:	11bfff17 	ldw	r6,-4(r2)
 100691c:	000f883a 	mov	r7,zero
 1006920:	10067280 	call	1006728 <__multadd>
 1006924:	1029883a 	mov	r20,r2
 1006928:	003fcb06 	br	1006858 <__pow5mult+0x30>
 100692c:	9809883a 	mov	r4,r19
 1006930:	01409c44 	movi	r5,625
 1006934:	10066ec0 	call	10066ec <__i2b>
 1006938:	98801215 	stw	r2,72(r19)
 100693c:	1021883a 	mov	r16,r2
 1006940:	10000015 	stw	zero,0(r2)
 1006944:	003fd006 	br	1006888 <__pow5mult+0x60>

01006948 <__s2b>:
 1006948:	defff904 	addi	sp,sp,-28
 100694c:	dcc00315 	stw	r19,12(sp)
 1006950:	dc800215 	stw	r18,8(sp)
 1006954:	2827883a 	mov	r19,r5
 1006958:	2025883a 	mov	r18,r4
 100695c:	01400244 	movi	r5,9
 1006960:	39000204 	addi	r4,r7,8
 1006964:	dd000415 	stw	r20,16(sp)
 1006968:	dc400115 	stw	r17,4(sp)
 100696c:	dfc00615 	stw	ra,24(sp)
 1006970:	dd400515 	stw	r21,20(sp)
 1006974:	dc000015 	stw	r16,0(sp)
 1006978:	3829883a 	mov	r20,r7
 100697c:	3023883a 	mov	r17,r6
 1006980:	100950c0 	call	100950c <__divsi3>
 1006984:	00c00044 	movi	r3,1
 1006988:	1880350e 	bge	r3,r2,1006a60 <__s2b+0x118>
 100698c:	000b883a 	mov	r5,zero
 1006990:	18c7883a 	add	r3,r3,r3
 1006994:	29400044 	addi	r5,r5,1
 1006998:	18bffd16 	blt	r3,r2,1006990 <__s2b+0x48>
 100699c:	9009883a 	mov	r4,r18
 10069a0:	1005ff40 	call	1005ff4 <_Balloc>
 10069a4:	1011883a 	mov	r8,r2
 10069a8:	d8800717 	ldw	r2,28(sp)
 10069ac:	00c00044 	movi	r3,1
 10069b0:	01800244 	movi	r6,9
 10069b4:	40800515 	stw	r2,20(r8)
 10069b8:	40c00415 	stw	r3,16(r8)
 10069bc:	3440260e 	bge	r6,r17,1006a58 <__s2b+0x110>
 10069c0:	3021883a 	mov	r16,r6
 10069c4:	99ab883a 	add	r21,r19,r6
 10069c8:	9c05883a 	add	r2,r19,r16
 10069cc:	11c00007 	ldb	r7,0(r2)
 10069d0:	400b883a 	mov	r5,r8
 10069d4:	9009883a 	mov	r4,r18
 10069d8:	39fff404 	addi	r7,r7,-48
 10069dc:	01800284 	movi	r6,10
 10069e0:	10067280 	call	1006728 <__multadd>
 10069e4:	84000044 	addi	r16,r16,1
 10069e8:	1011883a 	mov	r8,r2
 10069ec:	8c3ff61e 	bne	r17,r16,10069c8 <__s2b+0x80>
 10069f0:	ac45883a 	add	r2,r21,r17
 10069f4:	117ffe04 	addi	r5,r2,-8
 10069f8:	880d883a 	mov	r6,r17
 10069fc:	35000c0e 	bge	r6,r20,1006a30 <__s2b+0xe8>
 1006a00:	a185c83a 	sub	r2,r20,r6
 1006a04:	2821883a 	mov	r16,r5
 1006a08:	28a3883a 	add	r17,r5,r2
 1006a0c:	81c00007 	ldb	r7,0(r16)
 1006a10:	400b883a 	mov	r5,r8
 1006a14:	9009883a 	mov	r4,r18
 1006a18:	39fff404 	addi	r7,r7,-48
 1006a1c:	01800284 	movi	r6,10
 1006a20:	10067280 	call	1006728 <__multadd>
 1006a24:	84000044 	addi	r16,r16,1
 1006a28:	1011883a 	mov	r8,r2
 1006a2c:	847ff71e 	bne	r16,r17,1006a0c <__s2b+0xc4>
 1006a30:	4005883a 	mov	r2,r8
 1006a34:	dfc00617 	ldw	ra,24(sp)
 1006a38:	dd400517 	ldw	r21,20(sp)
 1006a3c:	dd000417 	ldw	r20,16(sp)
 1006a40:	dcc00317 	ldw	r19,12(sp)
 1006a44:	dc800217 	ldw	r18,8(sp)
 1006a48:	dc400117 	ldw	r17,4(sp)
 1006a4c:	dc000017 	ldw	r16,0(sp)
 1006a50:	dec00704 	addi	sp,sp,28
 1006a54:	f800283a 	ret
 1006a58:	99400284 	addi	r5,r19,10
 1006a5c:	003fe706 	br	10069fc <__s2b+0xb4>
 1006a60:	000b883a 	mov	r5,zero
 1006a64:	003fcd06 	br	100699c <__s2b+0x54>

01006a68 <_realloc_r>:
 1006a68:	defff404 	addi	sp,sp,-48
 1006a6c:	dd800815 	stw	r22,32(sp)
 1006a70:	dc800415 	stw	r18,16(sp)
 1006a74:	dc400315 	stw	r17,12(sp)
 1006a78:	dfc00b15 	stw	ra,44(sp)
 1006a7c:	df000a15 	stw	fp,40(sp)
 1006a80:	ddc00915 	stw	r23,36(sp)
 1006a84:	dd400715 	stw	r21,28(sp)
 1006a88:	dd000615 	stw	r20,24(sp)
 1006a8c:	dcc00515 	stw	r19,20(sp)
 1006a90:	dc000215 	stw	r16,8(sp)
 1006a94:	2825883a 	mov	r18,r5
 1006a98:	3023883a 	mov	r17,r6
 1006a9c:	202d883a 	mov	r22,r4
 1006aa0:	2800c926 	beq	r5,zero,1006dc8 <_realloc_r+0x360>
 1006aa4:	100a28c0 	call	100a28c <__malloc_lock>
 1006aa8:	943ffe04 	addi	r16,r18,-8
 1006aac:	88c002c4 	addi	r3,r17,11
 1006ab0:	00800584 	movi	r2,22
 1006ab4:	82000117 	ldw	r8,4(r16)
 1006ab8:	10c01b2e 	bgeu	r2,r3,1006b28 <_realloc_r+0xc0>
 1006abc:	00bffe04 	movi	r2,-8
 1006ac0:	188e703a 	and	r7,r3,r2
 1006ac4:	3839883a 	mov	fp,r7
 1006ac8:	38001a16 	blt	r7,zero,1006b34 <_realloc_r+0xcc>
 1006acc:	e4401936 	bltu	fp,r17,1006b34 <_realloc_r+0xcc>
 1006ad0:	013fff04 	movi	r4,-4
 1006ad4:	4126703a 	and	r19,r8,r4
 1006ad8:	99c02616 	blt	r19,r7,1006b74 <_realloc_r+0x10c>
 1006adc:	802b883a 	mov	r21,r16
 1006ae0:	9829883a 	mov	r20,r19
 1006ae4:	84000204 	addi	r16,r16,8
 1006ae8:	a80f883a 	mov	r7,r21
 1006aec:	a70dc83a 	sub	r6,r20,fp
 1006af0:	008003c4 	movi	r2,15
 1006af4:	1180c136 	bltu	r2,r6,1006dfc <_realloc_r+0x394>
 1006af8:	38800117 	ldw	r2,4(r7)
 1006afc:	a549883a 	add	r4,r20,r21
 1006b00:	1080004c 	andi	r2,r2,1
 1006b04:	a084b03a 	or	r2,r20,r2
 1006b08:	38800115 	stw	r2,4(r7)
 1006b0c:	20c00117 	ldw	r3,4(r4)
 1006b10:	18c00054 	ori	r3,r3,1
 1006b14:	20c00115 	stw	r3,4(r4)
 1006b18:	b009883a 	mov	r4,r22
 1006b1c:	100a2ac0 	call	100a2ac <__malloc_unlock>
 1006b20:	8023883a 	mov	r17,r16
 1006b24:	00000606 	br	1006b40 <_realloc_r+0xd8>
 1006b28:	01c00404 	movi	r7,16
 1006b2c:	3839883a 	mov	fp,r7
 1006b30:	e47fe72e 	bgeu	fp,r17,1006ad0 <_realloc_r+0x68>
 1006b34:	00800304 	movi	r2,12
 1006b38:	0023883a 	mov	r17,zero
 1006b3c:	b0800015 	stw	r2,0(r22)
 1006b40:	8805883a 	mov	r2,r17
 1006b44:	dfc00b17 	ldw	ra,44(sp)
 1006b48:	df000a17 	ldw	fp,40(sp)
 1006b4c:	ddc00917 	ldw	r23,36(sp)
 1006b50:	dd800817 	ldw	r22,32(sp)
 1006b54:	dd400717 	ldw	r21,28(sp)
 1006b58:	dd000617 	ldw	r20,24(sp)
 1006b5c:	dcc00517 	ldw	r19,20(sp)
 1006b60:	dc800417 	ldw	r18,16(sp)
 1006b64:	dc400317 	ldw	r17,12(sp)
 1006b68:	dc000217 	ldw	r16,8(sp)
 1006b6c:	dec00c04 	addi	sp,sp,48
 1006b70:	f800283a 	ret
 1006b74:	00804074 	movhi	r2,257
 1006b78:	10b4dc04 	addi	r2,r2,-11408
 1006b7c:	12400217 	ldw	r9,8(r2)
 1006b80:	84cd883a 	add	r6,r16,r19
 1006b84:	802b883a 	mov	r21,r16
 1006b88:	3240b926 	beq	r6,r9,1006e70 <_realloc_r+0x408>
 1006b8c:	31400117 	ldw	r5,4(r6)
 1006b90:	00bfff84 	movi	r2,-2
 1006b94:	2884703a 	and	r2,r5,r2
 1006b98:	1185883a 	add	r2,r2,r6
 1006b9c:	10c00117 	ldw	r3,4(r2)
 1006ba0:	18c0004c 	andi	r3,r3,1
 1006ba4:	1807003a 	cmpeq	r3,r3,zero
 1006ba8:	1800a326 	beq	r3,zero,1006e38 <_realloc_r+0x3d0>
 1006bac:	2908703a 	and	r4,r5,r4
 1006bb0:	9929883a 	add	r20,r19,r4
 1006bb4:	a1c0a30e 	bge	r20,r7,1006e44 <_realloc_r+0x3dc>
 1006bb8:	4080004c 	andi	r2,r8,1
 1006bbc:	1000551e 	bne	r2,zero,1006d14 <_realloc_r+0x2ac>
 1006bc0:	80800017 	ldw	r2,0(r16)
 1006bc4:	80afc83a 	sub	r23,r16,r2
 1006bc8:	b8c00117 	ldw	r3,4(r23)
 1006bcc:	00bfff04 	movi	r2,-4
 1006bd0:	1884703a 	and	r2,r3,r2
 1006bd4:	30002e26 	beq	r6,zero,1006c90 <_realloc_r+0x228>
 1006bd8:	3240b926 	beq	r6,r9,1006ec0 <_realloc_r+0x458>
 1006bdc:	98a9883a 	add	r20,r19,r2
 1006be0:	2509883a 	add	r4,r4,r20
 1006be4:	d9000015 	stw	r4,0(sp)
 1006be8:	21c02a16 	blt	r4,r7,1006c94 <_realloc_r+0x22c>
 1006bec:	30800317 	ldw	r2,12(r6)
 1006bf0:	30c00217 	ldw	r3,8(r6)
 1006bf4:	01400904 	movi	r5,36
 1006bf8:	99bfff04 	addi	r6,r19,-4
 1006bfc:	18800315 	stw	r2,12(r3)
 1006c00:	10c00215 	stw	r3,8(r2)
 1006c04:	b9000317 	ldw	r4,12(r23)
 1006c08:	b8800217 	ldw	r2,8(r23)
 1006c0c:	b82b883a 	mov	r21,r23
 1006c10:	bc000204 	addi	r16,r23,8
 1006c14:	20800215 	stw	r2,8(r4)
 1006c18:	11000315 	stw	r4,12(r2)
 1006c1c:	2980e436 	bltu	r5,r6,1006fb0 <_realloc_r+0x548>
 1006c20:	008004c4 	movi	r2,19
 1006c24:	9009883a 	mov	r4,r18
 1006c28:	8011883a 	mov	r8,r16
 1006c2c:	11800f2e 	bgeu	r2,r6,1006c6c <_realloc_r+0x204>
 1006c30:	90800017 	ldw	r2,0(r18)
 1006c34:	ba000404 	addi	r8,r23,16
 1006c38:	91000204 	addi	r4,r18,8
 1006c3c:	b8800215 	stw	r2,8(r23)
 1006c40:	90c00117 	ldw	r3,4(r18)
 1006c44:	008006c4 	movi	r2,27
 1006c48:	b8c00315 	stw	r3,12(r23)
 1006c4c:	1180072e 	bgeu	r2,r6,1006c6c <_realloc_r+0x204>
 1006c50:	90c00217 	ldw	r3,8(r18)
 1006c54:	ba000604 	addi	r8,r23,24
 1006c58:	91000404 	addi	r4,r18,16
 1006c5c:	b8c00415 	stw	r3,16(r23)
 1006c60:	90800317 	ldw	r2,12(r18)
 1006c64:	b8800515 	stw	r2,20(r23)
 1006c68:	3140e726 	beq	r6,r5,1007008 <_realloc_r+0x5a0>
 1006c6c:	20800017 	ldw	r2,0(r4)
 1006c70:	dd000017 	ldw	r20,0(sp)
 1006c74:	b80f883a 	mov	r7,r23
 1006c78:	40800015 	stw	r2,0(r8)
 1006c7c:	20c00117 	ldw	r3,4(r4)
 1006c80:	40c00115 	stw	r3,4(r8)
 1006c84:	20800217 	ldw	r2,8(r4)
 1006c88:	40800215 	stw	r2,8(r8)
 1006c8c:	003f9706 	br	1006aec <_realloc_r+0x84>
 1006c90:	98a9883a 	add	r20,r19,r2
 1006c94:	a1c01f16 	blt	r20,r7,1006d14 <_realloc_r+0x2ac>
 1006c98:	b8c00317 	ldw	r3,12(r23)
 1006c9c:	b8800217 	ldw	r2,8(r23)
 1006ca0:	99bfff04 	addi	r6,r19,-4
 1006ca4:	01400904 	movi	r5,36
 1006ca8:	b82b883a 	mov	r21,r23
 1006cac:	18800215 	stw	r2,8(r3)
 1006cb0:	10c00315 	stw	r3,12(r2)
 1006cb4:	bc000204 	addi	r16,r23,8
 1006cb8:	2980c336 	bltu	r5,r6,1006fc8 <_realloc_r+0x560>
 1006cbc:	008004c4 	movi	r2,19
 1006cc0:	9009883a 	mov	r4,r18
 1006cc4:	8011883a 	mov	r8,r16
 1006cc8:	11800f2e 	bgeu	r2,r6,1006d08 <_realloc_r+0x2a0>
 1006ccc:	90800017 	ldw	r2,0(r18)
 1006cd0:	ba000404 	addi	r8,r23,16
 1006cd4:	91000204 	addi	r4,r18,8
 1006cd8:	b8800215 	stw	r2,8(r23)
 1006cdc:	90c00117 	ldw	r3,4(r18)
 1006ce0:	008006c4 	movi	r2,27
 1006ce4:	b8c00315 	stw	r3,12(r23)
 1006ce8:	1180072e 	bgeu	r2,r6,1006d08 <_realloc_r+0x2a0>
 1006cec:	90c00217 	ldw	r3,8(r18)
 1006cf0:	ba000604 	addi	r8,r23,24
 1006cf4:	91000404 	addi	r4,r18,16
 1006cf8:	b8c00415 	stw	r3,16(r23)
 1006cfc:	90800317 	ldw	r2,12(r18)
 1006d00:	b8800515 	stw	r2,20(r23)
 1006d04:	3140c726 	beq	r6,r5,1007024 <_realloc_r+0x5bc>
 1006d08:	20800017 	ldw	r2,0(r4)
 1006d0c:	b80f883a 	mov	r7,r23
 1006d10:	003fd906 	br	1006c78 <_realloc_r+0x210>
 1006d14:	880b883a 	mov	r5,r17
 1006d18:	b009883a 	mov	r4,r22
 1006d1c:	10050380 	call	1005038 <_malloc_r>
 1006d20:	1023883a 	mov	r17,r2
 1006d24:	10002526 	beq	r2,zero,1006dbc <_realloc_r+0x354>
 1006d28:	80800117 	ldw	r2,4(r16)
 1006d2c:	00ffff84 	movi	r3,-2
 1006d30:	893ffe04 	addi	r4,r17,-8
 1006d34:	10c4703a 	and	r2,r2,r3
 1006d38:	8085883a 	add	r2,r16,r2
 1006d3c:	20809526 	beq	r4,r2,1006f94 <_realloc_r+0x52c>
 1006d40:	99bfff04 	addi	r6,r19,-4
 1006d44:	01c00904 	movi	r7,36
 1006d48:	39804536 	bltu	r7,r6,1006e60 <_realloc_r+0x3f8>
 1006d4c:	008004c4 	movi	r2,19
 1006d50:	9009883a 	mov	r4,r18
 1006d54:	880b883a 	mov	r5,r17
 1006d58:	11800f2e 	bgeu	r2,r6,1006d98 <_realloc_r+0x330>
 1006d5c:	90800017 	ldw	r2,0(r18)
 1006d60:	89400204 	addi	r5,r17,8
 1006d64:	91000204 	addi	r4,r18,8
 1006d68:	88800015 	stw	r2,0(r17)
 1006d6c:	90c00117 	ldw	r3,4(r18)
 1006d70:	008006c4 	movi	r2,27
 1006d74:	88c00115 	stw	r3,4(r17)
 1006d78:	1180072e 	bgeu	r2,r6,1006d98 <_realloc_r+0x330>
 1006d7c:	90c00217 	ldw	r3,8(r18)
 1006d80:	89400404 	addi	r5,r17,16
 1006d84:	91000404 	addi	r4,r18,16
 1006d88:	88c00215 	stw	r3,8(r17)
 1006d8c:	90800317 	ldw	r2,12(r18)
 1006d90:	88800315 	stw	r2,12(r17)
 1006d94:	31c09126 	beq	r6,r7,1006fdc <_realloc_r+0x574>
 1006d98:	20800017 	ldw	r2,0(r4)
 1006d9c:	28800015 	stw	r2,0(r5)
 1006da0:	20c00117 	ldw	r3,4(r4)
 1006da4:	28c00115 	stw	r3,4(r5)
 1006da8:	20800217 	ldw	r2,8(r4)
 1006dac:	28800215 	stw	r2,8(r5)
 1006db0:	900b883a 	mov	r5,r18
 1006db4:	b009883a 	mov	r4,r22
 1006db8:	10044b00 	call	10044b0 <_free_r>
 1006dbc:	b009883a 	mov	r4,r22
 1006dc0:	100a2ac0 	call	100a2ac <__malloc_unlock>
 1006dc4:	003f5e06 	br	1006b40 <_realloc_r+0xd8>
 1006dc8:	300b883a 	mov	r5,r6
 1006dcc:	dfc00b17 	ldw	ra,44(sp)
 1006dd0:	df000a17 	ldw	fp,40(sp)
 1006dd4:	ddc00917 	ldw	r23,36(sp)
 1006dd8:	dd800817 	ldw	r22,32(sp)
 1006ddc:	dd400717 	ldw	r21,28(sp)
 1006de0:	dd000617 	ldw	r20,24(sp)
 1006de4:	dcc00517 	ldw	r19,20(sp)
 1006de8:	dc800417 	ldw	r18,16(sp)
 1006dec:	dc400317 	ldw	r17,12(sp)
 1006df0:	dc000217 	ldw	r16,8(sp)
 1006df4:	dec00c04 	addi	sp,sp,48
 1006df8:	10050381 	jmpi	1005038 <_malloc_r>
 1006dfc:	38800117 	ldw	r2,4(r7)
 1006e00:	e54b883a 	add	r5,fp,r21
 1006e04:	31000054 	ori	r4,r6,1
 1006e08:	1080004c 	andi	r2,r2,1
 1006e0c:	1704b03a 	or	r2,r2,fp
 1006e10:	38800115 	stw	r2,4(r7)
 1006e14:	29000115 	stw	r4,4(r5)
 1006e18:	2987883a 	add	r3,r5,r6
 1006e1c:	18800117 	ldw	r2,4(r3)
 1006e20:	29400204 	addi	r5,r5,8
 1006e24:	b009883a 	mov	r4,r22
 1006e28:	10800054 	ori	r2,r2,1
 1006e2c:	18800115 	stw	r2,4(r3)
 1006e30:	10044b00 	call	10044b0 <_free_r>
 1006e34:	003f3806 	br	1006b18 <_realloc_r+0xb0>
 1006e38:	000d883a 	mov	r6,zero
 1006e3c:	0009883a 	mov	r4,zero
 1006e40:	003f5d06 	br	1006bb8 <_realloc_r+0x150>
 1006e44:	30c00217 	ldw	r3,8(r6)
 1006e48:	30800317 	ldw	r2,12(r6)
 1006e4c:	800f883a 	mov	r7,r16
 1006e50:	84000204 	addi	r16,r16,8
 1006e54:	10c00215 	stw	r3,8(r2)
 1006e58:	18800315 	stw	r2,12(r3)
 1006e5c:	003f2306 	br	1006aec <_realloc_r+0x84>
 1006e60:	8809883a 	mov	r4,r17
 1006e64:	900b883a 	mov	r5,r18
 1006e68:	10058fc0 	call	10058fc <memmove>
 1006e6c:	003fd006 	br	1006db0 <_realloc_r+0x348>
 1006e70:	30800117 	ldw	r2,4(r6)
 1006e74:	e0c00404 	addi	r3,fp,16
 1006e78:	1108703a 	and	r4,r2,r4
 1006e7c:	9905883a 	add	r2,r19,r4
 1006e80:	10ff4d16 	blt	r2,r3,1006bb8 <_realloc_r+0x150>
 1006e84:	1705c83a 	sub	r2,r2,fp
 1006e88:	870b883a 	add	r5,r16,fp
 1006e8c:	10800054 	ori	r2,r2,1
 1006e90:	28800115 	stw	r2,4(r5)
 1006e94:	80c00117 	ldw	r3,4(r16)
 1006e98:	00804074 	movhi	r2,257
 1006e9c:	10b4dc04 	addi	r2,r2,-11408
 1006ea0:	b009883a 	mov	r4,r22
 1006ea4:	18c0004c 	andi	r3,r3,1
 1006ea8:	e0c6b03a 	or	r3,fp,r3
 1006eac:	11400215 	stw	r5,8(r2)
 1006eb0:	80c00115 	stw	r3,4(r16)
 1006eb4:	100a2ac0 	call	100a2ac <__malloc_unlock>
 1006eb8:	84400204 	addi	r17,r16,8
 1006ebc:	003f2006 	br	1006b40 <_realloc_r+0xd8>
 1006ec0:	98a9883a 	add	r20,r19,r2
 1006ec4:	2509883a 	add	r4,r4,r20
 1006ec8:	e0800404 	addi	r2,fp,16
 1006ecc:	d9000115 	stw	r4,4(sp)
 1006ed0:	20bf7016 	blt	r4,r2,1006c94 <_realloc_r+0x22c>
 1006ed4:	b8c00317 	ldw	r3,12(r23)
 1006ed8:	b8800217 	ldw	r2,8(r23)
 1006edc:	99bfff04 	addi	r6,r19,-4
 1006ee0:	01400904 	movi	r5,36
 1006ee4:	18800215 	stw	r2,8(r3)
 1006ee8:	10c00315 	stw	r3,12(r2)
 1006eec:	bc400204 	addi	r17,r23,8
 1006ef0:	29804136 	bltu	r5,r6,1006ff8 <_realloc_r+0x590>
 1006ef4:	008004c4 	movi	r2,19
 1006ef8:	9009883a 	mov	r4,r18
 1006efc:	880f883a 	mov	r7,r17
 1006f00:	11800f2e 	bgeu	r2,r6,1006f40 <_realloc_r+0x4d8>
 1006f04:	90800017 	ldw	r2,0(r18)
 1006f08:	b9c00404 	addi	r7,r23,16
 1006f0c:	91000204 	addi	r4,r18,8
 1006f10:	b8800215 	stw	r2,8(r23)
 1006f14:	90c00117 	ldw	r3,4(r18)
 1006f18:	008006c4 	movi	r2,27
 1006f1c:	b8c00315 	stw	r3,12(r23)
 1006f20:	1180072e 	bgeu	r2,r6,1006f40 <_realloc_r+0x4d8>
 1006f24:	90c00217 	ldw	r3,8(r18)
 1006f28:	b9c00604 	addi	r7,r23,24
 1006f2c:	91000404 	addi	r4,r18,16
 1006f30:	b8c00415 	stw	r3,16(r23)
 1006f34:	90800317 	ldw	r2,12(r18)
 1006f38:	b8800515 	stw	r2,20(r23)
 1006f3c:	31404026 	beq	r6,r5,1007040 <_realloc_r+0x5d8>
 1006f40:	20800017 	ldw	r2,0(r4)
 1006f44:	38800015 	stw	r2,0(r7)
 1006f48:	20c00117 	ldw	r3,4(r4)
 1006f4c:	38c00115 	stw	r3,4(r7)
 1006f50:	20800217 	ldw	r2,8(r4)
 1006f54:	38800215 	stw	r2,8(r7)
 1006f58:	d8c00117 	ldw	r3,4(sp)
 1006f5c:	bf0b883a 	add	r5,r23,fp
 1006f60:	b009883a 	mov	r4,r22
 1006f64:	1f05c83a 	sub	r2,r3,fp
 1006f68:	10800054 	ori	r2,r2,1
 1006f6c:	28800115 	stw	r2,4(r5)
 1006f70:	b8c00117 	ldw	r3,4(r23)
 1006f74:	00804074 	movhi	r2,257
 1006f78:	10b4dc04 	addi	r2,r2,-11408
 1006f7c:	11400215 	stw	r5,8(r2)
 1006f80:	18c0004c 	andi	r3,r3,1
 1006f84:	e0c6b03a 	or	r3,fp,r3
 1006f88:	b8c00115 	stw	r3,4(r23)
 1006f8c:	100a2ac0 	call	100a2ac <__malloc_unlock>
 1006f90:	003eeb06 	br	1006b40 <_realloc_r+0xd8>
 1006f94:	20800117 	ldw	r2,4(r4)
 1006f98:	00ffff04 	movi	r3,-4
 1006f9c:	800f883a 	mov	r7,r16
 1006fa0:	10c4703a 	and	r2,r2,r3
 1006fa4:	98a9883a 	add	r20,r19,r2
 1006fa8:	84000204 	addi	r16,r16,8
 1006fac:	003ecf06 	br	1006aec <_realloc_r+0x84>
 1006fb0:	900b883a 	mov	r5,r18
 1006fb4:	8009883a 	mov	r4,r16
 1006fb8:	10058fc0 	call	10058fc <memmove>
 1006fbc:	dd000017 	ldw	r20,0(sp)
 1006fc0:	b80f883a 	mov	r7,r23
 1006fc4:	003ec906 	br	1006aec <_realloc_r+0x84>
 1006fc8:	900b883a 	mov	r5,r18
 1006fcc:	8009883a 	mov	r4,r16
 1006fd0:	10058fc0 	call	10058fc <memmove>
 1006fd4:	b80f883a 	mov	r7,r23
 1006fd8:	003ec406 	br	1006aec <_realloc_r+0x84>
 1006fdc:	90c00417 	ldw	r3,16(r18)
 1006fe0:	89400604 	addi	r5,r17,24
 1006fe4:	91000604 	addi	r4,r18,24
 1006fe8:	88c00415 	stw	r3,16(r17)
 1006fec:	90800517 	ldw	r2,20(r18)
 1006ff0:	88800515 	stw	r2,20(r17)
 1006ff4:	003f6806 	br	1006d98 <_realloc_r+0x330>
 1006ff8:	900b883a 	mov	r5,r18
 1006ffc:	8809883a 	mov	r4,r17
 1007000:	10058fc0 	call	10058fc <memmove>
 1007004:	003fd406 	br	1006f58 <_realloc_r+0x4f0>
 1007008:	90c00417 	ldw	r3,16(r18)
 100700c:	91000604 	addi	r4,r18,24
 1007010:	ba000804 	addi	r8,r23,32
 1007014:	b8c00615 	stw	r3,24(r23)
 1007018:	90800517 	ldw	r2,20(r18)
 100701c:	b8800715 	stw	r2,28(r23)
 1007020:	003f1206 	br	1006c6c <_realloc_r+0x204>
 1007024:	90c00417 	ldw	r3,16(r18)
 1007028:	91000604 	addi	r4,r18,24
 100702c:	ba000804 	addi	r8,r23,32
 1007030:	b8c00615 	stw	r3,24(r23)
 1007034:	90800517 	ldw	r2,20(r18)
 1007038:	b8800715 	stw	r2,28(r23)
 100703c:	003f3206 	br	1006d08 <_realloc_r+0x2a0>
 1007040:	90c00417 	ldw	r3,16(r18)
 1007044:	91000604 	addi	r4,r18,24
 1007048:	b9c00804 	addi	r7,r23,32
 100704c:	b8c00615 	stw	r3,24(r23)
 1007050:	90800517 	ldw	r2,20(r18)
 1007054:	b8800715 	stw	r2,28(r23)
 1007058:	003fb906 	br	1006f40 <_realloc_r+0x4d8>

0100705c <__isinfd>:
 100705c:	200d883a 	mov	r6,r4
 1007060:	0109c83a 	sub	r4,zero,r4
 1007064:	2188b03a 	or	r4,r4,r6
 1007068:	2008d7fa 	srli	r4,r4,31
 100706c:	00a00034 	movhi	r2,32768
 1007070:	10bfffc4 	addi	r2,r2,-1
 1007074:	1144703a 	and	r2,r2,r5
 1007078:	2088b03a 	or	r4,r4,r2
 100707c:	009ffc34 	movhi	r2,32752
 1007080:	1105c83a 	sub	r2,r2,r4
 1007084:	0087c83a 	sub	r3,zero,r2
 1007088:	10c4b03a 	or	r2,r2,r3
 100708c:	1004d7fa 	srli	r2,r2,31
 1007090:	00c00044 	movi	r3,1
 1007094:	1885c83a 	sub	r2,r3,r2
 1007098:	f800283a 	ret

0100709c <__isnand>:
 100709c:	200d883a 	mov	r6,r4
 10070a0:	0109c83a 	sub	r4,zero,r4
 10070a4:	2188b03a 	or	r4,r4,r6
 10070a8:	2008d7fa 	srli	r4,r4,31
 10070ac:	00a00034 	movhi	r2,32768
 10070b0:	10bfffc4 	addi	r2,r2,-1
 10070b4:	1144703a 	and	r2,r2,r5
 10070b8:	2088b03a 	or	r4,r4,r2
 10070bc:	009ffc34 	movhi	r2,32752
 10070c0:	1105c83a 	sub	r2,r2,r4
 10070c4:	1004d7fa 	srli	r2,r2,31
 10070c8:	f800283a 	ret

010070cc <_sbrk_r>:
 10070cc:	defffd04 	addi	sp,sp,-12
 10070d0:	dc000015 	stw	r16,0(sp)
 10070d4:	04004074 	movhi	r16,257
 10070d8:	84015104 	addi	r16,r16,1348
 10070dc:	dc400115 	stw	r17,4(sp)
 10070e0:	80000015 	stw	zero,0(r16)
 10070e4:	2023883a 	mov	r17,r4
 10070e8:	2809883a 	mov	r4,r5
 10070ec:	dfc00215 	stw	ra,8(sp)
 10070f0:	100a4ac0 	call	100a4ac <sbrk>
 10070f4:	1007883a 	mov	r3,r2
 10070f8:	00bfffc4 	movi	r2,-1
 10070fc:	18800626 	beq	r3,r2,1007118 <_sbrk_r+0x4c>
 1007100:	1805883a 	mov	r2,r3
 1007104:	dfc00217 	ldw	ra,8(sp)
 1007108:	dc400117 	ldw	r17,4(sp)
 100710c:	dc000017 	ldw	r16,0(sp)
 1007110:	dec00304 	addi	sp,sp,12
 1007114:	f800283a 	ret
 1007118:	80800017 	ldw	r2,0(r16)
 100711c:	103ff826 	beq	r2,zero,1007100 <_sbrk_r+0x34>
 1007120:	88800015 	stw	r2,0(r17)
 1007124:	1805883a 	mov	r2,r3
 1007128:	dfc00217 	ldw	ra,8(sp)
 100712c:	dc400117 	ldw	r17,4(sp)
 1007130:	dc000017 	ldw	r16,0(sp)
 1007134:	dec00304 	addi	sp,sp,12
 1007138:	f800283a 	ret

0100713c <__sclose>:
 100713c:	2940038f 	ldh	r5,14(r5)
 1007140:	10074701 	jmpi	1007470 <_close_r>

01007144 <__sseek>:
 1007144:	defffe04 	addi	sp,sp,-8
 1007148:	dc000015 	stw	r16,0(sp)
 100714c:	2821883a 	mov	r16,r5
 1007150:	2940038f 	ldh	r5,14(r5)
 1007154:	dfc00115 	stw	ra,4(sp)
 1007158:	10076e80 	call	10076e8 <_lseek_r>
 100715c:	1007883a 	mov	r3,r2
 1007160:	00bfffc4 	movi	r2,-1
 1007164:	18800926 	beq	r3,r2,100718c <__sseek+0x48>
 1007168:	8080030b 	ldhu	r2,12(r16)
 100716c:	80c01415 	stw	r3,80(r16)
 1007170:	10840014 	ori	r2,r2,4096
 1007174:	8080030d 	sth	r2,12(r16)
 1007178:	1805883a 	mov	r2,r3
 100717c:	dfc00117 	ldw	ra,4(sp)
 1007180:	dc000017 	ldw	r16,0(sp)
 1007184:	dec00204 	addi	sp,sp,8
 1007188:	f800283a 	ret
 100718c:	8080030b 	ldhu	r2,12(r16)
 1007190:	10bbffcc 	andi	r2,r2,61439
 1007194:	8080030d 	sth	r2,12(r16)
 1007198:	1805883a 	mov	r2,r3
 100719c:	dfc00117 	ldw	ra,4(sp)
 10071a0:	dc000017 	ldw	r16,0(sp)
 10071a4:	dec00204 	addi	sp,sp,8
 10071a8:	f800283a 	ret

010071ac <__swrite>:
 10071ac:	2880030b 	ldhu	r2,12(r5)
 10071b0:	defffb04 	addi	sp,sp,-20
 10071b4:	dcc00315 	stw	r19,12(sp)
 10071b8:	1080400c 	andi	r2,r2,256
 10071bc:	dc800215 	stw	r18,8(sp)
 10071c0:	dc400115 	stw	r17,4(sp)
 10071c4:	dc000015 	stw	r16,0(sp)
 10071c8:	3027883a 	mov	r19,r6
 10071cc:	3825883a 	mov	r18,r7
 10071d0:	dfc00415 	stw	ra,16(sp)
 10071d4:	2821883a 	mov	r16,r5
 10071d8:	000d883a 	mov	r6,zero
 10071dc:	01c00084 	movi	r7,2
 10071e0:	2023883a 	mov	r17,r4
 10071e4:	10000226 	beq	r2,zero,10071f0 <__swrite+0x44>
 10071e8:	2940038f 	ldh	r5,14(r5)
 10071ec:	10076e80 	call	10076e8 <_lseek_r>
 10071f0:	8080030b 	ldhu	r2,12(r16)
 10071f4:	8140038f 	ldh	r5,14(r16)
 10071f8:	8809883a 	mov	r4,r17
 10071fc:	10bbffcc 	andi	r2,r2,61439
 1007200:	980d883a 	mov	r6,r19
 1007204:	900f883a 	mov	r7,r18
 1007208:	8080030d 	sth	r2,12(r16)
 100720c:	dfc00417 	ldw	ra,16(sp)
 1007210:	dcc00317 	ldw	r19,12(sp)
 1007214:	dc800217 	ldw	r18,8(sp)
 1007218:	dc400117 	ldw	r17,4(sp)
 100721c:	dc000017 	ldw	r16,0(sp)
 1007220:	dec00504 	addi	sp,sp,20
 1007224:	10073441 	jmpi	1007344 <_write_r>

01007228 <__sread>:
 1007228:	defffe04 	addi	sp,sp,-8
 100722c:	dc000015 	stw	r16,0(sp)
 1007230:	2821883a 	mov	r16,r5
 1007234:	2940038f 	ldh	r5,14(r5)
 1007238:	dfc00115 	stw	ra,4(sp)
 100723c:	10077600 	call	1007760 <_read_r>
 1007240:	1007883a 	mov	r3,r2
 1007244:	10000816 	blt	r2,zero,1007268 <__sread+0x40>
 1007248:	80801417 	ldw	r2,80(r16)
 100724c:	10c5883a 	add	r2,r2,r3
 1007250:	80801415 	stw	r2,80(r16)
 1007254:	1805883a 	mov	r2,r3
 1007258:	dfc00117 	ldw	ra,4(sp)
 100725c:	dc000017 	ldw	r16,0(sp)
 1007260:	dec00204 	addi	sp,sp,8
 1007264:	f800283a 	ret
 1007268:	8080030b 	ldhu	r2,12(r16)
 100726c:	10bbffcc 	andi	r2,r2,61439
 1007270:	8080030d 	sth	r2,12(r16)
 1007274:	1805883a 	mov	r2,r3
 1007278:	dfc00117 	ldw	ra,4(sp)
 100727c:	dc000017 	ldw	r16,0(sp)
 1007280:	dec00204 	addi	sp,sp,8
 1007284:	f800283a 	ret

01007288 <strcmp>:
 1007288:	2144b03a 	or	r2,r4,r5
 100728c:	108000cc 	andi	r2,r2,3
 1007290:	10001d1e 	bne	r2,zero,1007308 <strcmp+0x80>
 1007294:	200f883a 	mov	r7,r4
 1007298:	28800017 	ldw	r2,0(r5)
 100729c:	21000017 	ldw	r4,0(r4)
 10072a0:	280d883a 	mov	r6,r5
 10072a4:	2080161e 	bne	r4,r2,1007300 <strcmp+0x78>
 10072a8:	023fbff4 	movhi	r8,65279
 10072ac:	423fbfc4 	addi	r8,r8,-257
 10072b0:	2207883a 	add	r3,r4,r8
 10072b4:	01602074 	movhi	r5,32897
 10072b8:	29602004 	addi	r5,r5,-32640
 10072bc:	1946703a 	and	r3,r3,r5
 10072c0:	0104303a 	nor	r2,zero,r4
 10072c4:	10c4703a 	and	r2,r2,r3
 10072c8:	10001c1e 	bne	r2,zero,100733c <strcmp+0xb4>
 10072cc:	4013883a 	mov	r9,r8
 10072d0:	2811883a 	mov	r8,r5
 10072d4:	00000106 	br	10072dc <strcmp+0x54>
 10072d8:	1800181e 	bne	r3,zero,100733c <strcmp+0xb4>
 10072dc:	39c00104 	addi	r7,r7,4
 10072e0:	39000017 	ldw	r4,0(r7)
 10072e4:	31800104 	addi	r6,r6,4
 10072e8:	31400017 	ldw	r5,0(r6)
 10072ec:	2245883a 	add	r2,r4,r9
 10072f0:	1204703a 	and	r2,r2,r8
 10072f4:	0106303a 	nor	r3,zero,r4
 10072f8:	1886703a 	and	r3,r3,r2
 10072fc:	217ff626 	beq	r4,r5,10072d8 <strcmp+0x50>
 1007300:	3809883a 	mov	r4,r7
 1007304:	300b883a 	mov	r5,r6
 1007308:	20c00007 	ldb	r3,0(r4)
 100730c:	1800051e 	bne	r3,zero,1007324 <strcmp+0x9c>
 1007310:	00000606 	br	100732c <strcmp+0xa4>
 1007314:	21000044 	addi	r4,r4,1
 1007318:	20c00007 	ldb	r3,0(r4)
 100731c:	29400044 	addi	r5,r5,1
 1007320:	18000226 	beq	r3,zero,100732c <strcmp+0xa4>
 1007324:	28800007 	ldb	r2,0(r5)
 1007328:	18bffa26 	beq	r3,r2,1007314 <strcmp+0x8c>
 100732c:	20c00003 	ldbu	r3,0(r4)
 1007330:	28800003 	ldbu	r2,0(r5)
 1007334:	1885c83a 	sub	r2,r3,r2
 1007338:	f800283a 	ret
 100733c:	0005883a 	mov	r2,zero
 1007340:	f800283a 	ret

01007344 <_write_r>:
 1007344:	defffd04 	addi	sp,sp,-12
 1007348:	dc000015 	stw	r16,0(sp)
 100734c:	04004074 	movhi	r16,257
 1007350:	84015104 	addi	r16,r16,1348
 1007354:	dc400115 	stw	r17,4(sp)
 1007358:	80000015 	stw	zero,0(r16)
 100735c:	2023883a 	mov	r17,r4
 1007360:	2809883a 	mov	r4,r5
 1007364:	300b883a 	mov	r5,r6
 1007368:	380d883a 	mov	r6,r7
 100736c:	dfc00215 	stw	ra,8(sp)
 1007370:	100a5680 	call	100a568 <write>
 1007374:	1007883a 	mov	r3,r2
 1007378:	00bfffc4 	movi	r2,-1
 100737c:	18800626 	beq	r3,r2,1007398 <_write_r+0x54>
 1007380:	1805883a 	mov	r2,r3
 1007384:	dfc00217 	ldw	ra,8(sp)
 1007388:	dc400117 	ldw	r17,4(sp)
 100738c:	dc000017 	ldw	r16,0(sp)
 1007390:	dec00304 	addi	sp,sp,12
 1007394:	f800283a 	ret
 1007398:	80800017 	ldw	r2,0(r16)
 100739c:	103ff826 	beq	r2,zero,1007380 <_write_r+0x3c>
 10073a0:	88800015 	stw	r2,0(r17)
 10073a4:	1805883a 	mov	r2,r3
 10073a8:	dfc00217 	ldw	ra,8(sp)
 10073ac:	dc400117 	ldw	r17,4(sp)
 10073b0:	dc000017 	ldw	r16,0(sp)
 10073b4:	dec00304 	addi	sp,sp,12
 10073b8:	f800283a 	ret

010073bc <_calloc_r>:
 10073bc:	298b383a 	mul	r5,r5,r6
 10073c0:	defffe04 	addi	sp,sp,-8
 10073c4:	dc000015 	stw	r16,0(sp)
 10073c8:	dfc00115 	stw	ra,4(sp)
 10073cc:	10050380 	call	1005038 <_malloc_r>
 10073d0:	1021883a 	mov	r16,r2
 10073d4:	01c00904 	movi	r7,36
 10073d8:	10000d26 	beq	r2,zero,1007410 <_calloc_r+0x54>
 10073dc:	10ffff17 	ldw	r3,-4(r2)
 10073e0:	1009883a 	mov	r4,r2
 10073e4:	00bfff04 	movi	r2,-4
 10073e8:	1886703a 	and	r3,r3,r2
 10073ec:	1887883a 	add	r3,r3,r2
 10073f0:	180d883a 	mov	r6,r3
 10073f4:	000b883a 	mov	r5,zero
 10073f8:	38c01736 	bltu	r7,r3,1007458 <_calloc_r+0x9c>
 10073fc:	008004c4 	movi	r2,19
 1007400:	10c00836 	bltu	r2,r3,1007424 <_calloc_r+0x68>
 1007404:	20000215 	stw	zero,8(r4)
 1007408:	20000015 	stw	zero,0(r4)
 100740c:	20000115 	stw	zero,4(r4)
 1007410:	8005883a 	mov	r2,r16
 1007414:	dfc00117 	ldw	ra,4(sp)
 1007418:	dc000017 	ldw	r16,0(sp)
 100741c:	dec00204 	addi	sp,sp,8
 1007420:	f800283a 	ret
 1007424:	008006c4 	movi	r2,27
 1007428:	80000015 	stw	zero,0(r16)
 100742c:	80000115 	stw	zero,4(r16)
 1007430:	81000204 	addi	r4,r16,8
 1007434:	10fff32e 	bgeu	r2,r3,1007404 <_calloc_r+0x48>
 1007438:	80000215 	stw	zero,8(r16)
 100743c:	80000315 	stw	zero,12(r16)
 1007440:	81000404 	addi	r4,r16,16
 1007444:	19ffef1e 	bne	r3,r7,1007404 <_calloc_r+0x48>
 1007448:	81000604 	addi	r4,r16,24
 100744c:	80000415 	stw	zero,16(r16)
 1007450:	80000515 	stw	zero,20(r16)
 1007454:	003feb06 	br	1007404 <_calloc_r+0x48>
 1007458:	10059dc0 	call	10059dc <memset>
 100745c:	8005883a 	mov	r2,r16
 1007460:	dfc00117 	ldw	ra,4(sp)
 1007464:	dc000017 	ldw	r16,0(sp)
 1007468:	dec00204 	addi	sp,sp,8
 100746c:	f800283a 	ret

01007470 <_close_r>:
 1007470:	defffd04 	addi	sp,sp,-12
 1007474:	dc000015 	stw	r16,0(sp)
 1007478:	04004074 	movhi	r16,257
 100747c:	84015104 	addi	r16,r16,1348
 1007480:	dc400115 	stw	r17,4(sp)
 1007484:	80000015 	stw	zero,0(r16)
 1007488:	2023883a 	mov	r17,r4
 100748c:	2809883a 	mov	r4,r5
 1007490:	dfc00215 	stw	ra,8(sp)
 1007494:	1009c080 	call	1009c08 <close>
 1007498:	1007883a 	mov	r3,r2
 100749c:	00bfffc4 	movi	r2,-1
 10074a0:	18800626 	beq	r3,r2,10074bc <_close_r+0x4c>
 10074a4:	1805883a 	mov	r2,r3
 10074a8:	dfc00217 	ldw	ra,8(sp)
 10074ac:	dc400117 	ldw	r17,4(sp)
 10074b0:	dc000017 	ldw	r16,0(sp)
 10074b4:	dec00304 	addi	sp,sp,12
 10074b8:	f800283a 	ret
 10074bc:	80800017 	ldw	r2,0(r16)
 10074c0:	103ff826 	beq	r2,zero,10074a4 <_close_r+0x34>
 10074c4:	88800015 	stw	r2,0(r17)
 10074c8:	1805883a 	mov	r2,r3
 10074cc:	dfc00217 	ldw	ra,8(sp)
 10074d0:	dc400117 	ldw	r17,4(sp)
 10074d4:	dc000017 	ldw	r16,0(sp)
 10074d8:	dec00304 	addi	sp,sp,12
 10074dc:	f800283a 	ret

010074e0 <_fclose_r>:
 10074e0:	defffc04 	addi	sp,sp,-16
 10074e4:	dc400115 	stw	r17,4(sp)
 10074e8:	dc000015 	stw	r16,0(sp)
 10074ec:	dfc00315 	stw	ra,12(sp)
 10074f0:	dc800215 	stw	r18,8(sp)
 10074f4:	2821883a 	mov	r16,r5
 10074f8:	2023883a 	mov	r17,r4
 10074fc:	28002926 	beq	r5,zero,10075a4 <_fclose_r+0xc4>
 1007500:	100411c0 	call	100411c <__sfp_lock_acquire>
 1007504:	88000226 	beq	r17,zero,1007510 <_fclose_r+0x30>
 1007508:	88800e17 	ldw	r2,56(r17)
 100750c:	10002d26 	beq	r2,zero,10075c4 <_fclose_r+0xe4>
 1007510:	8080030f 	ldh	r2,12(r16)
 1007514:	10002226 	beq	r2,zero,10075a0 <_fclose_r+0xc0>
 1007518:	8809883a 	mov	r4,r17
 100751c:	800b883a 	mov	r5,r16
 1007520:	1003e940 	call	1003e94 <_fflush_r>
 1007524:	1025883a 	mov	r18,r2
 1007528:	80800b17 	ldw	r2,44(r16)
 100752c:	10000426 	beq	r2,zero,1007540 <_fclose_r+0x60>
 1007530:	81400717 	ldw	r5,28(r16)
 1007534:	8809883a 	mov	r4,r17
 1007538:	103ee83a 	callr	r2
 100753c:	10002a16 	blt	r2,zero,10075e8 <_fclose_r+0x108>
 1007540:	8080030b 	ldhu	r2,12(r16)
 1007544:	1080200c 	andi	r2,r2,128
 1007548:	1000231e 	bne	r2,zero,10075d8 <_fclose_r+0xf8>
 100754c:	81400c17 	ldw	r5,48(r16)
 1007550:	28000526 	beq	r5,zero,1007568 <_fclose_r+0x88>
 1007554:	80801004 	addi	r2,r16,64
 1007558:	28800226 	beq	r5,r2,1007564 <_fclose_r+0x84>
 100755c:	8809883a 	mov	r4,r17
 1007560:	10044b00 	call	10044b0 <_free_r>
 1007564:	80000c15 	stw	zero,48(r16)
 1007568:	81401117 	ldw	r5,68(r16)
 100756c:	28000326 	beq	r5,zero,100757c <_fclose_r+0x9c>
 1007570:	8809883a 	mov	r4,r17
 1007574:	10044b00 	call	10044b0 <_free_r>
 1007578:	80001115 	stw	zero,68(r16)
 100757c:	8000030d 	sth	zero,12(r16)
 1007580:	10041200 	call	1004120 <__sfp_lock_release>
 1007584:	9005883a 	mov	r2,r18
 1007588:	dfc00317 	ldw	ra,12(sp)
 100758c:	dc800217 	ldw	r18,8(sp)
 1007590:	dc400117 	ldw	r17,4(sp)
 1007594:	dc000017 	ldw	r16,0(sp)
 1007598:	dec00404 	addi	sp,sp,16
 100759c:	f800283a 	ret
 10075a0:	10041200 	call	1004120 <__sfp_lock_release>
 10075a4:	0025883a 	mov	r18,zero
 10075a8:	9005883a 	mov	r2,r18
 10075ac:	dfc00317 	ldw	ra,12(sp)
 10075b0:	dc800217 	ldw	r18,8(sp)
 10075b4:	dc400117 	ldw	r17,4(sp)
 10075b8:	dc000017 	ldw	r16,0(sp)
 10075bc:	dec00404 	addi	sp,sp,16
 10075c0:	f800283a 	ret
 10075c4:	8809883a 	mov	r4,r17
 10075c8:	100412c0 	call	100412c <__sinit>
 10075cc:	8080030f 	ldh	r2,12(r16)
 10075d0:	103fd11e 	bne	r2,zero,1007518 <_fclose_r+0x38>
 10075d4:	003ff206 	br	10075a0 <_fclose_r+0xc0>
 10075d8:	81400417 	ldw	r5,16(r16)
 10075dc:	8809883a 	mov	r4,r17
 10075e0:	10044b00 	call	10044b0 <_free_r>
 10075e4:	003fd906 	br	100754c <_fclose_r+0x6c>
 10075e8:	04bfffc4 	movi	r18,-1
 10075ec:	003fd406 	br	1007540 <_fclose_r+0x60>

010075f0 <fclose>:
 10075f0:	00804074 	movhi	r2,257
 10075f4:	10ba8204 	addi	r2,r2,-5624
 10075f8:	200b883a 	mov	r5,r4
 10075fc:	11000017 	ldw	r4,0(r2)
 1007600:	10074e01 	jmpi	10074e0 <_fclose_r>

01007604 <_fstat_r>:
 1007604:	defffd04 	addi	sp,sp,-12
 1007608:	dc000015 	stw	r16,0(sp)
 100760c:	04004074 	movhi	r16,257
 1007610:	84015104 	addi	r16,r16,1348
 1007614:	dc400115 	stw	r17,4(sp)
 1007618:	80000015 	stw	zero,0(r16)
 100761c:	2023883a 	mov	r17,r4
 1007620:	2809883a 	mov	r4,r5
 1007624:	300b883a 	mov	r5,r6
 1007628:	dfc00215 	stw	ra,8(sp)
 100762c:	1009d900 	call	1009d90 <fstat>
 1007630:	1007883a 	mov	r3,r2
 1007634:	00bfffc4 	movi	r2,-1
 1007638:	18800626 	beq	r3,r2,1007654 <_fstat_r+0x50>
 100763c:	1805883a 	mov	r2,r3
 1007640:	dfc00217 	ldw	ra,8(sp)
 1007644:	dc400117 	ldw	r17,4(sp)
 1007648:	dc000017 	ldw	r16,0(sp)
 100764c:	dec00304 	addi	sp,sp,12
 1007650:	f800283a 	ret
 1007654:	80800017 	ldw	r2,0(r16)
 1007658:	103ff826 	beq	r2,zero,100763c <_fstat_r+0x38>
 100765c:	88800015 	stw	r2,0(r17)
 1007660:	1805883a 	mov	r2,r3
 1007664:	dfc00217 	ldw	ra,8(sp)
 1007668:	dc400117 	ldw	r17,4(sp)
 100766c:	dc000017 	ldw	r16,0(sp)
 1007670:	dec00304 	addi	sp,sp,12
 1007674:	f800283a 	ret

01007678 <_isatty_r>:
 1007678:	defffd04 	addi	sp,sp,-12
 100767c:	dc000015 	stw	r16,0(sp)
 1007680:	04004074 	movhi	r16,257
 1007684:	84015104 	addi	r16,r16,1348
 1007688:	dc400115 	stw	r17,4(sp)
 100768c:	80000015 	stw	zero,0(r16)
 1007690:	2023883a 	mov	r17,r4
 1007694:	2809883a 	mov	r4,r5
 1007698:	dfc00215 	stw	ra,8(sp)
 100769c:	1009ec40 	call	1009ec4 <isatty>
 10076a0:	1007883a 	mov	r3,r2
 10076a4:	00bfffc4 	movi	r2,-1
 10076a8:	18800626 	beq	r3,r2,10076c4 <_isatty_r+0x4c>
 10076ac:	1805883a 	mov	r2,r3
 10076b0:	dfc00217 	ldw	ra,8(sp)
 10076b4:	dc400117 	ldw	r17,4(sp)
 10076b8:	dc000017 	ldw	r16,0(sp)
 10076bc:	dec00304 	addi	sp,sp,12
 10076c0:	f800283a 	ret
 10076c4:	80800017 	ldw	r2,0(r16)
 10076c8:	103ff826 	beq	r2,zero,10076ac <_isatty_r+0x34>
 10076cc:	88800015 	stw	r2,0(r17)
 10076d0:	1805883a 	mov	r2,r3
 10076d4:	dfc00217 	ldw	ra,8(sp)
 10076d8:	dc400117 	ldw	r17,4(sp)
 10076dc:	dc000017 	ldw	r16,0(sp)
 10076e0:	dec00304 	addi	sp,sp,12
 10076e4:	f800283a 	ret

010076e8 <_lseek_r>:
 10076e8:	defffd04 	addi	sp,sp,-12
 10076ec:	dc000015 	stw	r16,0(sp)
 10076f0:	04004074 	movhi	r16,257
 10076f4:	84015104 	addi	r16,r16,1348
 10076f8:	dc400115 	stw	r17,4(sp)
 10076fc:	80000015 	stw	zero,0(r16)
 1007700:	2023883a 	mov	r17,r4
 1007704:	2809883a 	mov	r4,r5
 1007708:	300b883a 	mov	r5,r6
 100770c:	380d883a 	mov	r6,r7
 1007710:	dfc00215 	stw	ra,8(sp)
 1007714:	100a0d00 	call	100a0d0 <lseek>
 1007718:	1007883a 	mov	r3,r2
 100771c:	00bfffc4 	movi	r2,-1
 1007720:	18800626 	beq	r3,r2,100773c <_lseek_r+0x54>
 1007724:	1805883a 	mov	r2,r3
 1007728:	dfc00217 	ldw	ra,8(sp)
 100772c:	dc400117 	ldw	r17,4(sp)
 1007730:	dc000017 	ldw	r16,0(sp)
 1007734:	dec00304 	addi	sp,sp,12
 1007738:	f800283a 	ret
 100773c:	80800017 	ldw	r2,0(r16)
 1007740:	103ff826 	beq	r2,zero,1007724 <_lseek_r+0x3c>
 1007744:	88800015 	stw	r2,0(r17)
 1007748:	1805883a 	mov	r2,r3
 100774c:	dfc00217 	ldw	ra,8(sp)
 1007750:	dc400117 	ldw	r17,4(sp)
 1007754:	dc000017 	ldw	r16,0(sp)
 1007758:	dec00304 	addi	sp,sp,12
 100775c:	f800283a 	ret

01007760 <_read_r>:
 1007760:	defffd04 	addi	sp,sp,-12
 1007764:	dc000015 	stw	r16,0(sp)
 1007768:	04004074 	movhi	r16,257
 100776c:	84015104 	addi	r16,r16,1348
 1007770:	dc400115 	stw	r17,4(sp)
 1007774:	80000015 	stw	zero,0(r16)
 1007778:	2023883a 	mov	r17,r4
 100777c:	2809883a 	mov	r4,r5
 1007780:	300b883a 	mov	r5,r6
 1007784:	380d883a 	mov	r6,r7
 1007788:	dfc00215 	stw	ra,8(sp)
 100778c:	100a2cc0 	call	100a2cc <read>
 1007790:	1007883a 	mov	r3,r2
 1007794:	00bfffc4 	movi	r2,-1
 1007798:	18800626 	beq	r3,r2,10077b4 <_read_r+0x54>
 100779c:	1805883a 	mov	r2,r3
 10077a0:	dfc00217 	ldw	ra,8(sp)
 10077a4:	dc400117 	ldw	r17,4(sp)
 10077a8:	dc000017 	ldw	r16,0(sp)
 10077ac:	dec00304 	addi	sp,sp,12
 10077b0:	f800283a 	ret
 10077b4:	80800017 	ldw	r2,0(r16)
 10077b8:	103ff826 	beq	r2,zero,100779c <_read_r+0x3c>
 10077bc:	88800015 	stw	r2,0(r17)
 10077c0:	1805883a 	mov	r2,r3
 10077c4:	dfc00217 	ldw	ra,8(sp)
 10077c8:	dc400117 	ldw	r17,4(sp)
 10077cc:	dc000017 	ldw	r16,0(sp)
 10077d0:	dec00304 	addi	sp,sp,12
 10077d4:	f800283a 	ret

010077d8 <__udivdi3>:
 10077d8:	defff004 	addi	sp,sp,-64
 10077dc:	2005883a 	mov	r2,r4
 10077e0:	3011883a 	mov	r8,r6
 10077e4:	df000e15 	stw	fp,56(sp)
 10077e8:	dd000a15 	stw	r20,40(sp)
 10077ec:	dc000615 	stw	r16,24(sp)
 10077f0:	dfc00f15 	stw	ra,60(sp)
 10077f4:	ddc00d15 	stw	r23,52(sp)
 10077f8:	dd800c15 	stw	r22,48(sp)
 10077fc:	dd400b15 	stw	r21,44(sp)
 1007800:	dcc00915 	stw	r19,36(sp)
 1007804:	dc800815 	stw	r18,32(sp)
 1007808:	dc400715 	stw	r17,28(sp)
 100780c:	4021883a 	mov	r16,r8
 1007810:	1039883a 	mov	fp,r2
 1007814:	2829883a 	mov	r20,r5
 1007818:	38003b1e 	bne	r7,zero,1007908 <__udivdi3+0x130>
 100781c:	2a005c36 	bltu	r5,r8,1007990 <__udivdi3+0x1b8>
 1007820:	4000a626 	beq	r8,zero,1007abc <__udivdi3+0x2e4>
 1007824:	00bfffd4 	movui	r2,65535
 1007828:	14009e36 	bltu	r2,r16,1007aa4 <__udivdi3+0x2cc>
 100782c:	00803fc4 	movi	r2,255
 1007830:	14013d36 	bltu	r2,r16,1007d28 <__udivdi3+0x550>
 1007834:	000b883a 	mov	r5,zero
 1007838:	0005883a 	mov	r2,zero
 100783c:	8084d83a 	srl	r2,r16,r2
 1007840:	01004074 	movhi	r4,257
 1007844:	21338004 	addi	r4,r4,-12800
 1007848:	01800804 	movi	r6,32
 100784c:	1105883a 	add	r2,r2,r4
 1007850:	10c00003 	ldbu	r3,0(r2)
 1007854:	28c7883a 	add	r3,r5,r3
 1007858:	30edc83a 	sub	r22,r6,r3
 100785c:	b000ee1e 	bne	r22,zero,1007c18 <__udivdi3+0x440>
 1007860:	802ad43a 	srli	r21,r16,16
 1007864:	00800044 	movi	r2,1
 1007868:	a423c83a 	sub	r17,r20,r16
 100786c:	85ffffcc 	andi	r23,r16,65535
 1007870:	d8800315 	stw	r2,12(sp)
 1007874:	8809883a 	mov	r4,r17
 1007878:	a80b883a 	mov	r5,r21
 100787c:	10095cc0 	call	10095cc <__udivsi3>
 1007880:	8809883a 	mov	r4,r17
 1007884:	a80b883a 	mov	r5,r21
 1007888:	102d883a 	mov	r22,r2
 100788c:	10095d40 	call	10095d4 <__umodsi3>
 1007890:	1004943a 	slli	r2,r2,16
 1007894:	e006d43a 	srli	r3,fp,16
 1007898:	bda3383a 	mul	r17,r23,r22
 100789c:	10c4b03a 	or	r2,r2,r3
 10078a0:	1440042e 	bgeu	r2,r17,10078b4 <__udivdi3+0xdc>
 10078a4:	1405883a 	add	r2,r2,r16
 10078a8:	b5bfffc4 	addi	r22,r22,-1
 10078ac:	14000136 	bltu	r2,r16,10078b4 <__udivdi3+0xdc>
 10078b0:	14413d36 	bltu	r2,r17,1007da8 <__udivdi3+0x5d0>
 10078b4:	1463c83a 	sub	r17,r2,r17
 10078b8:	8809883a 	mov	r4,r17
 10078bc:	a80b883a 	mov	r5,r21
 10078c0:	10095cc0 	call	10095cc <__udivsi3>
 10078c4:	8809883a 	mov	r4,r17
 10078c8:	a80b883a 	mov	r5,r21
 10078cc:	1029883a 	mov	r20,r2
 10078d0:	10095d40 	call	10095d4 <__umodsi3>
 10078d4:	1004943a 	slli	r2,r2,16
 10078d8:	bd09383a 	mul	r4,r23,r20
 10078dc:	e0ffffcc 	andi	r3,fp,65535
 10078e0:	10c4b03a 	or	r2,r2,r3
 10078e4:	1100042e 	bgeu	r2,r4,10078f8 <__udivdi3+0x120>
 10078e8:	8085883a 	add	r2,r16,r2
 10078ec:	a53fffc4 	addi	r20,r20,-1
 10078f0:	14000136 	bltu	r2,r16,10078f8 <__udivdi3+0x120>
 10078f4:	11012036 	bltu	r2,r4,1007d78 <__udivdi3+0x5a0>
 10078f8:	b004943a 	slli	r2,r22,16
 10078fc:	d9000317 	ldw	r4,12(sp)
 1007900:	a084b03a 	or	r2,r20,r2
 1007904:	00001506 	br	100795c <__udivdi3+0x184>
 1007908:	380d883a 	mov	r6,r7
 100790c:	29c06236 	bltu	r5,r7,1007a98 <__udivdi3+0x2c0>
 1007910:	00bfffd4 	movui	r2,65535
 1007914:	11c05a36 	bltu	r2,r7,1007a80 <__udivdi3+0x2a8>
 1007918:	00803fc4 	movi	r2,255
 100791c:	11c0fc36 	bltu	r2,r7,1007d10 <__udivdi3+0x538>
 1007920:	000b883a 	mov	r5,zero
 1007924:	0005883a 	mov	r2,zero
 1007928:	3084d83a 	srl	r2,r6,r2
 100792c:	01004074 	movhi	r4,257
 1007930:	21338004 	addi	r4,r4,-12800
 1007934:	01c00804 	movi	r7,32
 1007938:	1105883a 	add	r2,r2,r4
 100793c:	10c00003 	ldbu	r3,0(r2)
 1007940:	28c7883a 	add	r3,r5,r3
 1007944:	38efc83a 	sub	r23,r7,r3
 1007948:	b800691e 	bne	r23,zero,1007af0 <__udivdi3+0x318>
 100794c:	35000136 	bltu	r6,r20,1007954 <__udivdi3+0x17c>
 1007950:	e4005136 	bltu	fp,r16,1007a98 <__udivdi3+0x2c0>
 1007954:	00800044 	movi	r2,1
 1007958:	0009883a 	mov	r4,zero
 100795c:	2007883a 	mov	r3,r4
 1007960:	dfc00f17 	ldw	ra,60(sp)
 1007964:	df000e17 	ldw	fp,56(sp)
 1007968:	ddc00d17 	ldw	r23,52(sp)
 100796c:	dd800c17 	ldw	r22,48(sp)
 1007970:	dd400b17 	ldw	r21,44(sp)
 1007974:	dd000a17 	ldw	r20,40(sp)
 1007978:	dcc00917 	ldw	r19,36(sp)
 100797c:	dc800817 	ldw	r18,32(sp)
 1007980:	dc400717 	ldw	r17,28(sp)
 1007984:	dc000617 	ldw	r16,24(sp)
 1007988:	dec01004 	addi	sp,sp,64
 100798c:	f800283a 	ret
 1007990:	00bfffd4 	movui	r2,65535
 1007994:	12005036 	bltu	r2,r8,1007ad8 <__udivdi3+0x300>
 1007998:	00803fc4 	movi	r2,255
 100799c:	1200e836 	bltu	r2,r8,1007d40 <__udivdi3+0x568>
 10079a0:	000b883a 	mov	r5,zero
 10079a4:	0005883a 	mov	r2,zero
 10079a8:	8084d83a 	srl	r2,r16,r2
 10079ac:	01004074 	movhi	r4,257
 10079b0:	21338004 	addi	r4,r4,-12800
 10079b4:	01800804 	movi	r6,32
 10079b8:	1105883a 	add	r2,r2,r4
 10079bc:	10c00003 	ldbu	r3,0(r2)
 10079c0:	28c7883a 	add	r3,r5,r3
 10079c4:	30cbc83a 	sub	r5,r6,r3
 10079c8:	28000626 	beq	r5,zero,10079e4 <__udivdi3+0x20c>
 10079cc:	3145c83a 	sub	r2,r6,r5
 10079d0:	e084d83a 	srl	r2,fp,r2
 10079d4:	a146983a 	sll	r3,r20,r5
 10079d8:	e178983a 	sll	fp,fp,r5
 10079dc:	8160983a 	sll	r16,r16,r5
 10079e0:	18a8b03a 	or	r20,r3,r2
 10079e4:	802ad43a 	srli	r21,r16,16
 10079e8:	a009883a 	mov	r4,r20
 10079ec:	85ffffcc 	andi	r23,r16,65535
 10079f0:	a80b883a 	mov	r5,r21
 10079f4:	10095cc0 	call	10095cc <__udivsi3>
 10079f8:	a009883a 	mov	r4,r20
 10079fc:	a80b883a 	mov	r5,r21
 1007a00:	102d883a 	mov	r22,r2
 1007a04:	10095d40 	call	10095d4 <__umodsi3>
 1007a08:	1004943a 	slli	r2,r2,16
 1007a0c:	e006d43a 	srli	r3,fp,16
 1007a10:	bda3383a 	mul	r17,r23,r22
 1007a14:	10c4b03a 	or	r2,r2,r3
 1007a18:	1440042e 	bgeu	r2,r17,1007a2c <__udivdi3+0x254>
 1007a1c:	1405883a 	add	r2,r2,r16
 1007a20:	b5bfffc4 	addi	r22,r22,-1
 1007a24:	14000136 	bltu	r2,r16,1007a2c <__udivdi3+0x254>
 1007a28:	1440d536 	bltu	r2,r17,1007d80 <__udivdi3+0x5a8>
 1007a2c:	1463c83a 	sub	r17,r2,r17
 1007a30:	8809883a 	mov	r4,r17
 1007a34:	a80b883a 	mov	r5,r21
 1007a38:	10095cc0 	call	10095cc <__udivsi3>
 1007a3c:	8809883a 	mov	r4,r17
 1007a40:	a80b883a 	mov	r5,r21
 1007a44:	1029883a 	mov	r20,r2
 1007a48:	10095d40 	call	10095d4 <__umodsi3>
 1007a4c:	1004943a 	slli	r2,r2,16
 1007a50:	bd09383a 	mul	r4,r23,r20
 1007a54:	e0ffffcc 	andi	r3,fp,65535
 1007a58:	10c4b03a 	or	r2,r2,r3
 1007a5c:	1100042e 	bgeu	r2,r4,1007a70 <__udivdi3+0x298>
 1007a60:	8085883a 	add	r2,r16,r2
 1007a64:	a53fffc4 	addi	r20,r20,-1
 1007a68:	14000136 	bltu	r2,r16,1007a70 <__udivdi3+0x298>
 1007a6c:	1100c736 	bltu	r2,r4,1007d8c <__udivdi3+0x5b4>
 1007a70:	b004943a 	slli	r2,r22,16
 1007a74:	0009883a 	mov	r4,zero
 1007a78:	a084b03a 	or	r2,r20,r2
 1007a7c:	003fb706 	br	100795c <__udivdi3+0x184>
 1007a80:	00804034 	movhi	r2,256
 1007a84:	10bfffc4 	addi	r2,r2,-1
 1007a88:	11c0a436 	bltu	r2,r7,1007d1c <__udivdi3+0x544>
 1007a8c:	01400404 	movi	r5,16
 1007a90:	2805883a 	mov	r2,r5
 1007a94:	003fa406 	br	1007928 <__udivdi3+0x150>
 1007a98:	0005883a 	mov	r2,zero
 1007a9c:	0009883a 	mov	r4,zero
 1007aa0:	003fae06 	br	100795c <__udivdi3+0x184>
 1007aa4:	00804034 	movhi	r2,256
 1007aa8:	10bfffc4 	addi	r2,r2,-1
 1007aac:	1400a136 	bltu	r2,r16,1007d34 <__udivdi3+0x55c>
 1007ab0:	01400404 	movi	r5,16
 1007ab4:	2805883a 	mov	r2,r5
 1007ab8:	003f6006 	br	100783c <__udivdi3+0x64>
 1007abc:	01000044 	movi	r4,1
 1007ac0:	000b883a 	mov	r5,zero
 1007ac4:	10095cc0 	call	10095cc <__udivsi3>
 1007ac8:	1021883a 	mov	r16,r2
 1007acc:	00bfffd4 	movui	r2,65535
 1007ad0:	143ff436 	bltu	r2,r16,1007aa4 <__udivdi3+0x2cc>
 1007ad4:	003f5506 	br	100782c <__udivdi3+0x54>
 1007ad8:	00804034 	movhi	r2,256
 1007adc:	10bfffc4 	addi	r2,r2,-1
 1007ae0:	12009a36 	bltu	r2,r8,1007d4c <__udivdi3+0x574>
 1007ae4:	01400404 	movi	r5,16
 1007ae8:	2805883a 	mov	r2,r5
 1007aec:	003fae06 	br	10079a8 <__udivdi3+0x1d0>
 1007af0:	3dc5c83a 	sub	r2,r7,r23
 1007af4:	35c8983a 	sll	r4,r6,r23
 1007af8:	8086d83a 	srl	r3,r16,r2
 1007afc:	a0a2d83a 	srl	r17,r20,r2
 1007b00:	e084d83a 	srl	r2,fp,r2
 1007b04:	20eab03a 	or	r21,r4,r3
 1007b08:	a82cd43a 	srli	r22,r21,16
 1007b0c:	a5c6983a 	sll	r3,r20,r23
 1007b10:	8809883a 	mov	r4,r17
 1007b14:	b00b883a 	mov	r5,r22
 1007b18:	1886b03a 	or	r3,r3,r2
 1007b1c:	d8c00215 	stw	r3,8(sp)
 1007b20:	10095cc0 	call	10095cc <__udivsi3>
 1007b24:	8809883a 	mov	r4,r17
 1007b28:	b00b883a 	mov	r5,r22
 1007b2c:	1029883a 	mov	r20,r2
 1007b30:	10095d40 	call	10095d4 <__umodsi3>
 1007b34:	a8ffffcc 	andi	r3,r21,65535
 1007b38:	d8c00515 	stw	r3,20(sp)
 1007b3c:	d9000217 	ldw	r4,8(sp)
 1007b40:	d9400517 	ldw	r5,20(sp)
 1007b44:	1004943a 	slli	r2,r2,16
 1007b48:	2006d43a 	srli	r3,r4,16
 1007b4c:	85e0983a 	sll	r16,r16,r23
 1007b50:	2d23383a 	mul	r17,r5,r20
 1007b54:	10c4b03a 	or	r2,r2,r3
 1007b58:	dc000015 	stw	r16,0(sp)
 1007b5c:	1440032e 	bgeu	r2,r17,1007b6c <__udivdi3+0x394>
 1007b60:	1545883a 	add	r2,r2,r21
 1007b64:	a53fffc4 	addi	r20,r20,-1
 1007b68:	15407f2e 	bgeu	r2,r21,1007d68 <__udivdi3+0x590>
 1007b6c:	1463c83a 	sub	r17,r2,r17
 1007b70:	8809883a 	mov	r4,r17
 1007b74:	b00b883a 	mov	r5,r22
 1007b78:	10095cc0 	call	10095cc <__udivsi3>
 1007b7c:	8809883a 	mov	r4,r17
 1007b80:	b00b883a 	mov	r5,r22
 1007b84:	1021883a 	mov	r16,r2
 1007b88:	10095d40 	call	10095d4 <__umodsi3>
 1007b8c:	d8c00517 	ldw	r3,20(sp)
 1007b90:	d9000217 	ldw	r4,8(sp)
 1007b94:	1004943a 	slli	r2,r2,16
 1007b98:	1c0f383a 	mul	r7,r3,r16
 1007b9c:	20ffffcc 	andi	r3,r4,65535
 1007ba0:	10e2b03a 	or	r17,r2,r3
 1007ba4:	89c0032e 	bgeu	r17,r7,1007bb4 <__udivdi3+0x3dc>
 1007ba8:	8d63883a 	add	r17,r17,r21
 1007bac:	843fffc4 	addi	r16,r16,-1
 1007bb0:	8d40692e 	bgeu	r17,r21,1007d58 <__udivdi3+0x580>
 1007bb4:	a008943a 	slli	r4,r20,16
 1007bb8:	d9400017 	ldw	r5,0(sp)
 1007bbc:	89e3c83a 	sub	r17,r17,r7
 1007bc0:	8110b03a 	or	r8,r16,r4
 1007bc4:	280cd43a 	srli	r6,r5,16
 1007bc8:	28ffffcc 	andi	r3,r5,65535
 1007bcc:	40bfffcc 	andi	r2,r8,65535
 1007bd0:	400ad43a 	srli	r5,r8,16
 1007bd4:	10d3383a 	mul	r9,r2,r3
 1007bd8:	1185383a 	mul	r2,r2,r6
 1007bdc:	28c7383a 	mul	r3,r5,r3
 1007be0:	4808d43a 	srli	r4,r9,16
 1007be4:	298b383a 	mul	r5,r5,r6
 1007be8:	10c5883a 	add	r2,r2,r3
 1007bec:	2089883a 	add	r4,r4,r2
 1007bf0:	20c0022e 	bgeu	r4,r3,1007bfc <__udivdi3+0x424>
 1007bf4:	00800074 	movhi	r2,1
 1007bf8:	288b883a 	add	r5,r5,r2
 1007bfc:	2004d43a 	srli	r2,r4,16
 1007c00:	288b883a 	add	r5,r5,r2
 1007c04:	89403f36 	bltu	r17,r5,1007d04 <__udivdi3+0x52c>
 1007c08:	89403926 	beq	r17,r5,1007cf0 <__udivdi3+0x518>
 1007c0c:	4005883a 	mov	r2,r8
 1007c10:	0009883a 	mov	r4,zero
 1007c14:	003f5106 	br	100795c <__udivdi3+0x184>
 1007c18:	85a0983a 	sll	r16,r16,r22
 1007c1c:	3585c83a 	sub	r2,r6,r22
 1007c20:	a0a2d83a 	srl	r17,r20,r2
 1007c24:	802ad43a 	srli	r21,r16,16
 1007c28:	e084d83a 	srl	r2,fp,r2
 1007c2c:	a586983a 	sll	r3,r20,r22
 1007c30:	8809883a 	mov	r4,r17
 1007c34:	a80b883a 	mov	r5,r21
 1007c38:	1886b03a 	or	r3,r3,r2
 1007c3c:	d8c00115 	stw	r3,4(sp)
 1007c40:	10095cc0 	call	10095cc <__udivsi3>
 1007c44:	8809883a 	mov	r4,r17
 1007c48:	a80b883a 	mov	r5,r21
 1007c4c:	d8800415 	stw	r2,16(sp)
 1007c50:	10095d40 	call	10095d4 <__umodsi3>
 1007c54:	d9000117 	ldw	r4,4(sp)
 1007c58:	d9400417 	ldw	r5,16(sp)
 1007c5c:	1004943a 	slli	r2,r2,16
 1007c60:	85ffffcc 	andi	r23,r16,65535
 1007c64:	2006d43a 	srli	r3,r4,16
 1007c68:	b963383a 	mul	r17,r23,r5
 1007c6c:	10c4b03a 	or	r2,r2,r3
 1007c70:	1440042e 	bgeu	r2,r17,1007c84 <__udivdi3+0x4ac>
 1007c74:	297fffc4 	addi	r5,r5,-1
 1007c78:	1405883a 	add	r2,r2,r16
 1007c7c:	d9400415 	stw	r5,16(sp)
 1007c80:	1400442e 	bgeu	r2,r16,1007d94 <__udivdi3+0x5bc>
 1007c84:	1463c83a 	sub	r17,r2,r17
 1007c88:	8809883a 	mov	r4,r17
 1007c8c:	a80b883a 	mov	r5,r21
 1007c90:	10095cc0 	call	10095cc <__udivsi3>
 1007c94:	8809883a 	mov	r4,r17
 1007c98:	a80b883a 	mov	r5,r21
 1007c9c:	1029883a 	mov	r20,r2
 1007ca0:	10095d40 	call	10095d4 <__umodsi3>
 1007ca4:	d9400117 	ldw	r5,4(sp)
 1007ca8:	1004943a 	slli	r2,r2,16
 1007cac:	bd09383a 	mul	r4,r23,r20
 1007cb0:	28ffffcc 	andi	r3,r5,65535
 1007cb4:	10c6b03a 	or	r3,r2,r3
 1007cb8:	1900062e 	bgeu	r3,r4,1007cd4 <__udivdi3+0x4fc>
 1007cbc:	1c07883a 	add	r3,r3,r16
 1007cc0:	a53fffc4 	addi	r20,r20,-1
 1007cc4:	1c000336 	bltu	r3,r16,1007cd4 <__udivdi3+0x4fc>
 1007cc8:	1900022e 	bgeu	r3,r4,1007cd4 <__udivdi3+0x4fc>
 1007ccc:	a53fffc4 	addi	r20,r20,-1
 1007cd0:	1c07883a 	add	r3,r3,r16
 1007cd4:	d9400417 	ldw	r5,16(sp)
 1007cd8:	e5b8983a 	sll	fp,fp,r22
 1007cdc:	1923c83a 	sub	r17,r3,r4
 1007ce0:	2804943a 	slli	r2,r5,16
 1007ce4:	a0a8b03a 	or	r20,r20,r2
 1007ce8:	dd000315 	stw	r20,12(sp)
 1007cec:	003ee106 	br	1007874 <__udivdi3+0x9c>
 1007cf0:	2004943a 	slli	r2,r4,16
 1007cf4:	e5c8983a 	sll	r4,fp,r23
 1007cf8:	48ffffcc 	andi	r3,r9,65535
 1007cfc:	10c5883a 	add	r2,r2,r3
 1007d00:	20bfc22e 	bgeu	r4,r2,1007c0c <__udivdi3+0x434>
 1007d04:	40bfffc4 	addi	r2,r8,-1
 1007d08:	0009883a 	mov	r4,zero
 1007d0c:	003f1306 	br	100795c <__udivdi3+0x184>
 1007d10:	01400204 	movi	r5,8
 1007d14:	2805883a 	mov	r2,r5
 1007d18:	003f0306 	br	1007928 <__udivdi3+0x150>
 1007d1c:	01400604 	movi	r5,24
 1007d20:	2805883a 	mov	r2,r5
 1007d24:	003f0006 	br	1007928 <__udivdi3+0x150>
 1007d28:	01400204 	movi	r5,8
 1007d2c:	2805883a 	mov	r2,r5
 1007d30:	003ec206 	br	100783c <__udivdi3+0x64>
 1007d34:	01400604 	movi	r5,24
 1007d38:	2805883a 	mov	r2,r5
 1007d3c:	003ebf06 	br	100783c <__udivdi3+0x64>
 1007d40:	01400204 	movi	r5,8
 1007d44:	2805883a 	mov	r2,r5
 1007d48:	003f1706 	br	10079a8 <__udivdi3+0x1d0>
 1007d4c:	01400604 	movi	r5,24
 1007d50:	2805883a 	mov	r2,r5
 1007d54:	003f1406 	br	10079a8 <__udivdi3+0x1d0>
 1007d58:	89ff962e 	bgeu	r17,r7,1007bb4 <__udivdi3+0x3dc>
 1007d5c:	8d63883a 	add	r17,r17,r21
 1007d60:	843fffc4 	addi	r16,r16,-1
 1007d64:	003f9306 	br	1007bb4 <__udivdi3+0x3dc>
 1007d68:	147f802e 	bgeu	r2,r17,1007b6c <__udivdi3+0x394>
 1007d6c:	a53fffc4 	addi	r20,r20,-1
 1007d70:	1545883a 	add	r2,r2,r21
 1007d74:	003f7d06 	br	1007b6c <__udivdi3+0x394>
 1007d78:	a53fffc4 	addi	r20,r20,-1
 1007d7c:	003ede06 	br	10078f8 <__udivdi3+0x120>
 1007d80:	b5bfffc4 	addi	r22,r22,-1
 1007d84:	1405883a 	add	r2,r2,r16
 1007d88:	003f2806 	br	1007a2c <__udivdi3+0x254>
 1007d8c:	a53fffc4 	addi	r20,r20,-1
 1007d90:	003f3706 	br	1007a70 <__udivdi3+0x298>
 1007d94:	147fbb2e 	bgeu	r2,r17,1007c84 <__udivdi3+0x4ac>
 1007d98:	297fffc4 	addi	r5,r5,-1
 1007d9c:	1405883a 	add	r2,r2,r16
 1007da0:	d9400415 	stw	r5,16(sp)
 1007da4:	003fb706 	br	1007c84 <__udivdi3+0x4ac>
 1007da8:	b5bfffc4 	addi	r22,r22,-1
 1007dac:	1405883a 	add	r2,r2,r16
 1007db0:	003ec006 	br	10078b4 <__udivdi3+0xdc>

01007db4 <__umoddi3>:
 1007db4:	defff104 	addi	sp,sp,-60
 1007db8:	dd800b15 	stw	r22,44(sp)
 1007dbc:	dd000915 	stw	r20,36(sp)
 1007dc0:	dc000515 	stw	r16,20(sp)
 1007dc4:	dfc00e15 	stw	ra,56(sp)
 1007dc8:	df000d15 	stw	fp,52(sp)
 1007dcc:	ddc00c15 	stw	r23,48(sp)
 1007dd0:	dd400a15 	stw	r21,40(sp)
 1007dd4:	dcc00815 	stw	r19,32(sp)
 1007dd8:	dc800715 	stw	r18,28(sp)
 1007ddc:	dc400615 	stw	r17,24(sp)
 1007de0:	3021883a 	mov	r16,r6
 1007de4:	202d883a 	mov	r22,r4
 1007de8:	2829883a 	mov	r20,r5
 1007dec:	38002b1e 	bne	r7,zero,1007e9c <__umoddi3+0xe8>
 1007df0:	29805036 	bltu	r5,r6,1007f34 <__umoddi3+0x180>
 1007df4:	30008a26 	beq	r6,zero,1008020 <__umoddi3+0x26c>
 1007df8:	00bfffd4 	movui	r2,65535
 1007dfc:	14008236 	bltu	r2,r16,1008008 <__umoddi3+0x254>
 1007e00:	00803fc4 	movi	r2,255
 1007e04:	14013636 	bltu	r2,r16,10082e0 <__umoddi3+0x52c>
 1007e08:	000b883a 	mov	r5,zero
 1007e0c:	0005883a 	mov	r2,zero
 1007e10:	8084d83a 	srl	r2,r16,r2
 1007e14:	01004074 	movhi	r4,257
 1007e18:	21338004 	addi	r4,r4,-12800
 1007e1c:	01800804 	movi	r6,32
 1007e20:	1105883a 	add	r2,r2,r4
 1007e24:	10c00003 	ldbu	r3,0(r2)
 1007e28:	28c7883a 	add	r3,r5,r3
 1007e2c:	30efc83a 	sub	r23,r6,r3
 1007e30:	b800941e 	bne	r23,zero,1008084 <__umoddi3+0x2d0>
 1007e34:	802ad43a 	srli	r21,r16,16
 1007e38:	a423c83a 	sub	r17,r20,r16
 1007e3c:	0039883a 	mov	fp,zero
 1007e40:	853fffcc 	andi	r20,r16,65535
 1007e44:	8809883a 	mov	r4,r17
 1007e48:	a80b883a 	mov	r5,r21
 1007e4c:	10095cc0 	call	10095cc <__udivsi3>
 1007e50:	8809883a 	mov	r4,r17
 1007e54:	a80b883a 	mov	r5,r21
 1007e58:	a0a3383a 	mul	r17,r20,r2
 1007e5c:	10095d40 	call	10095d4 <__umodsi3>
 1007e60:	1004943a 	slli	r2,r2,16
 1007e64:	b006d43a 	srli	r3,r22,16
 1007e68:	10c4b03a 	or	r2,r2,r3
 1007e6c:	1440032e 	bgeu	r2,r17,1007e7c <__umoddi3+0xc8>
 1007e70:	1405883a 	add	r2,r2,r16
 1007e74:	14000136 	bltu	r2,r16,1007e7c <__umoddi3+0xc8>
 1007e78:	14413536 	bltu	r2,r17,1008350 <__umoddi3+0x59c>
 1007e7c:	1463c83a 	sub	r17,r2,r17
 1007e80:	8809883a 	mov	r4,r17
 1007e84:	a80b883a 	mov	r5,r21
 1007e88:	10095cc0 	call	10095cc <__udivsi3>
 1007e8c:	8809883a 	mov	r4,r17
 1007e90:	a0a3383a 	mul	r17,r20,r2
 1007e94:	a80b883a 	mov	r5,r21
 1007e98:	00004d06 	br	1007fd0 <__umoddi3+0x21c>
 1007e9c:	380d883a 	mov	r6,r7
 1007ea0:	29c0102e 	bgeu	r5,r7,1007ee4 <__umoddi3+0x130>
 1007ea4:	2011883a 	mov	r8,r4
 1007ea8:	2813883a 	mov	r9,r5
 1007eac:	4005883a 	mov	r2,r8
 1007eb0:	4807883a 	mov	r3,r9
 1007eb4:	dfc00e17 	ldw	ra,56(sp)
 1007eb8:	df000d17 	ldw	fp,52(sp)
 1007ebc:	ddc00c17 	ldw	r23,48(sp)
 1007ec0:	dd800b17 	ldw	r22,44(sp)
 1007ec4:	dd400a17 	ldw	r21,40(sp)
 1007ec8:	dd000917 	ldw	r20,36(sp)
 1007ecc:	dcc00817 	ldw	r19,32(sp)
 1007ed0:	dc800717 	ldw	r18,28(sp)
 1007ed4:	dc400617 	ldw	r17,24(sp)
 1007ed8:	dc000517 	ldw	r16,20(sp)
 1007edc:	dec00f04 	addi	sp,sp,60
 1007ee0:	f800283a 	ret
 1007ee4:	00bfffd4 	movui	r2,65535
 1007ee8:	11c05a36 	bltu	r2,r7,1008054 <__umoddi3+0x2a0>
 1007eec:	00803fc4 	movi	r2,255
 1007ef0:	11c0fe36 	bltu	r2,r7,10082ec <__umoddi3+0x538>
 1007ef4:	000b883a 	mov	r5,zero
 1007ef8:	0005883a 	mov	r2,zero
 1007efc:	3084d83a 	srl	r2,r6,r2
 1007f00:	01004074 	movhi	r4,257
 1007f04:	21338004 	addi	r4,r4,-12800
 1007f08:	01c00804 	movi	r7,32
 1007f0c:	1105883a 	add	r2,r2,r4
 1007f10:	10c00003 	ldbu	r3,0(r2)
 1007f14:	28c7883a 	add	r3,r5,r3
 1007f18:	38ebc83a 	sub	r21,r7,r3
 1007f1c:	a800851e 	bne	r21,zero,1008134 <__umoddi3+0x380>
 1007f20:	35005236 	bltu	r6,r20,100806c <__umoddi3+0x2b8>
 1007f24:	b400512e 	bgeu	r22,r16,100806c <__umoddi3+0x2b8>
 1007f28:	b011883a 	mov	r8,r22
 1007f2c:	a013883a 	mov	r9,r20
 1007f30:	003fde06 	br	1007eac <__umoddi3+0xf8>
 1007f34:	00bfffd4 	movui	r2,65535
 1007f38:	11804036 	bltu	r2,r6,100803c <__umoddi3+0x288>
 1007f3c:	00803fc4 	movi	r2,255
 1007f40:	1180ed36 	bltu	r2,r6,10082f8 <__umoddi3+0x544>
 1007f44:	000b883a 	mov	r5,zero
 1007f48:	0005883a 	mov	r2,zero
 1007f4c:	8084d83a 	srl	r2,r16,r2
 1007f50:	01004074 	movhi	r4,257
 1007f54:	21338004 	addi	r4,r4,-12800
 1007f58:	01800804 	movi	r6,32
 1007f5c:	1105883a 	add	r2,r2,r4
 1007f60:	10c00003 	ldbu	r3,0(r2)
 1007f64:	28c7883a 	add	r3,r5,r3
 1007f68:	30c7c83a 	sub	r3,r6,r3
 1007f6c:	1800bf1e 	bne	r3,zero,100826c <__umoddi3+0x4b8>
 1007f70:	0039883a 	mov	fp,zero
 1007f74:	802ad43a 	srli	r21,r16,16
 1007f78:	a009883a 	mov	r4,r20
 1007f7c:	85ffffcc 	andi	r23,r16,65535
 1007f80:	a80b883a 	mov	r5,r21
 1007f84:	10095cc0 	call	10095cc <__udivsi3>
 1007f88:	a009883a 	mov	r4,r20
 1007f8c:	a80b883a 	mov	r5,r21
 1007f90:	b8a3383a 	mul	r17,r23,r2
 1007f94:	10095d40 	call	10095d4 <__umodsi3>
 1007f98:	1004943a 	slli	r2,r2,16
 1007f9c:	b006d43a 	srli	r3,r22,16
 1007fa0:	10c4b03a 	or	r2,r2,r3
 1007fa4:	1440032e 	bgeu	r2,r17,1007fb4 <__umoddi3+0x200>
 1007fa8:	1405883a 	add	r2,r2,r16
 1007fac:	14000136 	bltu	r2,r16,1007fb4 <__umoddi3+0x200>
 1007fb0:	1440e536 	bltu	r2,r17,1008348 <__umoddi3+0x594>
 1007fb4:	1463c83a 	sub	r17,r2,r17
 1007fb8:	8809883a 	mov	r4,r17
 1007fbc:	a80b883a 	mov	r5,r21
 1007fc0:	10095cc0 	call	10095cc <__udivsi3>
 1007fc4:	8809883a 	mov	r4,r17
 1007fc8:	b8a3383a 	mul	r17,r23,r2
 1007fcc:	a80b883a 	mov	r5,r21
 1007fd0:	10095d40 	call	10095d4 <__umodsi3>
 1007fd4:	1004943a 	slli	r2,r2,16
 1007fd8:	b0ffffcc 	andi	r3,r22,65535
 1007fdc:	10c4b03a 	or	r2,r2,r3
 1007fe0:	1440042e 	bgeu	r2,r17,1007ff4 <__umoddi3+0x240>
 1007fe4:	1405883a 	add	r2,r2,r16
 1007fe8:	14000236 	bltu	r2,r16,1007ff4 <__umoddi3+0x240>
 1007fec:	1440012e 	bgeu	r2,r17,1007ff4 <__umoddi3+0x240>
 1007ff0:	1405883a 	add	r2,r2,r16
 1007ff4:	1445c83a 	sub	r2,r2,r17
 1007ff8:	1724d83a 	srl	r18,r2,fp
 1007ffc:	0013883a 	mov	r9,zero
 1008000:	9011883a 	mov	r8,r18
 1008004:	003fa906 	br	1007eac <__umoddi3+0xf8>
 1008008:	00804034 	movhi	r2,256
 100800c:	10bfffc4 	addi	r2,r2,-1
 1008010:	1400b036 	bltu	r2,r16,10082d4 <__umoddi3+0x520>
 1008014:	01400404 	movi	r5,16
 1008018:	2805883a 	mov	r2,r5
 100801c:	003f7c06 	br	1007e10 <__umoddi3+0x5c>
 1008020:	01000044 	movi	r4,1
 1008024:	000b883a 	mov	r5,zero
 1008028:	10095cc0 	call	10095cc <__udivsi3>
 100802c:	1021883a 	mov	r16,r2
 1008030:	00bfffd4 	movui	r2,65535
 1008034:	143ff436 	bltu	r2,r16,1008008 <__umoddi3+0x254>
 1008038:	003f7106 	br	1007e00 <__umoddi3+0x4c>
 100803c:	00804034 	movhi	r2,256
 1008040:	10bfffc4 	addi	r2,r2,-1
 1008044:	1180af36 	bltu	r2,r6,1008304 <__umoddi3+0x550>
 1008048:	01400404 	movi	r5,16
 100804c:	2805883a 	mov	r2,r5
 1008050:	003fbe06 	br	1007f4c <__umoddi3+0x198>
 1008054:	00804034 	movhi	r2,256
 1008058:	10bfffc4 	addi	r2,r2,-1
 100805c:	11c0ac36 	bltu	r2,r7,1008310 <__umoddi3+0x55c>
 1008060:	01400404 	movi	r5,16
 1008064:	2805883a 	mov	r2,r5
 1008068:	003fa406 	br	1007efc <__umoddi3+0x148>
 100806c:	b409c83a 	sub	r4,r22,r16
 1008070:	b105803a 	cmpltu	r2,r22,r4
 1008074:	a187c83a 	sub	r3,r20,r6
 1008078:	18a9c83a 	sub	r20,r3,r2
 100807c:	202d883a 	mov	r22,r4
 1008080:	003fa906 	br	1007f28 <__umoddi3+0x174>
 1008084:	85e0983a 	sll	r16,r16,r23
 1008088:	35c5c83a 	sub	r2,r6,r23
 100808c:	a0a2d83a 	srl	r17,r20,r2
 1008090:	802ad43a 	srli	r21,r16,16
 1008094:	b084d83a 	srl	r2,r22,r2
 1008098:	a5c6983a 	sll	r3,r20,r23
 100809c:	8809883a 	mov	r4,r17
 10080a0:	a80b883a 	mov	r5,r21
 10080a4:	1886b03a 	or	r3,r3,r2
 10080a8:	d8c00115 	stw	r3,4(sp)
 10080ac:	853fffcc 	andi	r20,r16,65535
 10080b0:	10095cc0 	call	10095cc <__udivsi3>
 10080b4:	8809883a 	mov	r4,r17
 10080b8:	a80b883a 	mov	r5,r21
 10080bc:	a0a3383a 	mul	r17,r20,r2
 10080c0:	10095d40 	call	10095d4 <__umodsi3>
 10080c4:	d9000117 	ldw	r4,4(sp)
 10080c8:	1004943a 	slli	r2,r2,16
 10080cc:	b839883a 	mov	fp,r23
 10080d0:	2006d43a 	srli	r3,r4,16
 10080d4:	10c4b03a 	or	r2,r2,r3
 10080d8:	1440022e 	bgeu	r2,r17,10080e4 <__umoddi3+0x330>
 10080dc:	1405883a 	add	r2,r2,r16
 10080e0:	1400962e 	bgeu	r2,r16,100833c <__umoddi3+0x588>
 10080e4:	1463c83a 	sub	r17,r2,r17
 10080e8:	8809883a 	mov	r4,r17
 10080ec:	a80b883a 	mov	r5,r21
 10080f0:	10095cc0 	call	10095cc <__udivsi3>
 10080f4:	8809883a 	mov	r4,r17
 10080f8:	a80b883a 	mov	r5,r21
 10080fc:	a0a3383a 	mul	r17,r20,r2
 1008100:	10095d40 	call	10095d4 <__umodsi3>
 1008104:	d9400117 	ldw	r5,4(sp)
 1008108:	1004943a 	slli	r2,r2,16
 100810c:	28ffffcc 	andi	r3,r5,65535
 1008110:	10c4b03a 	or	r2,r2,r3
 1008114:	1440042e 	bgeu	r2,r17,1008128 <__umoddi3+0x374>
 1008118:	1405883a 	add	r2,r2,r16
 100811c:	14000236 	bltu	r2,r16,1008128 <__umoddi3+0x374>
 1008120:	1440012e 	bgeu	r2,r17,1008128 <__umoddi3+0x374>
 1008124:	1405883a 	add	r2,r2,r16
 1008128:	b5ec983a 	sll	r22,r22,r23
 100812c:	1463c83a 	sub	r17,r2,r17
 1008130:	003f4406 	br	1007e44 <__umoddi3+0x90>
 1008134:	3d4fc83a 	sub	r7,r7,r21
 1008138:	3546983a 	sll	r3,r6,r21
 100813c:	81c4d83a 	srl	r2,r16,r7
 1008140:	a1e2d83a 	srl	r17,r20,r7
 1008144:	a54c983a 	sll	r6,r20,r21
 1008148:	18aeb03a 	or	r23,r3,r2
 100814c:	b828d43a 	srli	r20,r23,16
 1008150:	b1c4d83a 	srl	r2,r22,r7
 1008154:	8809883a 	mov	r4,r17
 1008158:	a00b883a 	mov	r5,r20
 100815c:	308cb03a 	or	r6,r6,r2
 1008160:	d9c00315 	stw	r7,12(sp)
 1008164:	d9800215 	stw	r6,8(sp)
 1008168:	10095cc0 	call	10095cc <__udivsi3>
 100816c:	8809883a 	mov	r4,r17
 1008170:	a00b883a 	mov	r5,r20
 1008174:	1039883a 	mov	fp,r2
 1008178:	10095d40 	call	10095d4 <__umodsi3>
 100817c:	b8ffffcc 	andi	r3,r23,65535
 1008180:	d8c00415 	stw	r3,16(sp)
 1008184:	d9000217 	ldw	r4,8(sp)
 1008188:	d9400417 	ldw	r5,16(sp)
 100818c:	1004943a 	slli	r2,r2,16
 1008190:	2006d43a 	srli	r3,r4,16
 1008194:	8560983a 	sll	r16,r16,r21
 1008198:	2f23383a 	mul	r17,r5,fp
 100819c:	10c4b03a 	or	r2,r2,r3
 10081a0:	dc000015 	stw	r16,0(sp)
 10081a4:	b56c983a 	sll	r22,r22,r21
 10081a8:	1440032e 	bgeu	r2,r17,10081b8 <__umoddi3+0x404>
 10081ac:	15c5883a 	add	r2,r2,r23
 10081b0:	e73fffc4 	addi	fp,fp,-1
 10081b4:	15c05d2e 	bgeu	r2,r23,100832c <__umoddi3+0x578>
 10081b8:	1463c83a 	sub	r17,r2,r17
 10081bc:	8809883a 	mov	r4,r17
 10081c0:	a00b883a 	mov	r5,r20
 10081c4:	10095cc0 	call	10095cc <__udivsi3>
 10081c8:	8809883a 	mov	r4,r17
 10081cc:	a00b883a 	mov	r5,r20
 10081d0:	1021883a 	mov	r16,r2
 10081d4:	10095d40 	call	10095d4 <__umodsi3>
 10081d8:	d8c00417 	ldw	r3,16(sp)
 10081dc:	d9000217 	ldw	r4,8(sp)
 10081e0:	1004943a 	slli	r2,r2,16
 10081e4:	1c23383a 	mul	r17,r3,r16
 10081e8:	20ffffcc 	andi	r3,r4,65535
 10081ec:	10ceb03a 	or	r7,r2,r3
 10081f0:	3c40032e 	bgeu	r7,r17,1008200 <__umoddi3+0x44c>
 10081f4:	3dcf883a 	add	r7,r7,r23
 10081f8:	843fffc4 	addi	r16,r16,-1
 10081fc:	3dc0472e 	bgeu	r7,r23,100831c <__umoddi3+0x568>
 1008200:	e004943a 	slli	r2,fp,16
 1008204:	d9400017 	ldw	r5,0(sp)
 1008208:	3c4fc83a 	sub	r7,r7,r17
 100820c:	8084b03a 	or	r2,r16,r2
 1008210:	28ffffcc 	andi	r3,r5,65535
 1008214:	280cd43a 	srli	r6,r5,16
 1008218:	100ad43a 	srli	r5,r2,16
 100821c:	10bfffcc 	andi	r2,r2,65535
 1008220:	10d1383a 	mul	r8,r2,r3
 1008224:	28c7383a 	mul	r3,r5,r3
 1008228:	1185383a 	mul	r2,r2,r6
 100822c:	4008d43a 	srli	r4,r8,16
 1008230:	298b383a 	mul	r5,r5,r6
 1008234:	10c5883a 	add	r2,r2,r3
 1008238:	2089883a 	add	r4,r4,r2
 100823c:	20c0022e 	bgeu	r4,r3,1008248 <__umoddi3+0x494>
 1008240:	00800074 	movhi	r2,1
 1008244:	288b883a 	add	r5,r5,r2
 1008248:	2004d43a 	srli	r2,r4,16
 100824c:	2008943a 	slli	r4,r4,16
 1008250:	40ffffcc 	andi	r3,r8,65535
 1008254:	288b883a 	add	r5,r5,r2
 1008258:	20c9883a 	add	r4,r4,r3
 100825c:	39400b36 	bltu	r7,r5,100828c <__umoddi3+0x4d8>
 1008260:	39403d26 	beq	r7,r5,1008358 <__umoddi3+0x5a4>
 1008264:	394bc83a 	sub	r5,r7,r5
 1008268:	00000f06 	br	10082a8 <__umoddi3+0x4f4>
 100826c:	30c5c83a 	sub	r2,r6,r3
 1008270:	1839883a 	mov	fp,r3
 1008274:	b084d83a 	srl	r2,r22,r2
 1008278:	a0c6983a 	sll	r3,r20,r3
 100827c:	8720983a 	sll	r16,r16,fp
 1008280:	b72c983a 	sll	r22,r22,fp
 1008284:	18a8b03a 	or	r20,r3,r2
 1008288:	003f3a06 	br	1007f74 <__umoddi3+0x1c0>
 100828c:	d8c00017 	ldw	r3,0(sp)
 1008290:	20c5c83a 	sub	r2,r4,r3
 1008294:	2089803a 	cmpltu	r4,r4,r2
 1008298:	2dc7c83a 	sub	r3,r5,r23
 100829c:	1907c83a 	sub	r3,r3,r4
 10082a0:	38cbc83a 	sub	r5,r7,r3
 10082a4:	1009883a 	mov	r4,r2
 10082a8:	b105c83a 	sub	r2,r22,r4
 10082ac:	b087803a 	cmpltu	r3,r22,r2
 10082b0:	28c7c83a 	sub	r3,r5,r3
 10082b4:	d9400317 	ldw	r5,12(sp)
 10082b8:	1544d83a 	srl	r2,r2,r21
 10082bc:	1948983a 	sll	r4,r3,r5
 10082c0:	1d46d83a 	srl	r3,r3,r21
 10082c4:	20a4b03a 	or	r18,r4,r2
 10082c8:	9011883a 	mov	r8,r18
 10082cc:	1813883a 	mov	r9,r3
 10082d0:	003ef606 	br	1007eac <__umoddi3+0xf8>
 10082d4:	01400604 	movi	r5,24
 10082d8:	2805883a 	mov	r2,r5
 10082dc:	003ecc06 	br	1007e10 <__umoddi3+0x5c>
 10082e0:	01400204 	movi	r5,8
 10082e4:	2805883a 	mov	r2,r5
 10082e8:	003ec906 	br	1007e10 <__umoddi3+0x5c>
 10082ec:	01400204 	movi	r5,8
 10082f0:	2805883a 	mov	r2,r5
 10082f4:	003f0106 	br	1007efc <__umoddi3+0x148>
 10082f8:	01400204 	movi	r5,8
 10082fc:	2805883a 	mov	r2,r5
 1008300:	003f1206 	br	1007f4c <__umoddi3+0x198>
 1008304:	01400604 	movi	r5,24
 1008308:	2805883a 	mov	r2,r5
 100830c:	003f0f06 	br	1007f4c <__umoddi3+0x198>
 1008310:	01400604 	movi	r5,24
 1008314:	2805883a 	mov	r2,r5
 1008318:	003ef806 	br	1007efc <__umoddi3+0x148>
 100831c:	3c7fb82e 	bgeu	r7,r17,1008200 <__umoddi3+0x44c>
 1008320:	843fffc4 	addi	r16,r16,-1
 1008324:	3dcf883a 	add	r7,r7,r23
 1008328:	003fb506 	br	1008200 <__umoddi3+0x44c>
 100832c:	147fa22e 	bgeu	r2,r17,10081b8 <__umoddi3+0x404>
 1008330:	e73fffc4 	addi	fp,fp,-1
 1008334:	15c5883a 	add	r2,r2,r23
 1008338:	003f9f06 	br	10081b8 <__umoddi3+0x404>
 100833c:	147f692e 	bgeu	r2,r17,10080e4 <__umoddi3+0x330>
 1008340:	1405883a 	add	r2,r2,r16
 1008344:	003f6706 	br	10080e4 <__umoddi3+0x330>
 1008348:	1405883a 	add	r2,r2,r16
 100834c:	003f1906 	br	1007fb4 <__umoddi3+0x200>
 1008350:	1405883a 	add	r2,r2,r16
 1008354:	003ec906 	br	1007e7c <__umoddi3+0xc8>
 1008358:	b13fcc36 	bltu	r22,r4,100828c <__umoddi3+0x4d8>
 100835c:	000b883a 	mov	r5,zero
 1008360:	003fd106 	br	10082a8 <__umoddi3+0x4f4>

01008364 <_fpadd_parts>:
 1008364:	defff804 	addi	sp,sp,-32
 1008368:	dcc00315 	stw	r19,12(sp)
 100836c:	2027883a 	mov	r19,r4
 1008370:	21000017 	ldw	r4,0(r4)
 1008374:	00c00044 	movi	r3,1
 1008378:	dd400515 	stw	r21,20(sp)
 100837c:	dd000415 	stw	r20,16(sp)
 1008380:	ddc00715 	stw	r23,28(sp)
 1008384:	dd800615 	stw	r22,24(sp)
 1008388:	dc800215 	stw	r18,8(sp)
 100838c:	dc400115 	stw	r17,4(sp)
 1008390:	dc000015 	stw	r16,0(sp)
 1008394:	282b883a 	mov	r21,r5
 1008398:	3029883a 	mov	r20,r6
 100839c:	1900632e 	bgeu	r3,r4,100852c <_fpadd_parts+0x1c8>
 10083a0:	28800017 	ldw	r2,0(r5)
 10083a4:	1880812e 	bgeu	r3,r2,10085ac <_fpadd_parts+0x248>
 10083a8:	00c00104 	movi	r3,4
 10083ac:	20c0dc26 	beq	r4,r3,1008720 <_fpadd_parts+0x3bc>
 10083b0:	10c07e26 	beq	r2,r3,10085ac <_fpadd_parts+0x248>
 10083b4:	00c00084 	movi	r3,2
 10083b8:	10c06726 	beq	r2,r3,1008558 <_fpadd_parts+0x1f4>
 10083bc:	20c07b26 	beq	r4,r3,10085ac <_fpadd_parts+0x248>
 10083c0:	9dc00217 	ldw	r23,8(r19)
 10083c4:	28c00217 	ldw	r3,8(r5)
 10083c8:	9c400317 	ldw	r17,12(r19)
 10083cc:	2bc00317 	ldw	r15,12(r5)
 10083d0:	b8cdc83a 	sub	r6,r23,r3
 10083d4:	9c800417 	ldw	r18,16(r19)
 10083d8:	2c000417 	ldw	r16,16(r5)
 10083dc:	3009883a 	mov	r4,r6
 10083e0:	30009716 	blt	r6,zero,1008640 <_fpadd_parts+0x2dc>
 10083e4:	00800fc4 	movi	r2,63
 10083e8:	11806b16 	blt	r2,r6,1008598 <_fpadd_parts+0x234>
 10083ec:	0100a40e 	bge	zero,r4,1008680 <_fpadd_parts+0x31c>
 10083f0:	35bff804 	addi	r22,r6,-32
 10083f4:	b000bc16 	blt	r22,zero,10086e8 <_fpadd_parts+0x384>
 10083f8:	8596d83a 	srl	r11,r16,r22
 10083fc:	0019883a 	mov	r12,zero
 1008400:	0013883a 	mov	r9,zero
 1008404:	01000044 	movi	r4,1
 1008408:	0015883a 	mov	r10,zero
 100840c:	b000be16 	blt	r22,zero,1008708 <_fpadd_parts+0x3a4>
 1008410:	2590983a 	sll	r8,r4,r22
 1008414:	000f883a 	mov	r7,zero
 1008418:	00bfffc4 	movi	r2,-1
 100841c:	3889883a 	add	r4,r7,r2
 1008420:	408b883a 	add	r5,r8,r2
 1008424:	21cd803a 	cmpltu	r6,r4,r7
 1008428:	314b883a 	add	r5,r6,r5
 100842c:	7904703a 	and	r2,r15,r4
 1008430:	8146703a 	and	r3,r16,r5
 1008434:	10c4b03a 	or	r2,r2,r3
 1008438:	10000226 	beq	r2,zero,1008444 <_fpadd_parts+0xe0>
 100843c:	02400044 	movi	r9,1
 1008440:	0015883a 	mov	r10,zero
 1008444:	5a5eb03a 	or	r15,r11,r9
 1008448:	62a0b03a 	or	r16,r12,r10
 100844c:	99400117 	ldw	r5,4(r19)
 1008450:	a8800117 	ldw	r2,4(r21)
 1008454:	28806e26 	beq	r5,r2,1008610 <_fpadd_parts+0x2ac>
 1008458:	28006626 	beq	r5,zero,10085f4 <_fpadd_parts+0x290>
 100845c:	7c45c83a 	sub	r2,r15,r17
 1008460:	7889803a 	cmpltu	r4,r15,r2
 1008464:	8487c83a 	sub	r3,r16,r18
 1008468:	1909c83a 	sub	r4,r3,r4
 100846c:	100d883a 	mov	r6,r2
 1008470:	200f883a 	mov	r7,r4
 1008474:	38007716 	blt	r7,zero,1008654 <_fpadd_parts+0x2f0>
 1008478:	a5c00215 	stw	r23,8(r20)
 100847c:	a1c00415 	stw	r7,16(r20)
 1008480:	a0000115 	stw	zero,4(r20)
 1008484:	a1800315 	stw	r6,12(r20)
 1008488:	a2000317 	ldw	r8,12(r20)
 100848c:	a2400417 	ldw	r9,16(r20)
 1008490:	00bfffc4 	movi	r2,-1
 1008494:	408b883a 	add	r5,r8,r2
 1008498:	2a09803a 	cmpltu	r4,r5,r8
 100849c:	488d883a 	add	r6,r9,r2
 10084a0:	01c40034 	movhi	r7,4096
 10084a4:	39ffffc4 	addi	r7,r7,-1
 10084a8:	218d883a 	add	r6,r4,r6
 10084ac:	39801736 	bltu	r7,r6,100850c <_fpadd_parts+0x1a8>
 10084b0:	31c06526 	beq	r6,r7,1008648 <_fpadd_parts+0x2e4>
 10084b4:	a3000217 	ldw	r12,8(r20)
 10084b8:	4209883a 	add	r4,r8,r8
 10084bc:	00bfffc4 	movi	r2,-1
 10084c0:	220f803a 	cmpltu	r7,r4,r8
 10084c4:	4a4b883a 	add	r5,r9,r9
 10084c8:	394f883a 	add	r7,r7,r5
 10084cc:	2095883a 	add	r10,r4,r2
 10084d0:	3897883a 	add	r11,r7,r2
 10084d4:	510d803a 	cmpltu	r6,r10,r4
 10084d8:	6099883a 	add	r12,r12,r2
 10084dc:	32d7883a 	add	r11,r6,r11
 10084e0:	00840034 	movhi	r2,4096
 10084e4:	10bfffc4 	addi	r2,r2,-1
 10084e8:	2011883a 	mov	r8,r4
 10084ec:	3813883a 	mov	r9,r7
 10084f0:	a1000315 	stw	r4,12(r20)
 10084f4:	a1c00415 	stw	r7,16(r20)
 10084f8:	a3000215 	stw	r12,8(r20)
 10084fc:	12c00336 	bltu	r2,r11,100850c <_fpadd_parts+0x1a8>
 1008500:	58bfed1e 	bne	r11,r2,10084b8 <_fpadd_parts+0x154>
 1008504:	00bfff84 	movi	r2,-2
 1008508:	12bfeb2e 	bgeu	r2,r10,10084b8 <_fpadd_parts+0x154>
 100850c:	a2800417 	ldw	r10,16(r20)
 1008510:	008000c4 	movi	r2,3
 1008514:	00c80034 	movhi	r3,8192
 1008518:	18ffffc4 	addi	r3,r3,-1
 100851c:	a2400317 	ldw	r9,12(r20)
 1008520:	a0800015 	stw	r2,0(r20)
 1008524:	1a802336 	bltu	r3,r10,10085b4 <_fpadd_parts+0x250>
 1008528:	a027883a 	mov	r19,r20
 100852c:	9805883a 	mov	r2,r19
 1008530:	ddc00717 	ldw	r23,28(sp)
 1008534:	dd800617 	ldw	r22,24(sp)
 1008538:	dd400517 	ldw	r21,20(sp)
 100853c:	dd000417 	ldw	r20,16(sp)
 1008540:	dcc00317 	ldw	r19,12(sp)
 1008544:	dc800217 	ldw	r18,8(sp)
 1008548:	dc400117 	ldw	r17,4(sp)
 100854c:	dc000017 	ldw	r16,0(sp)
 1008550:	dec00804 	addi	sp,sp,32
 1008554:	f800283a 	ret
 1008558:	20fff41e 	bne	r4,r3,100852c <_fpadd_parts+0x1c8>
 100855c:	31000015 	stw	r4,0(r6)
 1008560:	98800117 	ldw	r2,4(r19)
 1008564:	30800115 	stw	r2,4(r6)
 1008568:	98c00217 	ldw	r3,8(r19)
 100856c:	30c00215 	stw	r3,8(r6)
 1008570:	98800317 	ldw	r2,12(r19)
 1008574:	30800315 	stw	r2,12(r6)
 1008578:	98c00417 	ldw	r3,16(r19)
 100857c:	30c00415 	stw	r3,16(r6)
 1008580:	98800117 	ldw	r2,4(r19)
 1008584:	28c00117 	ldw	r3,4(r5)
 1008588:	3027883a 	mov	r19,r6
 100858c:	10c4703a 	and	r2,r2,r3
 1008590:	30800115 	stw	r2,4(r6)
 1008594:	003fe506 	br	100852c <_fpadd_parts+0x1c8>
 1008598:	1dc02616 	blt	r3,r23,1008634 <_fpadd_parts+0x2d0>
 100859c:	0023883a 	mov	r17,zero
 10085a0:	182f883a 	mov	r23,r3
 10085a4:	0025883a 	mov	r18,zero
 10085a8:	003fa806 	br	100844c <_fpadd_parts+0xe8>
 10085ac:	a827883a 	mov	r19,r21
 10085b0:	003fde06 	br	100852c <_fpadd_parts+0x1c8>
 10085b4:	01800044 	movi	r6,1
 10085b8:	500497fa 	slli	r2,r10,31
 10085bc:	4808d07a 	srli	r4,r9,1
 10085c0:	518ad83a 	srl	r5,r10,r6
 10085c4:	a2000217 	ldw	r8,8(r20)
 10085c8:	1108b03a 	or	r4,r2,r4
 10085cc:	0007883a 	mov	r3,zero
 10085d0:	4984703a 	and	r2,r9,r6
 10085d4:	208cb03a 	or	r6,r4,r2
 10085d8:	28ceb03a 	or	r7,r5,r3
 10085dc:	42000044 	addi	r8,r8,1
 10085e0:	a027883a 	mov	r19,r20
 10085e4:	a1c00415 	stw	r7,16(r20)
 10085e8:	a2000215 	stw	r8,8(r20)
 10085ec:	a1800315 	stw	r6,12(r20)
 10085f0:	003fce06 	br	100852c <_fpadd_parts+0x1c8>
 10085f4:	8bc5c83a 	sub	r2,r17,r15
 10085f8:	8889803a 	cmpltu	r4,r17,r2
 10085fc:	9407c83a 	sub	r3,r18,r16
 1008600:	1909c83a 	sub	r4,r3,r4
 1008604:	100d883a 	mov	r6,r2
 1008608:	200f883a 	mov	r7,r4
 100860c:	003f9906 	br	1008474 <_fpadd_parts+0x110>
 1008610:	7c45883a 	add	r2,r15,r17
 1008614:	13c9803a 	cmpltu	r4,r2,r15
 1008618:	8487883a 	add	r3,r16,r18
 100861c:	20c9883a 	add	r4,r4,r3
 1008620:	a1400115 	stw	r5,4(r20)
 1008624:	a5c00215 	stw	r23,8(r20)
 1008628:	a0800315 	stw	r2,12(r20)
 100862c:	a1000415 	stw	r4,16(r20)
 1008630:	003fb606 	br	100850c <_fpadd_parts+0x1a8>
 1008634:	001f883a 	mov	r15,zero
 1008638:	0021883a 	mov	r16,zero
 100863c:	003f8306 	br	100844c <_fpadd_parts+0xe8>
 1008640:	018dc83a 	sub	r6,zero,r6
 1008644:	003f6706 	br	10083e4 <_fpadd_parts+0x80>
 1008648:	00bfff84 	movi	r2,-2
 100864c:	117faf36 	bltu	r2,r5,100850c <_fpadd_parts+0x1a8>
 1008650:	003f9806 	br	10084b4 <_fpadd_parts+0x150>
 1008654:	0005883a 	mov	r2,zero
 1008658:	1189c83a 	sub	r4,r2,r6
 100865c:	1105803a 	cmpltu	r2,r2,r4
 1008660:	01cbc83a 	sub	r5,zero,r7
 1008664:	2885c83a 	sub	r2,r5,r2
 1008668:	01800044 	movi	r6,1
 100866c:	a1800115 	stw	r6,4(r20)
 1008670:	a5c00215 	stw	r23,8(r20)
 1008674:	a1000315 	stw	r4,12(r20)
 1008678:	a0800415 	stw	r2,16(r20)
 100867c:	003f8206 	br	1008488 <_fpadd_parts+0x124>
 1008680:	203f7226 	beq	r4,zero,100844c <_fpadd_parts+0xe8>
 1008684:	35bff804 	addi	r22,r6,-32
 1008688:	b9af883a 	add	r23,r23,r6
 100868c:	b0003116 	blt	r22,zero,1008754 <_fpadd_parts+0x3f0>
 1008690:	959ad83a 	srl	r13,r18,r22
 1008694:	001d883a 	mov	r14,zero
 1008698:	000f883a 	mov	r7,zero
 100869c:	01000044 	movi	r4,1
 10086a0:	0011883a 	mov	r8,zero
 10086a4:	b0002516 	blt	r22,zero,100873c <_fpadd_parts+0x3d8>
 10086a8:	2594983a 	sll	r10,r4,r22
 10086ac:	0013883a 	mov	r9,zero
 10086b0:	00bfffc4 	movi	r2,-1
 10086b4:	4889883a 	add	r4,r9,r2
 10086b8:	508b883a 	add	r5,r10,r2
 10086bc:	224d803a 	cmpltu	r6,r4,r9
 10086c0:	314b883a 	add	r5,r6,r5
 10086c4:	8904703a 	and	r2,r17,r4
 10086c8:	9146703a 	and	r3,r18,r5
 10086cc:	10c4b03a 	or	r2,r2,r3
 10086d0:	10000226 	beq	r2,zero,10086dc <_fpadd_parts+0x378>
 10086d4:	01c00044 	movi	r7,1
 10086d8:	0011883a 	mov	r8,zero
 10086dc:	69e2b03a 	or	r17,r13,r7
 10086e0:	7224b03a 	or	r18,r14,r8
 10086e4:	003f5906 	br	100844c <_fpadd_parts+0xe8>
 10086e8:	8407883a 	add	r3,r16,r16
 10086ec:	008007c4 	movi	r2,31
 10086f0:	1185c83a 	sub	r2,r2,r6
 10086f4:	1886983a 	sll	r3,r3,r2
 10086f8:	7996d83a 	srl	r11,r15,r6
 10086fc:	8198d83a 	srl	r12,r16,r6
 1008700:	1ad6b03a 	or	r11,r3,r11
 1008704:	003f3e06 	br	1008400 <_fpadd_parts+0x9c>
 1008708:	2006d07a 	srli	r3,r4,1
 100870c:	008007c4 	movi	r2,31
 1008710:	1185c83a 	sub	r2,r2,r6
 1008714:	1890d83a 	srl	r8,r3,r2
 1008718:	218e983a 	sll	r7,r4,r6
 100871c:	003f3e06 	br	1008418 <_fpadd_parts+0xb4>
 1008720:	113f821e 	bne	r2,r4,100852c <_fpadd_parts+0x1c8>
 1008724:	28c00117 	ldw	r3,4(r5)
 1008728:	98800117 	ldw	r2,4(r19)
 100872c:	10ff7f26 	beq	r2,r3,100852c <_fpadd_parts+0x1c8>
 1008730:	04c04074 	movhi	r19,257
 1008734:	9cf37b04 	addi	r19,r19,-12820
 1008738:	003f7c06 	br	100852c <_fpadd_parts+0x1c8>
 100873c:	2006d07a 	srli	r3,r4,1
 1008740:	008007c4 	movi	r2,31
 1008744:	1185c83a 	sub	r2,r2,r6
 1008748:	1894d83a 	srl	r10,r3,r2
 100874c:	2192983a 	sll	r9,r4,r6
 1008750:	003fd706 	br	10086b0 <_fpadd_parts+0x34c>
 1008754:	9487883a 	add	r3,r18,r18
 1008758:	008007c4 	movi	r2,31
 100875c:	1185c83a 	sub	r2,r2,r6
 1008760:	1886983a 	sll	r3,r3,r2
 1008764:	899ad83a 	srl	r13,r17,r6
 1008768:	919cd83a 	srl	r14,r18,r6
 100876c:	1b5ab03a 	or	r13,r3,r13
 1008770:	003fc906 	br	1008698 <_fpadd_parts+0x334>

01008774 <__subdf3>:
 1008774:	deffea04 	addi	sp,sp,-88
 1008778:	dcc01415 	stw	r19,80(sp)
 100877c:	dcc00404 	addi	r19,sp,16
 1008780:	2011883a 	mov	r8,r4
 1008784:	2813883a 	mov	r9,r5
 1008788:	dc401315 	stw	r17,76(sp)
 100878c:	d809883a 	mov	r4,sp
 1008790:	980b883a 	mov	r5,r19
 1008794:	dc400904 	addi	r17,sp,36
 1008798:	dfc01515 	stw	ra,84(sp)
 100879c:	da400115 	stw	r9,4(sp)
 10087a0:	d9c00315 	stw	r7,12(sp)
 10087a4:	da000015 	stw	r8,0(sp)
 10087a8:	d9800215 	stw	r6,8(sp)
 10087ac:	1009a080 	call	1009a08 <__unpack_d>
 10087b0:	d9000204 	addi	r4,sp,8
 10087b4:	880b883a 	mov	r5,r17
 10087b8:	1009a080 	call	1009a08 <__unpack_d>
 10087bc:	d8800a17 	ldw	r2,40(sp)
 10087c0:	880b883a 	mov	r5,r17
 10087c4:	9809883a 	mov	r4,r19
 10087c8:	d9800e04 	addi	r6,sp,56
 10087cc:	1080005c 	xori	r2,r2,1
 10087d0:	d8800a15 	stw	r2,40(sp)
 10087d4:	10083640 	call	1008364 <_fpadd_parts>
 10087d8:	1009883a 	mov	r4,r2
 10087dc:	10096f40 	call	10096f4 <__pack_d>
 10087e0:	dfc01517 	ldw	ra,84(sp)
 10087e4:	dcc01417 	ldw	r19,80(sp)
 10087e8:	dc401317 	ldw	r17,76(sp)
 10087ec:	dec01604 	addi	sp,sp,88
 10087f0:	f800283a 	ret

010087f4 <__adddf3>:
 10087f4:	deffea04 	addi	sp,sp,-88
 10087f8:	dcc01415 	stw	r19,80(sp)
 10087fc:	dcc00404 	addi	r19,sp,16
 1008800:	2011883a 	mov	r8,r4
 1008804:	2813883a 	mov	r9,r5
 1008808:	dc401315 	stw	r17,76(sp)
 100880c:	d809883a 	mov	r4,sp
 1008810:	980b883a 	mov	r5,r19
 1008814:	dc400904 	addi	r17,sp,36
 1008818:	dfc01515 	stw	ra,84(sp)
 100881c:	da400115 	stw	r9,4(sp)
 1008820:	d9c00315 	stw	r7,12(sp)
 1008824:	da000015 	stw	r8,0(sp)
 1008828:	d9800215 	stw	r6,8(sp)
 100882c:	1009a080 	call	1009a08 <__unpack_d>
 1008830:	d9000204 	addi	r4,sp,8
 1008834:	880b883a 	mov	r5,r17
 1008838:	1009a080 	call	1009a08 <__unpack_d>
 100883c:	d9800e04 	addi	r6,sp,56
 1008840:	9809883a 	mov	r4,r19
 1008844:	880b883a 	mov	r5,r17
 1008848:	10083640 	call	1008364 <_fpadd_parts>
 100884c:	1009883a 	mov	r4,r2
 1008850:	10096f40 	call	10096f4 <__pack_d>
 1008854:	dfc01517 	ldw	ra,84(sp)
 1008858:	dcc01417 	ldw	r19,80(sp)
 100885c:	dc401317 	ldw	r17,76(sp)
 1008860:	dec01604 	addi	sp,sp,88
 1008864:	f800283a 	ret

01008868 <__muldf3>:
 1008868:	deffe004 	addi	sp,sp,-128
 100886c:	dc401815 	stw	r17,96(sp)
 1008870:	dc400404 	addi	r17,sp,16
 1008874:	2011883a 	mov	r8,r4
 1008878:	2813883a 	mov	r9,r5
 100887c:	dc001715 	stw	r16,92(sp)
 1008880:	d809883a 	mov	r4,sp
 1008884:	880b883a 	mov	r5,r17
 1008888:	dc000904 	addi	r16,sp,36
 100888c:	dfc01f15 	stw	ra,124(sp)
 1008890:	da400115 	stw	r9,4(sp)
 1008894:	d9c00315 	stw	r7,12(sp)
 1008898:	da000015 	stw	r8,0(sp)
 100889c:	d9800215 	stw	r6,8(sp)
 10088a0:	ddc01e15 	stw	r23,120(sp)
 10088a4:	dd801d15 	stw	r22,116(sp)
 10088a8:	dd401c15 	stw	r21,112(sp)
 10088ac:	dd001b15 	stw	r20,108(sp)
 10088b0:	dcc01a15 	stw	r19,104(sp)
 10088b4:	dc801915 	stw	r18,100(sp)
 10088b8:	1009a080 	call	1009a08 <__unpack_d>
 10088bc:	d9000204 	addi	r4,sp,8
 10088c0:	800b883a 	mov	r5,r16
 10088c4:	1009a080 	call	1009a08 <__unpack_d>
 10088c8:	d9000417 	ldw	r4,16(sp)
 10088cc:	00800044 	movi	r2,1
 10088d0:	1100102e 	bgeu	r2,r4,1008914 <__muldf3+0xac>
 10088d4:	d8c00917 	ldw	r3,36(sp)
 10088d8:	10c0062e 	bgeu	r2,r3,10088f4 <__muldf3+0x8c>
 10088dc:	00800104 	movi	r2,4
 10088e0:	20800a26 	beq	r4,r2,100890c <__muldf3+0xa4>
 10088e4:	1880cc26 	beq	r3,r2,1008c18 <__muldf3+0x3b0>
 10088e8:	00800084 	movi	r2,2
 10088ec:	20800926 	beq	r4,r2,1008914 <__muldf3+0xac>
 10088f0:	1880191e 	bne	r3,r2,1008958 <__muldf3+0xf0>
 10088f4:	d8c00a17 	ldw	r3,40(sp)
 10088f8:	d8800517 	ldw	r2,20(sp)
 10088fc:	8009883a 	mov	r4,r16
 1008900:	10c4c03a 	cmpne	r2,r2,r3
 1008904:	d8800a15 	stw	r2,40(sp)
 1008908:	00000706 	br	1008928 <__muldf3+0xc0>
 100890c:	00800084 	movi	r2,2
 1008910:	1880c326 	beq	r3,r2,1008c20 <__muldf3+0x3b8>
 1008914:	d8800517 	ldw	r2,20(sp)
 1008918:	d8c00a17 	ldw	r3,40(sp)
 100891c:	8809883a 	mov	r4,r17
 1008920:	10c4c03a 	cmpne	r2,r2,r3
 1008924:	d8800515 	stw	r2,20(sp)
 1008928:	10096f40 	call	10096f4 <__pack_d>
 100892c:	dfc01f17 	ldw	ra,124(sp)
 1008930:	ddc01e17 	ldw	r23,120(sp)
 1008934:	dd801d17 	ldw	r22,116(sp)
 1008938:	dd401c17 	ldw	r21,112(sp)
 100893c:	dd001b17 	ldw	r20,108(sp)
 1008940:	dcc01a17 	ldw	r19,104(sp)
 1008944:	dc801917 	ldw	r18,100(sp)
 1008948:	dc401817 	ldw	r17,96(sp)
 100894c:	dc001717 	ldw	r16,92(sp)
 1008950:	dec02004 	addi	sp,sp,128
 1008954:	f800283a 	ret
 1008958:	dd800717 	ldw	r22,28(sp)
 100895c:	dc800c17 	ldw	r18,48(sp)
 1008960:	002b883a 	mov	r21,zero
 1008964:	0023883a 	mov	r17,zero
 1008968:	a80b883a 	mov	r5,r21
 100896c:	b00d883a 	mov	r6,r22
 1008970:	880f883a 	mov	r7,r17
 1008974:	ddc00817 	ldw	r23,32(sp)
 1008978:	dcc00d17 	ldw	r19,52(sp)
 100897c:	9009883a 	mov	r4,r18
 1008980:	10095dc0 	call	10095dc <__muldi3>
 1008984:	001b883a 	mov	r13,zero
 1008988:	680f883a 	mov	r7,r13
 100898c:	b009883a 	mov	r4,r22
 1008990:	000b883a 	mov	r5,zero
 1008994:	980d883a 	mov	r6,r19
 1008998:	b82d883a 	mov	r22,r23
 100899c:	002f883a 	mov	r23,zero
 10089a0:	db401615 	stw	r13,88(sp)
 10089a4:	d8801315 	stw	r2,76(sp)
 10089a8:	d8c01415 	stw	r3,80(sp)
 10089ac:	dcc01515 	stw	r19,84(sp)
 10089b0:	10095dc0 	call	10095dc <__muldi3>
 10089b4:	b00d883a 	mov	r6,r22
 10089b8:	000b883a 	mov	r5,zero
 10089bc:	9009883a 	mov	r4,r18
 10089c0:	b80f883a 	mov	r7,r23
 10089c4:	1021883a 	mov	r16,r2
 10089c8:	1823883a 	mov	r17,r3
 10089cc:	10095dc0 	call	10095dc <__muldi3>
 10089d0:	8085883a 	add	r2,r16,r2
 10089d4:	140d803a 	cmpltu	r6,r2,r16
 10089d8:	88c7883a 	add	r3,r17,r3
 10089dc:	30cd883a 	add	r6,r6,r3
 10089e0:	1029883a 	mov	r20,r2
 10089e4:	302b883a 	mov	r21,r6
 10089e8:	da801317 	ldw	r10,76(sp)
 10089ec:	dac01417 	ldw	r11,80(sp)
 10089f0:	db001517 	ldw	r12,84(sp)
 10089f4:	db401617 	ldw	r13,88(sp)
 10089f8:	3440612e 	bgeu	r6,r17,1008b80 <__muldf3+0x318>
 10089fc:	0009883a 	mov	r4,zero
 1008a00:	5105883a 	add	r2,r10,r4
 1008a04:	128d803a 	cmpltu	r6,r2,r10
 1008a08:	5d07883a 	add	r3,r11,r20
 1008a0c:	30cd883a 	add	r6,r6,r3
 1008a10:	0021883a 	mov	r16,zero
 1008a14:	04400044 	movi	r17,1
 1008a18:	1025883a 	mov	r18,r2
 1008a1c:	3027883a 	mov	r19,r6
 1008a20:	32c06236 	bltu	r6,r11,1008bac <__muldf3+0x344>
 1008a24:	59807a26 	beq	r11,r6,1008c10 <__muldf3+0x3a8>
 1008a28:	680b883a 	mov	r5,r13
 1008a2c:	b80f883a 	mov	r7,r23
 1008a30:	6009883a 	mov	r4,r12
 1008a34:	b00d883a 	mov	r6,r22
 1008a38:	10095dc0 	call	10095dc <__muldi3>
 1008a3c:	1009883a 	mov	r4,r2
 1008a40:	000f883a 	mov	r7,zero
 1008a44:	1545883a 	add	r2,r2,r21
 1008a48:	1111803a 	cmpltu	r8,r2,r4
 1008a4c:	19c7883a 	add	r3,r3,r7
 1008a50:	40c7883a 	add	r3,r8,r3
 1008a54:	88cb883a 	add	r5,r17,r3
 1008a58:	d8c00617 	ldw	r3,24(sp)
 1008a5c:	8089883a 	add	r4,r16,r2
 1008a60:	d8800b17 	ldw	r2,44(sp)
 1008a64:	18c00104 	addi	r3,r3,4
 1008a68:	240d803a 	cmpltu	r6,r4,r16
 1008a6c:	10c7883a 	add	r3,r2,r3
 1008a70:	2013883a 	mov	r9,r4
 1008a74:	d8800a17 	ldw	r2,40(sp)
 1008a78:	d9000517 	ldw	r4,20(sp)
 1008a7c:	314d883a 	add	r6,r6,r5
 1008a80:	3015883a 	mov	r10,r6
 1008a84:	2088c03a 	cmpne	r4,r4,r2
 1008a88:	00880034 	movhi	r2,8192
 1008a8c:	10bfffc4 	addi	r2,r2,-1
 1008a90:	d9000f15 	stw	r4,60(sp)
 1008a94:	d8c01015 	stw	r3,64(sp)
 1008a98:	1180162e 	bgeu	r2,r6,1008af4 <__muldf3+0x28c>
 1008a9c:	1811883a 	mov	r8,r3
 1008aa0:	101f883a 	mov	r15,r2
 1008aa4:	980497fa 	slli	r2,r19,31
 1008aa8:	9016d07a 	srli	r11,r18,1
 1008aac:	500697fa 	slli	r3,r10,31
 1008ab0:	480cd07a 	srli	r6,r9,1
 1008ab4:	500ed07a 	srli	r7,r10,1
 1008ab8:	12d6b03a 	or	r11,r2,r11
 1008abc:	00800044 	movi	r2,1
 1008ac0:	198cb03a 	or	r6,r3,r6
 1008ac4:	4888703a 	and	r4,r9,r2
 1008ac8:	9818d07a 	srli	r12,r19,1
 1008acc:	001b883a 	mov	r13,zero
 1008ad0:	03a00034 	movhi	r14,32768
 1008ad4:	3013883a 	mov	r9,r6
 1008ad8:	3815883a 	mov	r10,r7
 1008adc:	4091883a 	add	r8,r8,r2
 1008ae0:	20000226 	beq	r4,zero,1008aec <__muldf3+0x284>
 1008ae4:	5b64b03a 	or	r18,r11,r13
 1008ae8:	63a6b03a 	or	r19,r12,r14
 1008aec:	7abfed36 	bltu	r15,r10,1008aa4 <__muldf3+0x23c>
 1008af0:	da001015 	stw	r8,64(sp)
 1008af4:	00840034 	movhi	r2,4096
 1008af8:	10bfffc4 	addi	r2,r2,-1
 1008afc:	12801436 	bltu	r2,r10,1008b50 <__muldf3+0x2e8>
 1008b00:	da001017 	ldw	r8,64(sp)
 1008b04:	101f883a 	mov	r15,r2
 1008b08:	4a45883a 	add	r2,r9,r9
 1008b0c:	124d803a 	cmpltu	r6,r2,r9
 1008b10:	5287883a 	add	r3,r10,r10
 1008b14:	9497883a 	add	r11,r18,r18
 1008b18:	5c8f803a 	cmpltu	r7,r11,r18
 1008b1c:	9cd9883a 	add	r12,r19,r19
 1008b20:	01000044 	movi	r4,1
 1008b24:	30cd883a 	add	r6,r6,r3
 1008b28:	3b0f883a 	add	r7,r7,r12
 1008b2c:	423fffc4 	addi	r8,r8,-1
 1008b30:	1013883a 	mov	r9,r2
 1008b34:	3015883a 	mov	r10,r6
 1008b38:	111ab03a 	or	r13,r2,r4
 1008b3c:	98003016 	blt	r19,zero,1008c00 <__muldf3+0x398>
 1008b40:	5825883a 	mov	r18,r11
 1008b44:	3827883a 	mov	r19,r7
 1008b48:	7abfef2e 	bgeu	r15,r10,1008b08 <__muldf3+0x2a0>
 1008b4c:	da001015 	stw	r8,64(sp)
 1008b50:	00803fc4 	movi	r2,255
 1008b54:	488e703a 	and	r7,r9,r2
 1008b58:	00802004 	movi	r2,128
 1008b5c:	0007883a 	mov	r3,zero
 1008b60:	0011883a 	mov	r8,zero
 1008b64:	38801826 	beq	r7,r2,1008bc8 <__muldf3+0x360>
 1008b68:	008000c4 	movi	r2,3
 1008b6c:	d9000e04 	addi	r4,sp,56
 1008b70:	da801215 	stw	r10,72(sp)
 1008b74:	d8800e15 	stw	r2,56(sp)
 1008b78:	da401115 	stw	r9,68(sp)
 1008b7c:	003f6a06 	br	1008928 <__muldf3+0xc0>
 1008b80:	89802126 	beq	r17,r6,1008c08 <__muldf3+0x3a0>
 1008b84:	0009883a 	mov	r4,zero
 1008b88:	5105883a 	add	r2,r10,r4
 1008b8c:	128d803a 	cmpltu	r6,r2,r10
 1008b90:	5d07883a 	add	r3,r11,r20
 1008b94:	30cd883a 	add	r6,r6,r3
 1008b98:	0021883a 	mov	r16,zero
 1008b9c:	0023883a 	mov	r17,zero
 1008ba0:	1025883a 	mov	r18,r2
 1008ba4:	3027883a 	mov	r19,r6
 1008ba8:	32ff9e2e 	bgeu	r6,r11,1008a24 <__muldf3+0x1bc>
 1008bac:	00800044 	movi	r2,1
 1008bb0:	8089883a 	add	r4,r16,r2
 1008bb4:	240d803a 	cmpltu	r6,r4,r16
 1008bb8:	344d883a 	add	r6,r6,r17
 1008bbc:	2021883a 	mov	r16,r4
 1008bc0:	3023883a 	mov	r17,r6
 1008bc4:	003f9806 	br	1008a28 <__muldf3+0x1c0>
 1008bc8:	403fe71e 	bne	r8,zero,1008b68 <__muldf3+0x300>
 1008bcc:	01004004 	movi	r4,256
 1008bd0:	4904703a 	and	r2,r9,r4
 1008bd4:	10c4b03a 	or	r2,r2,r3
 1008bd8:	103fe31e 	bne	r2,zero,1008b68 <__muldf3+0x300>
 1008bdc:	94c4b03a 	or	r2,r18,r19
 1008be0:	103fe126 	beq	r2,zero,1008b68 <__muldf3+0x300>
 1008be4:	49c5883a 	add	r2,r9,r7
 1008be8:	1251803a 	cmpltu	r8,r2,r9
 1008bec:	4291883a 	add	r8,r8,r10
 1008bf0:	013fc004 	movi	r4,-256
 1008bf4:	1112703a 	and	r9,r2,r4
 1008bf8:	4015883a 	mov	r10,r8
 1008bfc:	003fda06 	br	1008b68 <__muldf3+0x300>
 1008c00:	6813883a 	mov	r9,r13
 1008c04:	003fce06 	br	1008b40 <__muldf3+0x2d8>
 1008c08:	143f7c36 	bltu	r2,r16,10089fc <__muldf3+0x194>
 1008c0c:	003fdd06 	br	1008b84 <__muldf3+0x31c>
 1008c10:	12bf852e 	bgeu	r2,r10,1008a28 <__muldf3+0x1c0>
 1008c14:	003fe506 	br	1008bac <__muldf3+0x344>
 1008c18:	00800084 	movi	r2,2
 1008c1c:	20bf351e 	bne	r4,r2,10088f4 <__muldf3+0x8c>
 1008c20:	01004074 	movhi	r4,257
 1008c24:	21337b04 	addi	r4,r4,-12820
 1008c28:	003f3f06 	br	1008928 <__muldf3+0xc0>

01008c2c <__divdf3>:
 1008c2c:	deffed04 	addi	sp,sp,-76
 1008c30:	dcc01115 	stw	r19,68(sp)
 1008c34:	dcc00404 	addi	r19,sp,16
 1008c38:	2011883a 	mov	r8,r4
 1008c3c:	2813883a 	mov	r9,r5
 1008c40:	dc000e15 	stw	r16,56(sp)
 1008c44:	d809883a 	mov	r4,sp
 1008c48:	980b883a 	mov	r5,r19
 1008c4c:	dc000904 	addi	r16,sp,36
 1008c50:	dfc01215 	stw	ra,72(sp)
 1008c54:	da400115 	stw	r9,4(sp)
 1008c58:	d9c00315 	stw	r7,12(sp)
 1008c5c:	da000015 	stw	r8,0(sp)
 1008c60:	d9800215 	stw	r6,8(sp)
 1008c64:	dc801015 	stw	r18,64(sp)
 1008c68:	dc400f15 	stw	r17,60(sp)
 1008c6c:	1009a080 	call	1009a08 <__unpack_d>
 1008c70:	d9000204 	addi	r4,sp,8
 1008c74:	800b883a 	mov	r5,r16
 1008c78:	1009a080 	call	1009a08 <__unpack_d>
 1008c7c:	d9000417 	ldw	r4,16(sp)
 1008c80:	00800044 	movi	r2,1
 1008c84:	11000b2e 	bgeu	r2,r4,1008cb4 <__divdf3+0x88>
 1008c88:	d9400917 	ldw	r5,36(sp)
 1008c8c:	1140762e 	bgeu	r2,r5,1008e68 <__divdf3+0x23c>
 1008c90:	d8800517 	ldw	r2,20(sp)
 1008c94:	d8c00a17 	ldw	r3,40(sp)
 1008c98:	01800104 	movi	r6,4
 1008c9c:	10c4f03a 	xor	r2,r2,r3
 1008ca0:	d8800515 	stw	r2,20(sp)
 1008ca4:	21800226 	beq	r4,r6,1008cb0 <__divdf3+0x84>
 1008ca8:	00800084 	movi	r2,2
 1008cac:	2080141e 	bne	r4,r2,1008d00 <__divdf3+0xd4>
 1008cb0:	29000926 	beq	r5,r4,1008cd8 <__divdf3+0xac>
 1008cb4:	9809883a 	mov	r4,r19
 1008cb8:	10096f40 	call	10096f4 <__pack_d>
 1008cbc:	dfc01217 	ldw	ra,72(sp)
 1008cc0:	dcc01117 	ldw	r19,68(sp)
 1008cc4:	dc801017 	ldw	r18,64(sp)
 1008cc8:	dc400f17 	ldw	r17,60(sp)
 1008ccc:	dc000e17 	ldw	r16,56(sp)
 1008cd0:	dec01304 	addi	sp,sp,76
 1008cd4:	f800283a 	ret
 1008cd8:	01004074 	movhi	r4,257
 1008cdc:	21337b04 	addi	r4,r4,-12820
 1008ce0:	10096f40 	call	10096f4 <__pack_d>
 1008ce4:	dfc01217 	ldw	ra,72(sp)
 1008ce8:	dcc01117 	ldw	r19,68(sp)
 1008cec:	dc801017 	ldw	r18,64(sp)
 1008cf0:	dc400f17 	ldw	r17,60(sp)
 1008cf4:	dc000e17 	ldw	r16,56(sp)
 1008cf8:	dec01304 	addi	sp,sp,76
 1008cfc:	f800283a 	ret
 1008d00:	29805b26 	beq	r5,r6,1008e70 <__divdf3+0x244>
 1008d04:	28802d26 	beq	r5,r2,1008dbc <__divdf3+0x190>
 1008d08:	d8c00617 	ldw	r3,24(sp)
 1008d0c:	d8800b17 	ldw	r2,44(sp)
 1008d10:	d9c00817 	ldw	r7,32(sp)
 1008d14:	dc400d17 	ldw	r17,52(sp)
 1008d18:	188bc83a 	sub	r5,r3,r2
 1008d1c:	d9800717 	ldw	r6,28(sp)
 1008d20:	dc000c17 	ldw	r16,48(sp)
 1008d24:	d9400615 	stw	r5,24(sp)
 1008d28:	3c403836 	bltu	r7,r17,1008e0c <__divdf3+0x1e0>
 1008d2c:	89c03626 	beq	r17,r7,1008e08 <__divdf3+0x1dc>
 1008d30:	0015883a 	mov	r10,zero
 1008d34:	001d883a 	mov	r14,zero
 1008d38:	02c40034 	movhi	r11,4096
 1008d3c:	001f883a 	mov	r15,zero
 1008d40:	003f883a 	mov	ra,zero
 1008d44:	04800f44 	movi	r18,61
 1008d48:	00000f06 	br	1008d88 <__divdf3+0x15c>
 1008d4c:	601d883a 	mov	r14,r12
 1008d50:	681f883a 	mov	r15,r13
 1008d54:	400d883a 	mov	r6,r8
 1008d58:	100f883a 	mov	r7,r2
 1008d5c:	3191883a 	add	r8,r6,r6
 1008d60:	5808d07a 	srli	r4,r11,1
 1008d64:	4185803a 	cmpltu	r2,r8,r6
 1008d68:	39d3883a 	add	r9,r7,r7
 1008d6c:	28c6b03a 	or	r3,r5,r3
 1008d70:	1245883a 	add	r2,r2,r9
 1008d74:	1815883a 	mov	r10,r3
 1008d78:	2017883a 	mov	r11,r4
 1008d7c:	400d883a 	mov	r6,r8
 1008d80:	100f883a 	mov	r7,r2
 1008d84:	fc801726 	beq	ra,r18,1008de4 <__divdf3+0x1b8>
 1008d88:	580a97fa 	slli	r5,r11,31
 1008d8c:	5006d07a 	srli	r3,r10,1
 1008d90:	ffc00044 	addi	ra,ra,1
 1008d94:	3c7ff136 	bltu	r7,r17,1008d5c <__divdf3+0x130>
 1008d98:	3411c83a 	sub	r8,r6,r16
 1008d9c:	3205803a 	cmpltu	r2,r6,r8
 1008da0:	3c53c83a 	sub	r9,r7,r17
 1008da4:	7298b03a 	or	r12,r14,r10
 1008da8:	7adab03a 	or	r13,r15,r11
 1008dac:	4885c83a 	sub	r2,r9,r2
 1008db0:	89ffe61e 	bne	r17,r7,1008d4c <__divdf3+0x120>
 1008db4:	343fe936 	bltu	r6,r16,1008d5c <__divdf3+0x130>
 1008db8:	003fe406 	br	1008d4c <__divdf3+0x120>
 1008dbc:	9809883a 	mov	r4,r19
 1008dc0:	d9800415 	stw	r6,16(sp)
 1008dc4:	10096f40 	call	10096f4 <__pack_d>
 1008dc8:	dfc01217 	ldw	ra,72(sp)
 1008dcc:	dcc01117 	ldw	r19,68(sp)
 1008dd0:	dc801017 	ldw	r18,64(sp)
 1008dd4:	dc400f17 	ldw	r17,60(sp)
 1008dd8:	dc000e17 	ldw	r16,56(sp)
 1008ddc:	dec01304 	addi	sp,sp,76
 1008de0:	f800283a 	ret
 1008de4:	00803fc4 	movi	r2,255
 1008de8:	7090703a 	and	r8,r14,r2
 1008dec:	00802004 	movi	r2,128
 1008df0:	0007883a 	mov	r3,zero
 1008df4:	0013883a 	mov	r9,zero
 1008df8:	40800d26 	beq	r8,r2,1008e30 <__divdf3+0x204>
 1008dfc:	dbc00815 	stw	r15,32(sp)
 1008e00:	db800715 	stw	r14,28(sp)
 1008e04:	003fab06 	br	1008cb4 <__divdf3+0x88>
 1008e08:	343fc92e 	bgeu	r6,r16,1008d30 <__divdf3+0x104>
 1008e0c:	3185883a 	add	r2,r6,r6
 1008e10:	1189803a 	cmpltu	r4,r2,r6
 1008e14:	39c7883a 	add	r3,r7,r7
 1008e18:	20c9883a 	add	r4,r4,r3
 1008e1c:	297fffc4 	addi	r5,r5,-1
 1008e20:	100d883a 	mov	r6,r2
 1008e24:	200f883a 	mov	r7,r4
 1008e28:	d9400615 	stw	r5,24(sp)
 1008e2c:	003fc006 	br	1008d30 <__divdf3+0x104>
 1008e30:	483ff21e 	bne	r9,zero,1008dfc <__divdf3+0x1d0>
 1008e34:	01004004 	movi	r4,256
 1008e38:	7104703a 	and	r2,r14,r4
 1008e3c:	10c4b03a 	or	r2,r2,r3
 1008e40:	103fee1e 	bne	r2,zero,1008dfc <__divdf3+0x1d0>
 1008e44:	31c4b03a 	or	r2,r6,r7
 1008e48:	103fec26 	beq	r2,zero,1008dfc <__divdf3+0x1d0>
 1008e4c:	7205883a 	add	r2,r14,r8
 1008e50:	1391803a 	cmpltu	r8,r2,r14
 1008e54:	43d1883a 	add	r8,r8,r15
 1008e58:	013fc004 	movi	r4,-256
 1008e5c:	111c703a 	and	r14,r2,r4
 1008e60:	401f883a 	mov	r15,r8
 1008e64:	003fe506 	br	1008dfc <__divdf3+0x1d0>
 1008e68:	8009883a 	mov	r4,r16
 1008e6c:	003f9206 	br	1008cb8 <__divdf3+0x8c>
 1008e70:	9809883a 	mov	r4,r19
 1008e74:	d8000715 	stw	zero,28(sp)
 1008e78:	d8000815 	stw	zero,32(sp)
 1008e7c:	d8000615 	stw	zero,24(sp)
 1008e80:	003f8d06 	br	1008cb8 <__divdf3+0x8c>

01008e84 <__eqdf2>:
 1008e84:	deffef04 	addi	sp,sp,-68
 1008e88:	dc400f15 	stw	r17,60(sp)
 1008e8c:	dc400404 	addi	r17,sp,16
 1008e90:	2005883a 	mov	r2,r4
 1008e94:	2807883a 	mov	r3,r5
 1008e98:	dc000e15 	stw	r16,56(sp)
 1008e9c:	d809883a 	mov	r4,sp
 1008ea0:	880b883a 	mov	r5,r17
 1008ea4:	dc000904 	addi	r16,sp,36
 1008ea8:	d8c00115 	stw	r3,4(sp)
 1008eac:	d8800015 	stw	r2,0(sp)
 1008eb0:	d9800215 	stw	r6,8(sp)
 1008eb4:	dfc01015 	stw	ra,64(sp)
 1008eb8:	d9c00315 	stw	r7,12(sp)
 1008ebc:	1009a080 	call	1009a08 <__unpack_d>
 1008ec0:	d9000204 	addi	r4,sp,8
 1008ec4:	800b883a 	mov	r5,r16
 1008ec8:	1009a080 	call	1009a08 <__unpack_d>
 1008ecc:	d8800417 	ldw	r2,16(sp)
 1008ed0:	00c00044 	movi	r3,1
 1008ed4:	180d883a 	mov	r6,r3
 1008ed8:	1880062e 	bgeu	r3,r2,1008ef4 <__eqdf2+0x70>
 1008edc:	d8800917 	ldw	r2,36(sp)
 1008ee0:	8809883a 	mov	r4,r17
 1008ee4:	800b883a 	mov	r5,r16
 1008ee8:	1880022e 	bgeu	r3,r2,1008ef4 <__eqdf2+0x70>
 1008eec:	1009b400 	call	1009b40 <__fpcmp_parts_d>
 1008ef0:	100d883a 	mov	r6,r2
 1008ef4:	3005883a 	mov	r2,r6
 1008ef8:	dfc01017 	ldw	ra,64(sp)
 1008efc:	dc400f17 	ldw	r17,60(sp)
 1008f00:	dc000e17 	ldw	r16,56(sp)
 1008f04:	dec01104 	addi	sp,sp,68
 1008f08:	f800283a 	ret

01008f0c <__nedf2>:
 1008f0c:	deffef04 	addi	sp,sp,-68
 1008f10:	dc400f15 	stw	r17,60(sp)
 1008f14:	dc400404 	addi	r17,sp,16
 1008f18:	2005883a 	mov	r2,r4
 1008f1c:	2807883a 	mov	r3,r5
 1008f20:	dc000e15 	stw	r16,56(sp)
 1008f24:	d809883a 	mov	r4,sp
 1008f28:	880b883a 	mov	r5,r17
 1008f2c:	dc000904 	addi	r16,sp,36
 1008f30:	d8c00115 	stw	r3,4(sp)
 1008f34:	d8800015 	stw	r2,0(sp)
 1008f38:	d9800215 	stw	r6,8(sp)
 1008f3c:	dfc01015 	stw	ra,64(sp)
 1008f40:	d9c00315 	stw	r7,12(sp)
 1008f44:	1009a080 	call	1009a08 <__unpack_d>
 1008f48:	d9000204 	addi	r4,sp,8
 1008f4c:	800b883a 	mov	r5,r16
 1008f50:	1009a080 	call	1009a08 <__unpack_d>
 1008f54:	d8800417 	ldw	r2,16(sp)
 1008f58:	00c00044 	movi	r3,1
 1008f5c:	180d883a 	mov	r6,r3
 1008f60:	1880062e 	bgeu	r3,r2,1008f7c <__nedf2+0x70>
 1008f64:	d8800917 	ldw	r2,36(sp)
 1008f68:	8809883a 	mov	r4,r17
 1008f6c:	800b883a 	mov	r5,r16
 1008f70:	1880022e 	bgeu	r3,r2,1008f7c <__nedf2+0x70>
 1008f74:	1009b400 	call	1009b40 <__fpcmp_parts_d>
 1008f78:	100d883a 	mov	r6,r2
 1008f7c:	3005883a 	mov	r2,r6
 1008f80:	dfc01017 	ldw	ra,64(sp)
 1008f84:	dc400f17 	ldw	r17,60(sp)
 1008f88:	dc000e17 	ldw	r16,56(sp)
 1008f8c:	dec01104 	addi	sp,sp,68
 1008f90:	f800283a 	ret

01008f94 <__gtdf2>:
 1008f94:	deffef04 	addi	sp,sp,-68
 1008f98:	dc400f15 	stw	r17,60(sp)
 1008f9c:	dc400404 	addi	r17,sp,16
 1008fa0:	2005883a 	mov	r2,r4
 1008fa4:	2807883a 	mov	r3,r5
 1008fa8:	dc000e15 	stw	r16,56(sp)
 1008fac:	d809883a 	mov	r4,sp
 1008fb0:	880b883a 	mov	r5,r17
 1008fb4:	dc000904 	addi	r16,sp,36
 1008fb8:	d8c00115 	stw	r3,4(sp)
 1008fbc:	d8800015 	stw	r2,0(sp)
 1008fc0:	d9800215 	stw	r6,8(sp)
 1008fc4:	dfc01015 	stw	ra,64(sp)
 1008fc8:	d9c00315 	stw	r7,12(sp)
 1008fcc:	1009a080 	call	1009a08 <__unpack_d>
 1008fd0:	d9000204 	addi	r4,sp,8
 1008fd4:	800b883a 	mov	r5,r16
 1008fd8:	1009a080 	call	1009a08 <__unpack_d>
 1008fdc:	d8800417 	ldw	r2,16(sp)
 1008fe0:	00c00044 	movi	r3,1
 1008fe4:	01bfffc4 	movi	r6,-1
 1008fe8:	1880062e 	bgeu	r3,r2,1009004 <__gtdf2+0x70>
 1008fec:	d8800917 	ldw	r2,36(sp)
 1008ff0:	8809883a 	mov	r4,r17
 1008ff4:	800b883a 	mov	r5,r16
 1008ff8:	1880022e 	bgeu	r3,r2,1009004 <__gtdf2+0x70>
 1008ffc:	1009b400 	call	1009b40 <__fpcmp_parts_d>
 1009000:	100d883a 	mov	r6,r2
 1009004:	3005883a 	mov	r2,r6
 1009008:	dfc01017 	ldw	ra,64(sp)
 100900c:	dc400f17 	ldw	r17,60(sp)
 1009010:	dc000e17 	ldw	r16,56(sp)
 1009014:	dec01104 	addi	sp,sp,68
 1009018:	f800283a 	ret

0100901c <__gedf2>:
 100901c:	deffef04 	addi	sp,sp,-68
 1009020:	dc400f15 	stw	r17,60(sp)
 1009024:	dc400404 	addi	r17,sp,16
 1009028:	2005883a 	mov	r2,r4
 100902c:	2807883a 	mov	r3,r5
 1009030:	dc000e15 	stw	r16,56(sp)
 1009034:	d809883a 	mov	r4,sp
 1009038:	880b883a 	mov	r5,r17
 100903c:	dc000904 	addi	r16,sp,36
 1009040:	d8c00115 	stw	r3,4(sp)
 1009044:	d8800015 	stw	r2,0(sp)
 1009048:	d9800215 	stw	r6,8(sp)
 100904c:	dfc01015 	stw	ra,64(sp)
 1009050:	d9c00315 	stw	r7,12(sp)
 1009054:	1009a080 	call	1009a08 <__unpack_d>
 1009058:	d9000204 	addi	r4,sp,8
 100905c:	800b883a 	mov	r5,r16
 1009060:	1009a080 	call	1009a08 <__unpack_d>
 1009064:	d8800417 	ldw	r2,16(sp)
 1009068:	00c00044 	movi	r3,1
 100906c:	01bfffc4 	movi	r6,-1
 1009070:	1880062e 	bgeu	r3,r2,100908c <__gedf2+0x70>
 1009074:	d8800917 	ldw	r2,36(sp)
 1009078:	8809883a 	mov	r4,r17
 100907c:	800b883a 	mov	r5,r16
 1009080:	1880022e 	bgeu	r3,r2,100908c <__gedf2+0x70>
 1009084:	1009b400 	call	1009b40 <__fpcmp_parts_d>
 1009088:	100d883a 	mov	r6,r2
 100908c:	3005883a 	mov	r2,r6
 1009090:	dfc01017 	ldw	ra,64(sp)
 1009094:	dc400f17 	ldw	r17,60(sp)
 1009098:	dc000e17 	ldw	r16,56(sp)
 100909c:	dec01104 	addi	sp,sp,68
 10090a0:	f800283a 	ret

010090a4 <__ltdf2>:
 10090a4:	deffef04 	addi	sp,sp,-68
 10090a8:	dc400f15 	stw	r17,60(sp)
 10090ac:	dc400404 	addi	r17,sp,16
 10090b0:	2005883a 	mov	r2,r4
 10090b4:	2807883a 	mov	r3,r5
 10090b8:	dc000e15 	stw	r16,56(sp)
 10090bc:	d809883a 	mov	r4,sp
 10090c0:	880b883a 	mov	r5,r17
 10090c4:	dc000904 	addi	r16,sp,36
 10090c8:	d8c00115 	stw	r3,4(sp)
 10090cc:	d8800015 	stw	r2,0(sp)
 10090d0:	d9800215 	stw	r6,8(sp)
 10090d4:	dfc01015 	stw	ra,64(sp)
 10090d8:	d9c00315 	stw	r7,12(sp)
 10090dc:	1009a080 	call	1009a08 <__unpack_d>
 10090e0:	d9000204 	addi	r4,sp,8
 10090e4:	800b883a 	mov	r5,r16
 10090e8:	1009a080 	call	1009a08 <__unpack_d>
 10090ec:	d8800417 	ldw	r2,16(sp)
 10090f0:	00c00044 	movi	r3,1
 10090f4:	180d883a 	mov	r6,r3
 10090f8:	1880062e 	bgeu	r3,r2,1009114 <__ltdf2+0x70>
 10090fc:	d8800917 	ldw	r2,36(sp)
 1009100:	8809883a 	mov	r4,r17
 1009104:	800b883a 	mov	r5,r16
 1009108:	1880022e 	bgeu	r3,r2,1009114 <__ltdf2+0x70>
 100910c:	1009b400 	call	1009b40 <__fpcmp_parts_d>
 1009110:	100d883a 	mov	r6,r2
 1009114:	3005883a 	mov	r2,r6
 1009118:	dfc01017 	ldw	ra,64(sp)
 100911c:	dc400f17 	ldw	r17,60(sp)
 1009120:	dc000e17 	ldw	r16,56(sp)
 1009124:	dec01104 	addi	sp,sp,68
 1009128:	f800283a 	ret

0100912c <__floatsidf>:
 100912c:	2006d7fa 	srli	r3,r4,31
 1009130:	defff604 	addi	sp,sp,-40
 1009134:	008000c4 	movi	r2,3
 1009138:	dfc00915 	stw	ra,36(sp)
 100913c:	dcc00815 	stw	r19,32(sp)
 1009140:	dc800715 	stw	r18,28(sp)
 1009144:	dc400615 	stw	r17,24(sp)
 1009148:	dc000515 	stw	r16,20(sp)
 100914c:	d8800015 	stw	r2,0(sp)
 1009150:	d8c00115 	stw	r3,4(sp)
 1009154:	20000f1e 	bne	r4,zero,1009194 <__floatsidf+0x68>
 1009158:	00800084 	movi	r2,2
 100915c:	d8800015 	stw	r2,0(sp)
 1009160:	d809883a 	mov	r4,sp
 1009164:	10096f40 	call	10096f4 <__pack_d>
 1009168:	1009883a 	mov	r4,r2
 100916c:	180b883a 	mov	r5,r3
 1009170:	2005883a 	mov	r2,r4
 1009174:	2807883a 	mov	r3,r5
 1009178:	dfc00917 	ldw	ra,36(sp)
 100917c:	dcc00817 	ldw	r19,32(sp)
 1009180:	dc800717 	ldw	r18,28(sp)
 1009184:	dc400617 	ldw	r17,24(sp)
 1009188:	dc000517 	ldw	r16,20(sp)
 100918c:	dec00a04 	addi	sp,sp,40
 1009190:	f800283a 	ret
 1009194:	00800f04 	movi	r2,60
 1009198:	1807003a 	cmpeq	r3,r3,zero
 100919c:	d8800215 	stw	r2,8(sp)
 10091a0:	18001126 	beq	r3,zero,10091e8 <__floatsidf+0xbc>
 10091a4:	0027883a 	mov	r19,zero
 10091a8:	2025883a 	mov	r18,r4
 10091ac:	d9000315 	stw	r4,12(sp)
 10091b0:	dcc00415 	stw	r19,16(sp)
 10091b4:	10096740 	call	1009674 <__clzsi2>
 10091b8:	11000744 	addi	r4,r2,29
 10091bc:	013fe80e 	bge	zero,r4,1009160 <__floatsidf+0x34>
 10091c0:	10bfff44 	addi	r2,r2,-3
 10091c4:	10000c16 	blt	r2,zero,10091f8 <__floatsidf+0xcc>
 10091c8:	90a2983a 	sll	r17,r18,r2
 10091cc:	0021883a 	mov	r16,zero
 10091d0:	d8800217 	ldw	r2,8(sp)
 10091d4:	dc400415 	stw	r17,16(sp)
 10091d8:	dc000315 	stw	r16,12(sp)
 10091dc:	1105c83a 	sub	r2,r2,r4
 10091e0:	d8800215 	stw	r2,8(sp)
 10091e4:	003fde06 	br	1009160 <__floatsidf+0x34>
 10091e8:	00a00034 	movhi	r2,32768
 10091ec:	20800a26 	beq	r4,r2,1009218 <__floatsidf+0xec>
 10091f0:	0109c83a 	sub	r4,zero,r4
 10091f4:	003feb06 	br	10091a4 <__floatsidf+0x78>
 10091f8:	9006d07a 	srli	r3,r18,1
 10091fc:	008007c4 	movi	r2,31
 1009200:	1105c83a 	sub	r2,r2,r4
 1009204:	1886d83a 	srl	r3,r3,r2
 1009208:	9922983a 	sll	r17,r19,r4
 100920c:	9120983a 	sll	r16,r18,r4
 1009210:	1c62b03a 	or	r17,r3,r17
 1009214:	003fee06 	br	10091d0 <__floatsidf+0xa4>
 1009218:	0009883a 	mov	r4,zero
 100921c:	01707834 	movhi	r5,49632
 1009220:	003fd306 	br	1009170 <__floatsidf+0x44>

01009224 <__fixdfsi>:
 1009224:	defff804 	addi	sp,sp,-32
 1009228:	2005883a 	mov	r2,r4
 100922c:	2807883a 	mov	r3,r5
 1009230:	d809883a 	mov	r4,sp
 1009234:	d9400204 	addi	r5,sp,8
 1009238:	d8c00115 	stw	r3,4(sp)
 100923c:	d8800015 	stw	r2,0(sp)
 1009240:	dfc00715 	stw	ra,28(sp)
 1009244:	1009a080 	call	1009a08 <__unpack_d>
 1009248:	d8c00217 	ldw	r3,8(sp)
 100924c:	00800084 	movi	r2,2
 1009250:	1880051e 	bne	r3,r2,1009268 <__fixdfsi+0x44>
 1009254:	0007883a 	mov	r3,zero
 1009258:	1805883a 	mov	r2,r3
 100925c:	dfc00717 	ldw	ra,28(sp)
 1009260:	dec00804 	addi	sp,sp,32
 1009264:	f800283a 	ret
 1009268:	00800044 	movi	r2,1
 100926c:	10fff92e 	bgeu	r2,r3,1009254 <__fixdfsi+0x30>
 1009270:	00800104 	movi	r2,4
 1009274:	18800426 	beq	r3,r2,1009288 <__fixdfsi+0x64>
 1009278:	d8c00417 	ldw	r3,16(sp)
 100927c:	183ff516 	blt	r3,zero,1009254 <__fixdfsi+0x30>
 1009280:	00800784 	movi	r2,30
 1009284:	10c0080e 	bge	r2,r3,10092a8 <__fixdfsi+0x84>
 1009288:	d8800317 	ldw	r2,12(sp)
 100928c:	1000121e 	bne	r2,zero,10092d8 <__fixdfsi+0xb4>
 1009290:	00e00034 	movhi	r3,32768
 1009294:	18ffffc4 	addi	r3,r3,-1
 1009298:	1805883a 	mov	r2,r3
 100929c:	dfc00717 	ldw	ra,28(sp)
 10092a0:	dec00804 	addi	sp,sp,32
 10092a4:	f800283a 	ret
 10092a8:	00800f04 	movi	r2,60
 10092ac:	10d1c83a 	sub	r8,r2,r3
 10092b0:	40bff804 	addi	r2,r8,-32
 10092b4:	d9800517 	ldw	r6,20(sp)
 10092b8:	d9c00617 	ldw	r7,24(sp)
 10092bc:	10000816 	blt	r2,zero,10092e0 <__fixdfsi+0xbc>
 10092c0:	3888d83a 	srl	r4,r7,r2
 10092c4:	d8800317 	ldw	r2,12(sp)
 10092c8:	2007883a 	mov	r3,r4
 10092cc:	103fe226 	beq	r2,zero,1009258 <__fixdfsi+0x34>
 10092d0:	0107c83a 	sub	r3,zero,r4
 10092d4:	003fe006 	br	1009258 <__fixdfsi+0x34>
 10092d8:	00e00034 	movhi	r3,32768
 10092dc:	003fde06 	br	1009258 <__fixdfsi+0x34>
 10092e0:	39c7883a 	add	r3,r7,r7
 10092e4:	008007c4 	movi	r2,31
 10092e8:	1205c83a 	sub	r2,r2,r8
 10092ec:	1886983a 	sll	r3,r3,r2
 10092f0:	3208d83a 	srl	r4,r6,r8
 10092f4:	1908b03a 	or	r4,r3,r4
 10092f8:	003ff206 	br	10092c4 <__fixdfsi+0xa0>

010092fc <__floatunsidf>:
 10092fc:	defff204 	addi	sp,sp,-56
 1009300:	dfc00d15 	stw	ra,52(sp)
 1009304:	ddc00c15 	stw	r23,48(sp)
 1009308:	dd800b15 	stw	r22,44(sp)
 100930c:	dd400a15 	stw	r21,40(sp)
 1009310:	dd000915 	stw	r20,36(sp)
 1009314:	dcc00815 	stw	r19,32(sp)
 1009318:	dc800715 	stw	r18,28(sp)
 100931c:	dc400615 	stw	r17,24(sp)
 1009320:	dc000515 	stw	r16,20(sp)
 1009324:	d8000115 	stw	zero,4(sp)
 1009328:	20000f1e 	bne	r4,zero,1009368 <__floatunsidf+0x6c>
 100932c:	00800084 	movi	r2,2
 1009330:	d8800015 	stw	r2,0(sp)
 1009334:	d809883a 	mov	r4,sp
 1009338:	10096f40 	call	10096f4 <__pack_d>
 100933c:	dfc00d17 	ldw	ra,52(sp)
 1009340:	ddc00c17 	ldw	r23,48(sp)
 1009344:	dd800b17 	ldw	r22,44(sp)
 1009348:	dd400a17 	ldw	r21,40(sp)
 100934c:	dd000917 	ldw	r20,36(sp)
 1009350:	dcc00817 	ldw	r19,32(sp)
 1009354:	dc800717 	ldw	r18,28(sp)
 1009358:	dc400617 	ldw	r17,24(sp)
 100935c:	dc000517 	ldw	r16,20(sp)
 1009360:	dec00e04 	addi	sp,sp,56
 1009364:	f800283a 	ret
 1009368:	008000c4 	movi	r2,3
 100936c:	00c00f04 	movi	r3,60
 1009370:	002f883a 	mov	r23,zero
 1009374:	202d883a 	mov	r22,r4
 1009378:	d8800015 	stw	r2,0(sp)
 100937c:	d8c00215 	stw	r3,8(sp)
 1009380:	d9000315 	stw	r4,12(sp)
 1009384:	ddc00415 	stw	r23,16(sp)
 1009388:	10096740 	call	1009674 <__clzsi2>
 100938c:	12400744 	addi	r9,r2,29
 1009390:	48000b16 	blt	r9,zero,10093c0 <__floatunsidf+0xc4>
 1009394:	483fe726 	beq	r9,zero,1009334 <__floatunsidf+0x38>
 1009398:	10bfff44 	addi	r2,r2,-3
 100939c:	10002e16 	blt	r2,zero,1009458 <__floatunsidf+0x15c>
 10093a0:	b0a2983a 	sll	r17,r22,r2
 10093a4:	0021883a 	mov	r16,zero
 10093a8:	d8800217 	ldw	r2,8(sp)
 10093ac:	dc400415 	stw	r17,16(sp)
 10093b0:	dc000315 	stw	r16,12(sp)
 10093b4:	1245c83a 	sub	r2,r2,r9
 10093b8:	d8800215 	stw	r2,8(sp)
 10093bc:	003fdd06 	br	1009334 <__floatunsidf+0x38>
 10093c0:	0255c83a 	sub	r10,zero,r9
 10093c4:	51bff804 	addi	r6,r10,-32
 10093c8:	30001b16 	blt	r6,zero,1009438 <__floatunsidf+0x13c>
 10093cc:	b9a8d83a 	srl	r20,r23,r6
 10093d0:	002b883a 	mov	r21,zero
 10093d4:	000f883a 	mov	r7,zero
 10093d8:	01000044 	movi	r4,1
 10093dc:	0011883a 	mov	r8,zero
 10093e0:	30002516 	blt	r6,zero,1009478 <__floatunsidf+0x17c>
 10093e4:	21a6983a 	sll	r19,r4,r6
 10093e8:	0025883a 	mov	r18,zero
 10093ec:	00bfffc4 	movi	r2,-1
 10093f0:	9089883a 	add	r4,r18,r2
 10093f4:	988b883a 	add	r5,r19,r2
 10093f8:	248d803a 	cmpltu	r6,r4,r18
 10093fc:	314b883a 	add	r5,r6,r5
 1009400:	b104703a 	and	r2,r22,r4
 1009404:	b946703a 	and	r3,r23,r5
 1009408:	10c4b03a 	or	r2,r2,r3
 100940c:	10000226 	beq	r2,zero,1009418 <__floatunsidf+0x11c>
 1009410:	01c00044 	movi	r7,1
 1009414:	0011883a 	mov	r8,zero
 1009418:	d9000217 	ldw	r4,8(sp)
 100941c:	a1c4b03a 	or	r2,r20,r7
 1009420:	aa06b03a 	or	r3,r21,r8
 1009424:	2249c83a 	sub	r4,r4,r9
 1009428:	d8c00415 	stw	r3,16(sp)
 100942c:	d9000215 	stw	r4,8(sp)
 1009430:	d8800315 	stw	r2,12(sp)
 1009434:	003fbf06 	br	1009334 <__floatunsidf+0x38>
 1009438:	bdc7883a 	add	r3,r23,r23
 100943c:	008007c4 	movi	r2,31
 1009440:	1285c83a 	sub	r2,r2,r10
 1009444:	1886983a 	sll	r3,r3,r2
 1009448:	b2a8d83a 	srl	r20,r22,r10
 100944c:	baaad83a 	srl	r21,r23,r10
 1009450:	1d28b03a 	or	r20,r3,r20
 1009454:	003fdf06 	br	10093d4 <__floatunsidf+0xd8>
 1009458:	b006d07a 	srli	r3,r22,1
 100945c:	008007c4 	movi	r2,31
 1009460:	1245c83a 	sub	r2,r2,r9
 1009464:	1886d83a 	srl	r3,r3,r2
 1009468:	ba62983a 	sll	r17,r23,r9
 100946c:	b260983a 	sll	r16,r22,r9
 1009470:	1c62b03a 	or	r17,r3,r17
 1009474:	003fcc06 	br	10093a8 <__floatunsidf+0xac>
 1009478:	2006d07a 	srli	r3,r4,1
 100947c:	008007c4 	movi	r2,31
 1009480:	1285c83a 	sub	r2,r2,r10
 1009484:	18a6d83a 	srl	r19,r3,r2
 1009488:	22a4983a 	sll	r18,r4,r10
 100948c:	003fd706 	br	10093ec <__floatunsidf+0xf0>

01009490 <udivmodsi4>:
 1009490:	29001b2e 	bgeu	r5,r4,1009500 <udivmodsi4+0x70>
 1009494:	28001a16 	blt	r5,zero,1009500 <udivmodsi4+0x70>
 1009498:	00800044 	movi	r2,1
 100949c:	0007883a 	mov	r3,zero
 10094a0:	01c007c4 	movi	r7,31
 10094a4:	00000306 	br	10094b4 <udivmodsi4+0x24>
 10094a8:	19c01326 	beq	r3,r7,10094f8 <udivmodsi4+0x68>
 10094ac:	18c00044 	addi	r3,r3,1
 10094b0:	28000416 	blt	r5,zero,10094c4 <udivmodsi4+0x34>
 10094b4:	294b883a 	add	r5,r5,r5
 10094b8:	1085883a 	add	r2,r2,r2
 10094bc:	293ffa36 	bltu	r5,r4,10094a8 <udivmodsi4+0x18>
 10094c0:	10000d26 	beq	r2,zero,10094f8 <udivmodsi4+0x68>
 10094c4:	0007883a 	mov	r3,zero
 10094c8:	21400236 	bltu	r4,r5,10094d4 <udivmodsi4+0x44>
 10094cc:	2149c83a 	sub	r4,r4,r5
 10094d0:	1886b03a 	or	r3,r3,r2
 10094d4:	1004d07a 	srli	r2,r2,1
 10094d8:	280ad07a 	srli	r5,r5,1
 10094dc:	103ffa1e 	bne	r2,zero,10094c8 <udivmodsi4+0x38>
 10094e0:	30000226 	beq	r6,zero,10094ec <udivmodsi4+0x5c>
 10094e4:	2005883a 	mov	r2,r4
 10094e8:	f800283a 	ret
 10094ec:	1809883a 	mov	r4,r3
 10094f0:	2005883a 	mov	r2,r4
 10094f4:	f800283a 	ret
 10094f8:	0007883a 	mov	r3,zero
 10094fc:	003ff806 	br	10094e0 <udivmodsi4+0x50>
 1009500:	00800044 	movi	r2,1
 1009504:	0007883a 	mov	r3,zero
 1009508:	003fef06 	br	10094c8 <udivmodsi4+0x38>

0100950c <__divsi3>:
 100950c:	defffe04 	addi	sp,sp,-8
 1009510:	dc000015 	stw	r16,0(sp)
 1009514:	dfc00115 	stw	ra,4(sp)
 1009518:	0021883a 	mov	r16,zero
 100951c:	20000c16 	blt	r4,zero,1009550 <__divsi3+0x44>
 1009520:	000d883a 	mov	r6,zero
 1009524:	28000e16 	blt	r5,zero,1009560 <__divsi3+0x54>
 1009528:	10094900 	call	1009490 <udivmodsi4>
 100952c:	1007883a 	mov	r3,r2
 1009530:	8005003a 	cmpeq	r2,r16,zero
 1009534:	1000011e 	bne	r2,zero,100953c <__divsi3+0x30>
 1009538:	00c7c83a 	sub	r3,zero,r3
 100953c:	1805883a 	mov	r2,r3
 1009540:	dfc00117 	ldw	ra,4(sp)
 1009544:	dc000017 	ldw	r16,0(sp)
 1009548:	dec00204 	addi	sp,sp,8
 100954c:	f800283a 	ret
 1009550:	0109c83a 	sub	r4,zero,r4
 1009554:	04000044 	movi	r16,1
 1009558:	000d883a 	mov	r6,zero
 100955c:	283ff20e 	bge	r5,zero,1009528 <__divsi3+0x1c>
 1009560:	014bc83a 	sub	r5,zero,r5
 1009564:	8021003a 	cmpeq	r16,r16,zero
 1009568:	003fef06 	br	1009528 <__divsi3+0x1c>

0100956c <__modsi3>:
 100956c:	deffff04 	addi	sp,sp,-4
 1009570:	dfc00015 	stw	ra,0(sp)
 1009574:	01800044 	movi	r6,1
 1009578:	2807883a 	mov	r3,r5
 100957c:	20000416 	blt	r4,zero,1009590 <__modsi3+0x24>
 1009580:	28000c16 	blt	r5,zero,10095b4 <__modsi3+0x48>
 1009584:	dfc00017 	ldw	ra,0(sp)
 1009588:	dec00104 	addi	sp,sp,4
 100958c:	10094901 	jmpi	1009490 <udivmodsi4>
 1009590:	0109c83a 	sub	r4,zero,r4
 1009594:	28000b16 	blt	r5,zero,10095c4 <__modsi3+0x58>
 1009598:	180b883a 	mov	r5,r3
 100959c:	01800044 	movi	r6,1
 10095a0:	10094900 	call	1009490 <udivmodsi4>
 10095a4:	0085c83a 	sub	r2,zero,r2
 10095a8:	dfc00017 	ldw	ra,0(sp)
 10095ac:	dec00104 	addi	sp,sp,4
 10095b0:	f800283a 	ret
 10095b4:	014bc83a 	sub	r5,zero,r5
 10095b8:	dfc00017 	ldw	ra,0(sp)
 10095bc:	dec00104 	addi	sp,sp,4
 10095c0:	10094901 	jmpi	1009490 <udivmodsi4>
 10095c4:	0147c83a 	sub	r3,zero,r5
 10095c8:	003ff306 	br	1009598 <__modsi3+0x2c>

010095cc <__udivsi3>:
 10095cc:	000d883a 	mov	r6,zero
 10095d0:	10094901 	jmpi	1009490 <udivmodsi4>

010095d4 <__umodsi3>:
 10095d4:	01800044 	movi	r6,1
 10095d8:	10094901 	jmpi	1009490 <udivmodsi4>

010095dc <__muldi3>:
 10095dc:	2011883a 	mov	r8,r4
 10095e0:	427fffcc 	andi	r9,r8,65535
 10095e4:	4018d43a 	srli	r12,r8,16
 10095e8:	32bfffcc 	andi	r10,r6,65535
 10095ec:	3016d43a 	srli	r11,r6,16
 10095f0:	4a85383a 	mul	r2,r9,r10
 10095f4:	6295383a 	mul	r10,r12,r10
 10095f8:	4ad3383a 	mul	r9,r9,r11
 10095fc:	113fffcc 	andi	r4,r2,65535
 1009600:	1004d43a 	srli	r2,r2,16
 1009604:	4a93883a 	add	r9,r9,r10
 1009608:	3807883a 	mov	r3,r7
 100960c:	1245883a 	add	r2,r2,r9
 1009610:	280f883a 	mov	r7,r5
 1009614:	180b883a 	mov	r5,r3
 1009618:	1006943a 	slli	r3,r2,16
 100961c:	defffd04 	addi	sp,sp,-12
 1009620:	dc800215 	stw	r18,8(sp)
 1009624:	1907883a 	add	r3,r3,r4
 1009628:	dc400115 	stw	r17,4(sp)
 100962c:	dc000015 	stw	r16,0(sp)
 1009630:	4165383a 	mul	r18,r8,r5
 1009634:	31e3383a 	mul	r17,r6,r7
 1009638:	1012d43a 	srli	r9,r2,16
 100963c:	62d9383a 	mul	r12,r12,r11
 1009640:	181f883a 	mov	r15,r3
 1009644:	1280022e 	bgeu	r2,r10,1009650 <__muldi3+0x74>
 1009648:	00800074 	movhi	r2,1
 100964c:	6099883a 	add	r12,r12,r2
 1009650:	624d883a 	add	r6,r12,r9
 1009654:	9187883a 	add	r3,r18,r6
 1009658:	88c7883a 	add	r3,r17,r3
 100965c:	7805883a 	mov	r2,r15
 1009660:	dc800217 	ldw	r18,8(sp)
 1009664:	dc400117 	ldw	r17,4(sp)
 1009668:	dc000017 	ldw	r16,0(sp)
 100966c:	dec00304 	addi	sp,sp,12
 1009670:	f800283a 	ret

01009674 <__clzsi2>:
 1009674:	00bfffd4 	movui	r2,65535
 1009678:	11000e36 	bltu	r2,r4,10096b4 <__clzsi2+0x40>
 100967c:	00803fc4 	movi	r2,255
 1009680:	01400204 	movi	r5,8
 1009684:	0007883a 	mov	r3,zero
 1009688:	11001036 	bltu	r2,r4,10096cc <__clzsi2+0x58>
 100968c:	000b883a 	mov	r5,zero
 1009690:	20c6d83a 	srl	r3,r4,r3
 1009694:	00804074 	movhi	r2,257
 1009698:	10b38004 	addi	r2,r2,-12800
 100969c:	1887883a 	add	r3,r3,r2
 10096a0:	18800003 	ldbu	r2,0(r3)
 10096a4:	00c00804 	movi	r3,32
 10096a8:	2885883a 	add	r2,r5,r2
 10096ac:	1885c83a 	sub	r2,r3,r2
 10096b0:	f800283a 	ret
 10096b4:	01400404 	movi	r5,16
 10096b8:	00804034 	movhi	r2,256
 10096bc:	10bfffc4 	addi	r2,r2,-1
 10096c0:	2807883a 	mov	r3,r5
 10096c4:	113ff22e 	bgeu	r2,r4,1009690 <__clzsi2+0x1c>
 10096c8:	01400604 	movi	r5,24
 10096cc:	2807883a 	mov	r3,r5
 10096d0:	20c6d83a 	srl	r3,r4,r3
 10096d4:	00804074 	movhi	r2,257
 10096d8:	10b38004 	addi	r2,r2,-12800
 10096dc:	1887883a 	add	r3,r3,r2
 10096e0:	18800003 	ldbu	r2,0(r3)
 10096e4:	00c00804 	movi	r3,32
 10096e8:	2885883a 	add	r2,r5,r2
 10096ec:	1885c83a 	sub	r2,r3,r2
 10096f0:	f800283a 	ret

010096f4 <__pack_d>:
 10096f4:	20c00017 	ldw	r3,0(r4)
 10096f8:	defffd04 	addi	sp,sp,-12
 10096fc:	dc000015 	stw	r16,0(sp)
 1009700:	dc800215 	stw	r18,8(sp)
 1009704:	dc400115 	stw	r17,4(sp)
 1009708:	00800044 	movi	r2,1
 100970c:	22000317 	ldw	r8,12(r4)
 1009710:	001f883a 	mov	r15,zero
 1009714:	22400417 	ldw	r9,16(r4)
 1009718:	24000117 	ldw	r16,4(r4)
 100971c:	10c0552e 	bgeu	r2,r3,1009874 <__pack_d+0x180>
 1009720:	00800104 	movi	r2,4
 1009724:	18804f26 	beq	r3,r2,1009864 <__pack_d+0x170>
 1009728:	00800084 	movi	r2,2
 100972c:	18800226 	beq	r3,r2,1009738 <__pack_d+0x44>
 1009730:	4244b03a 	or	r2,r8,r9
 1009734:	10001a1e 	bne	r2,zero,10097a0 <__pack_d+0xac>
 1009738:	000d883a 	mov	r6,zero
 100973c:	000f883a 	mov	r7,zero
 1009740:	0011883a 	mov	r8,zero
 1009744:	00800434 	movhi	r2,16
 1009748:	10bfffc4 	addi	r2,r2,-1
 100974c:	301d883a 	mov	r14,r6
 1009750:	3884703a 	and	r2,r7,r2
 1009754:	400a953a 	slli	r5,r8,20
 1009758:	79bffc2c 	andhi	r6,r15,65520
 100975c:	308cb03a 	or	r6,r6,r2
 1009760:	00e00434 	movhi	r3,32784
 1009764:	18ffffc4 	addi	r3,r3,-1
 1009768:	800497fa 	slli	r2,r16,31
 100976c:	30c6703a 	and	r3,r6,r3
 1009770:	1946b03a 	or	r3,r3,r5
 1009774:	01600034 	movhi	r5,32768
 1009778:	297fffc4 	addi	r5,r5,-1
 100977c:	194a703a 	and	r5,r3,r5
 1009780:	288ab03a 	or	r5,r5,r2
 1009784:	2807883a 	mov	r3,r5
 1009788:	7005883a 	mov	r2,r14
 100978c:	dc800217 	ldw	r18,8(sp)
 1009790:	dc400117 	ldw	r17,4(sp)
 1009794:	dc000017 	ldw	r16,0(sp)
 1009798:	dec00304 	addi	sp,sp,12
 100979c:	f800283a 	ret
 10097a0:	21000217 	ldw	r4,8(r4)
 10097a4:	00bf0084 	movi	r2,-1022
 10097a8:	20803f16 	blt	r4,r2,10098a8 <__pack_d+0x1b4>
 10097ac:	0080ffc4 	movi	r2,1023
 10097b0:	11002c16 	blt	r2,r4,1009864 <__pack_d+0x170>
 10097b4:	00803fc4 	movi	r2,255
 10097b8:	408c703a 	and	r6,r8,r2
 10097bc:	00802004 	movi	r2,128
 10097c0:	0007883a 	mov	r3,zero
 10097c4:	000f883a 	mov	r7,zero
 10097c8:	2280ffc4 	addi	r10,r4,1023
 10097cc:	30801e26 	beq	r6,r2,1009848 <__pack_d+0x154>
 10097d0:	00801fc4 	movi	r2,127
 10097d4:	4089883a 	add	r4,r8,r2
 10097d8:	220d803a 	cmpltu	r6,r4,r8
 10097dc:	324d883a 	add	r6,r6,r9
 10097e0:	2011883a 	mov	r8,r4
 10097e4:	3013883a 	mov	r9,r6
 10097e8:	00880034 	movhi	r2,8192
 10097ec:	10bfffc4 	addi	r2,r2,-1
 10097f0:	12400d36 	bltu	r2,r9,1009828 <__pack_d+0x134>
 10097f4:	4804963a 	slli	r2,r9,24
 10097f8:	400cd23a 	srli	r6,r8,8
 10097fc:	480ed23a 	srli	r7,r9,8
 1009800:	013fffc4 	movi	r4,-1
 1009804:	118cb03a 	or	r6,r2,r6
 1009808:	01400434 	movhi	r5,16
 100980c:	297fffc4 	addi	r5,r5,-1
 1009810:	3104703a 	and	r2,r6,r4
 1009814:	3946703a 	and	r3,r7,r5
 1009818:	5201ffcc 	andi	r8,r10,2047
 100981c:	100d883a 	mov	r6,r2
 1009820:	180f883a 	mov	r7,r3
 1009824:	003fc706 	br	1009744 <__pack_d+0x50>
 1009828:	480897fa 	slli	r4,r9,31
 100982c:	4004d07a 	srli	r2,r8,1
 1009830:	4806d07a 	srli	r3,r9,1
 1009834:	52800044 	addi	r10,r10,1
 1009838:	2084b03a 	or	r2,r4,r2
 100983c:	1011883a 	mov	r8,r2
 1009840:	1813883a 	mov	r9,r3
 1009844:	003feb06 	br	10097f4 <__pack_d+0x100>
 1009848:	383fe11e 	bne	r7,zero,10097d0 <__pack_d+0xdc>
 100984c:	01004004 	movi	r4,256
 1009850:	4104703a 	and	r2,r8,r4
 1009854:	10c4b03a 	or	r2,r2,r3
 1009858:	103fe326 	beq	r2,zero,10097e8 <__pack_d+0xf4>
 100985c:	3005883a 	mov	r2,r6
 1009860:	003fdc06 	br	10097d4 <__pack_d+0xe0>
 1009864:	000d883a 	mov	r6,zero
 1009868:	000f883a 	mov	r7,zero
 100986c:	0201ffc4 	movi	r8,2047
 1009870:	003fb406 	br	1009744 <__pack_d+0x50>
 1009874:	0005883a 	mov	r2,zero
 1009878:	00c00234 	movhi	r3,8
 100987c:	408cb03a 	or	r6,r8,r2
 1009880:	48ceb03a 	or	r7,r9,r3
 1009884:	013fffc4 	movi	r4,-1
 1009888:	01400434 	movhi	r5,16
 100988c:	297fffc4 	addi	r5,r5,-1
 1009890:	3104703a 	and	r2,r6,r4
 1009894:	3946703a 	and	r3,r7,r5
 1009898:	100d883a 	mov	r6,r2
 100989c:	180f883a 	mov	r7,r3
 10098a0:	0201ffc4 	movi	r8,2047
 10098a4:	003fa706 	br	1009744 <__pack_d+0x50>
 10098a8:	1109c83a 	sub	r4,r2,r4
 10098ac:	00800e04 	movi	r2,56
 10098b0:	11004316 	blt	r2,r4,10099c0 <__pack_d+0x2cc>
 10098b4:	21fff804 	addi	r7,r4,-32
 10098b8:	38004516 	blt	r7,zero,10099d0 <__pack_d+0x2dc>
 10098bc:	49d8d83a 	srl	r12,r9,r7
 10098c0:	001b883a 	mov	r13,zero
 10098c4:	0023883a 	mov	r17,zero
 10098c8:	01400044 	movi	r5,1
 10098cc:	0025883a 	mov	r18,zero
 10098d0:	38004716 	blt	r7,zero,10099f0 <__pack_d+0x2fc>
 10098d4:	29d6983a 	sll	r11,r5,r7
 10098d8:	0015883a 	mov	r10,zero
 10098dc:	00bfffc4 	movi	r2,-1
 10098e0:	5089883a 	add	r4,r10,r2
 10098e4:	588b883a 	add	r5,r11,r2
 10098e8:	228d803a 	cmpltu	r6,r4,r10
 10098ec:	314b883a 	add	r5,r6,r5
 10098f0:	4104703a 	and	r2,r8,r4
 10098f4:	4946703a 	and	r3,r9,r5
 10098f8:	10c4b03a 	or	r2,r2,r3
 10098fc:	10000226 	beq	r2,zero,1009908 <__pack_d+0x214>
 1009900:	04400044 	movi	r17,1
 1009904:	0025883a 	mov	r18,zero
 1009908:	00803fc4 	movi	r2,255
 100990c:	644eb03a 	or	r7,r12,r17
 1009910:	3892703a 	and	r9,r7,r2
 1009914:	00802004 	movi	r2,128
 1009918:	6c90b03a 	or	r8,r13,r18
 100991c:	0015883a 	mov	r10,zero
 1009920:	48801626 	beq	r9,r2,100997c <__pack_d+0x288>
 1009924:	01001fc4 	movi	r4,127
 1009928:	3905883a 	add	r2,r7,r4
 100992c:	11cd803a 	cmpltu	r6,r2,r7
 1009930:	320d883a 	add	r6,r6,r8
 1009934:	100f883a 	mov	r7,r2
 1009938:	00840034 	movhi	r2,4096
 100993c:	10bfffc4 	addi	r2,r2,-1
 1009940:	3011883a 	mov	r8,r6
 1009944:	0007883a 	mov	r3,zero
 1009948:	11801b36 	bltu	r2,r6,10099b8 <__pack_d+0x2c4>
 100994c:	4004963a 	slli	r2,r8,24
 1009950:	3808d23a 	srli	r4,r7,8
 1009954:	400ad23a 	srli	r5,r8,8
 1009958:	1813883a 	mov	r9,r3
 100995c:	1108b03a 	or	r4,r2,r4
 1009960:	00bfffc4 	movi	r2,-1
 1009964:	00c00434 	movhi	r3,16
 1009968:	18ffffc4 	addi	r3,r3,-1
 100996c:	208c703a 	and	r6,r4,r2
 1009970:	28ce703a 	and	r7,r5,r3
 1009974:	4a01ffcc 	andi	r8,r9,2047
 1009978:	003f7206 	br	1009744 <__pack_d+0x50>
 100997c:	503fe91e 	bne	r10,zero,1009924 <__pack_d+0x230>
 1009980:	01004004 	movi	r4,256
 1009984:	3904703a 	and	r2,r7,r4
 1009988:	0007883a 	mov	r3,zero
 100998c:	10c4b03a 	or	r2,r2,r3
 1009990:	10000626 	beq	r2,zero,10099ac <__pack_d+0x2b8>
 1009994:	3a45883a 	add	r2,r7,r9
 1009998:	11cd803a 	cmpltu	r6,r2,r7
 100999c:	320d883a 	add	r6,r6,r8
 10099a0:	100f883a 	mov	r7,r2
 10099a4:	3011883a 	mov	r8,r6
 10099a8:	0007883a 	mov	r3,zero
 10099ac:	00840034 	movhi	r2,4096
 10099b0:	10bfffc4 	addi	r2,r2,-1
 10099b4:	123fe52e 	bgeu	r2,r8,100994c <__pack_d+0x258>
 10099b8:	00c00044 	movi	r3,1
 10099bc:	003fe306 	br	100994c <__pack_d+0x258>
 10099c0:	0009883a 	mov	r4,zero
 10099c4:	0013883a 	mov	r9,zero
 10099c8:	000b883a 	mov	r5,zero
 10099cc:	003fe406 	br	1009960 <__pack_d+0x26c>
 10099d0:	4a47883a 	add	r3,r9,r9
 10099d4:	008007c4 	movi	r2,31
 10099d8:	1105c83a 	sub	r2,r2,r4
 10099dc:	1886983a 	sll	r3,r3,r2
 10099e0:	4118d83a 	srl	r12,r8,r4
 10099e4:	491ad83a 	srl	r13,r9,r4
 10099e8:	1b18b03a 	or	r12,r3,r12
 10099ec:	003fb506 	br	10098c4 <__pack_d+0x1d0>
 10099f0:	2806d07a 	srli	r3,r5,1
 10099f4:	008007c4 	movi	r2,31
 10099f8:	1105c83a 	sub	r2,r2,r4
 10099fc:	1896d83a 	srl	r11,r3,r2
 1009a00:	2914983a 	sll	r10,r5,r4
 1009a04:	003fb506 	br	10098dc <__pack_d+0x1e8>

01009a08 <__unpack_d>:
 1009a08:	20c00117 	ldw	r3,4(r4)
 1009a0c:	22400017 	ldw	r9,0(r4)
 1009a10:	00800434 	movhi	r2,16
 1009a14:	10bfffc4 	addi	r2,r2,-1
 1009a18:	1808d53a 	srli	r4,r3,20
 1009a1c:	180cd7fa 	srli	r6,r3,31
 1009a20:	1894703a 	and	r10,r3,r2
 1009a24:	2201ffcc 	andi	r8,r4,2047
 1009a28:	281b883a 	mov	r13,r5
 1009a2c:	4817883a 	mov	r11,r9
 1009a30:	29800115 	stw	r6,4(r5)
 1009a34:	5019883a 	mov	r12,r10
 1009a38:	40001e1e 	bne	r8,zero,1009ab4 <__unpack_d+0xac>
 1009a3c:	4a84b03a 	or	r2,r9,r10
 1009a40:	10001926 	beq	r2,zero,1009aa8 <__unpack_d+0xa0>
 1009a44:	4804d63a 	srli	r2,r9,24
 1009a48:	500c923a 	slli	r6,r10,8
 1009a4c:	013f0084 	movi	r4,-1022
 1009a50:	00c40034 	movhi	r3,4096
 1009a54:	18ffffc4 	addi	r3,r3,-1
 1009a58:	118cb03a 	or	r6,r2,r6
 1009a5c:	008000c4 	movi	r2,3
 1009a60:	480a923a 	slli	r5,r9,8
 1009a64:	68800015 	stw	r2,0(r13)
 1009a68:	69000215 	stw	r4,8(r13)
 1009a6c:	19800b36 	bltu	r3,r6,1009a9c <__unpack_d+0x94>
 1009a70:	200f883a 	mov	r7,r4
 1009a74:	1811883a 	mov	r8,r3
 1009a78:	2945883a 	add	r2,r5,r5
 1009a7c:	1149803a 	cmpltu	r4,r2,r5
 1009a80:	3187883a 	add	r3,r6,r6
 1009a84:	20c9883a 	add	r4,r4,r3
 1009a88:	100b883a 	mov	r5,r2
 1009a8c:	200d883a 	mov	r6,r4
 1009a90:	39ffffc4 	addi	r7,r7,-1
 1009a94:	413ff82e 	bgeu	r8,r4,1009a78 <__unpack_d+0x70>
 1009a98:	69c00215 	stw	r7,8(r13)
 1009a9c:	69800415 	stw	r6,16(r13)
 1009aa0:	69400315 	stw	r5,12(r13)
 1009aa4:	f800283a 	ret
 1009aa8:	00800084 	movi	r2,2
 1009aac:	28800015 	stw	r2,0(r5)
 1009ab0:	f800283a 	ret
 1009ab4:	0081ffc4 	movi	r2,2047
 1009ab8:	40800f26 	beq	r8,r2,1009af8 <__unpack_d+0xf0>
 1009abc:	480cd63a 	srli	r6,r9,24
 1009ac0:	5006923a 	slli	r3,r10,8
 1009ac4:	4804923a 	slli	r2,r9,8
 1009ac8:	0009883a 	mov	r4,zero
 1009acc:	30c6b03a 	or	r3,r6,r3
 1009ad0:	01440034 	movhi	r5,4096
 1009ad4:	110cb03a 	or	r6,r2,r4
 1009ad8:	423f0044 	addi	r8,r8,-1023
 1009adc:	194eb03a 	or	r7,r3,r5
 1009ae0:	008000c4 	movi	r2,3
 1009ae4:	69c00415 	stw	r7,16(r13)
 1009ae8:	6a000215 	stw	r8,8(r13)
 1009aec:	68800015 	stw	r2,0(r13)
 1009af0:	69800315 	stw	r6,12(r13)
 1009af4:	f800283a 	ret
 1009af8:	4a84b03a 	or	r2,r9,r10
 1009afc:	1000031e 	bne	r2,zero,1009b0c <__unpack_d+0x104>
 1009b00:	00800104 	movi	r2,4
 1009b04:	28800015 	stw	r2,0(r5)
 1009b08:	f800283a 	ret
 1009b0c:	0009883a 	mov	r4,zero
 1009b10:	01400234 	movhi	r5,8
 1009b14:	4904703a 	and	r2,r9,r4
 1009b18:	5146703a 	and	r3,r10,r5
 1009b1c:	10c4b03a 	or	r2,r2,r3
 1009b20:	10000526 	beq	r2,zero,1009b38 <__unpack_d+0x130>
 1009b24:	00800044 	movi	r2,1
 1009b28:	68800015 	stw	r2,0(r13)
 1009b2c:	6b000415 	stw	r12,16(r13)
 1009b30:	6ac00315 	stw	r11,12(r13)
 1009b34:	f800283a 	ret
 1009b38:	68000015 	stw	zero,0(r13)
 1009b3c:	003ffb06 	br	1009b2c <__unpack_d+0x124>

01009b40 <__fpcmp_parts_d>:
 1009b40:	21800017 	ldw	r6,0(r4)
 1009b44:	00c00044 	movi	r3,1
 1009b48:	19800a2e 	bgeu	r3,r6,1009b74 <__fpcmp_parts_d+0x34>
 1009b4c:	28800017 	ldw	r2,0(r5)
 1009b50:	1880082e 	bgeu	r3,r2,1009b74 <__fpcmp_parts_d+0x34>
 1009b54:	00c00104 	movi	r3,4
 1009b58:	30c02626 	beq	r6,r3,1009bf4 <__fpcmp_parts_d+0xb4>
 1009b5c:	10c02226 	beq	r2,r3,1009be8 <__fpcmp_parts_d+0xa8>
 1009b60:	00c00084 	movi	r3,2
 1009b64:	30c00526 	beq	r6,r3,1009b7c <__fpcmp_parts_d+0x3c>
 1009b68:	10c0071e 	bne	r2,r3,1009b88 <__fpcmp_parts_d+0x48>
 1009b6c:	20800117 	ldw	r2,4(r4)
 1009b70:	1000091e 	bne	r2,zero,1009b98 <__fpcmp_parts_d+0x58>
 1009b74:	00800044 	movi	r2,1
 1009b78:	f800283a 	ret
 1009b7c:	10c01a1e 	bne	r2,r3,1009be8 <__fpcmp_parts_d+0xa8>
 1009b80:	0005883a 	mov	r2,zero
 1009b84:	f800283a 	ret
 1009b88:	22000117 	ldw	r8,4(r4)
 1009b8c:	28800117 	ldw	r2,4(r5)
 1009b90:	40800326 	beq	r8,r2,1009ba0 <__fpcmp_parts_d+0x60>
 1009b94:	403ff726 	beq	r8,zero,1009b74 <__fpcmp_parts_d+0x34>
 1009b98:	00bfffc4 	movi	r2,-1
 1009b9c:	f800283a 	ret
 1009ba0:	20c00217 	ldw	r3,8(r4)
 1009ba4:	28800217 	ldw	r2,8(r5)
 1009ba8:	10fffa16 	blt	r2,r3,1009b94 <__fpcmp_parts_d+0x54>
 1009bac:	18800916 	blt	r3,r2,1009bd4 <__fpcmp_parts_d+0x94>
 1009bb0:	21c00417 	ldw	r7,16(r4)
 1009bb4:	28c00417 	ldw	r3,16(r5)
 1009bb8:	21800317 	ldw	r6,12(r4)
 1009bbc:	28800317 	ldw	r2,12(r5)
 1009bc0:	19fff436 	bltu	r3,r7,1009b94 <__fpcmp_parts_d+0x54>
 1009bc4:	38c00526 	beq	r7,r3,1009bdc <__fpcmp_parts_d+0x9c>
 1009bc8:	38c00236 	bltu	r7,r3,1009bd4 <__fpcmp_parts_d+0x94>
 1009bcc:	19ffec1e 	bne	r3,r7,1009b80 <__fpcmp_parts_d+0x40>
 1009bd0:	30bfeb2e 	bgeu	r6,r2,1009b80 <__fpcmp_parts_d+0x40>
 1009bd4:	403fe71e 	bne	r8,zero,1009b74 <__fpcmp_parts_d+0x34>
 1009bd8:	003fef06 	br	1009b98 <__fpcmp_parts_d+0x58>
 1009bdc:	11bffa2e 	bgeu	r2,r6,1009bc8 <__fpcmp_parts_d+0x88>
 1009be0:	403fe426 	beq	r8,zero,1009b74 <__fpcmp_parts_d+0x34>
 1009be4:	003fec06 	br	1009b98 <__fpcmp_parts_d+0x58>
 1009be8:	28800117 	ldw	r2,4(r5)
 1009bec:	103fe11e 	bne	r2,zero,1009b74 <__fpcmp_parts_d+0x34>
 1009bf0:	003fe906 	br	1009b98 <__fpcmp_parts_d+0x58>
 1009bf4:	11bfdd1e 	bne	r2,r6,1009b6c <__fpcmp_parts_d+0x2c>
 1009bf8:	28c00117 	ldw	r3,4(r5)
 1009bfc:	20800117 	ldw	r2,4(r4)
 1009c00:	1885c83a 	sub	r2,r3,r2
 1009c04:	f800283a 	ret

01009c08 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1009c08:	defff804 	addi	sp,sp,-32
 1009c0c:	dfc00715 	stw	ra,28(sp)
 1009c10:	df000615 	stw	fp,24(sp)
 1009c14:	df000604 	addi	fp,sp,24
 1009c18:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1009c1c:	e0bffc17 	ldw	r2,-16(fp)
 1009c20:	1004803a 	cmplt	r2,r2,zero
 1009c24:	1000081e 	bne	r2,zero,1009c48 <close+0x40>
 1009c28:	e0bffc17 	ldw	r2,-16(fp)
 1009c2c:	10800324 	muli	r2,r2,12
 1009c30:	1007883a 	mov	r3,r2
 1009c34:	00804074 	movhi	r2,257
 1009c38:	10b5e804 	addi	r2,r2,-10336
 1009c3c:	1887883a 	add	r3,r3,r2
 1009c40:	e0ffff15 	stw	r3,-4(fp)
 1009c44:	00000106 	br	1009c4c <close+0x44>
 1009c48:	e03fff15 	stw	zero,-4(fp)
 1009c4c:	e0bfff17 	ldw	r2,-4(fp)
 1009c50:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1009c54:	e0bffb17 	ldw	r2,-20(fp)
 1009c58:	1005003a 	cmpeq	r2,r2,zero
 1009c5c:	10001d1e 	bne	r2,zero,1009cd4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1009c60:	e0bffb17 	ldw	r2,-20(fp)
 1009c64:	10800017 	ldw	r2,0(r2)
 1009c68:	10800417 	ldw	r2,16(r2)
 1009c6c:	1005003a 	cmpeq	r2,r2,zero
 1009c70:	1000071e 	bne	r2,zero,1009c90 <close+0x88>
 1009c74:	e0bffb17 	ldw	r2,-20(fp)
 1009c78:	10800017 	ldw	r2,0(r2)
 1009c7c:	10800417 	ldw	r2,16(r2)
 1009c80:	e13ffb17 	ldw	r4,-20(fp)
 1009c84:	103ee83a 	callr	r2
 1009c88:	e0bffe15 	stw	r2,-8(fp)
 1009c8c:	00000106 	br	1009c94 <close+0x8c>
 1009c90:	e03ffe15 	stw	zero,-8(fp)
 1009c94:	e0bffe17 	ldw	r2,-8(fp)
 1009c98:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1009c9c:	e13ffc17 	ldw	r4,-16(fp)
 1009ca0:	100a44c0 	call	100a44c <alt_release_fd>
    if (rval < 0)
 1009ca4:	e0bffa17 	ldw	r2,-24(fp)
 1009ca8:	1004403a 	cmpge	r2,r2,zero
 1009cac:	1000071e 	bne	r2,zero,1009ccc <close+0xc4>
    {
      ALT_ERRNO = -rval;
 1009cb0:	1009d040 	call	1009d04 <alt_get_errno>
 1009cb4:	e0fffa17 	ldw	r3,-24(fp)
 1009cb8:	00c7c83a 	sub	r3,zero,r3
 1009cbc:	10c00015 	stw	r3,0(r2)
      return -1;
 1009cc0:	00bfffc4 	movi	r2,-1
 1009cc4:	e0bffd15 	stw	r2,-12(fp)
 1009cc8:	00000806 	br	1009cec <close+0xe4>
    }
    return 0;
 1009ccc:	e03ffd15 	stw	zero,-12(fp)
 1009cd0:	00000606 	br	1009cec <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1009cd4:	1009d040 	call	1009d04 <alt_get_errno>
 1009cd8:	1007883a 	mov	r3,r2
 1009cdc:	00801444 	movi	r2,81
 1009ce0:	18800015 	stw	r2,0(r3)
    return -1;
 1009ce4:	00bfffc4 	movi	r2,-1
 1009ce8:	e0bffd15 	stw	r2,-12(fp)
 1009cec:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1009cf0:	e037883a 	mov	sp,fp
 1009cf4:	dfc00117 	ldw	ra,4(sp)
 1009cf8:	df000017 	ldw	fp,0(sp)
 1009cfc:	dec00204 	addi	sp,sp,8
 1009d00:	f800283a 	ret

01009d04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1009d04:	defffd04 	addi	sp,sp,-12
 1009d08:	dfc00215 	stw	ra,8(sp)
 1009d0c:	df000115 	stw	fp,4(sp)
 1009d10:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1009d14:	00804074 	movhi	r2,257
 1009d18:	10ba8d04 	addi	r2,r2,-5580
 1009d1c:	10800017 	ldw	r2,0(r2)
 1009d20:	1005003a 	cmpeq	r2,r2,zero
 1009d24:	1000061e 	bne	r2,zero,1009d40 <alt_get_errno+0x3c>
 1009d28:	00804074 	movhi	r2,257
 1009d2c:	10ba8d04 	addi	r2,r2,-5580
 1009d30:	10800017 	ldw	r2,0(r2)
 1009d34:	103ee83a 	callr	r2
 1009d38:	e0bfff15 	stw	r2,-4(fp)
 1009d3c:	00000306 	br	1009d4c <alt_get_errno+0x48>
 1009d40:	00804074 	movhi	r2,257
 1009d44:	10815104 	addi	r2,r2,1348
 1009d48:	e0bfff15 	stw	r2,-4(fp)
 1009d4c:	e0bfff17 	ldw	r2,-4(fp)
}
 1009d50:	e037883a 	mov	sp,fp
 1009d54:	dfc00117 	ldw	ra,4(sp)
 1009d58:	df000017 	ldw	fp,0(sp)
 1009d5c:	dec00204 	addi	sp,sp,8
 1009d60:	f800283a 	ret

01009d64 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1009d64:	defffc04 	addi	sp,sp,-16
 1009d68:	df000315 	stw	fp,12(sp)
 1009d6c:	df000304 	addi	fp,sp,12
 1009d70:	e13ffd15 	stw	r4,-12(fp)
 1009d74:	e17ffe15 	stw	r5,-8(fp)
 1009d78:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1009d7c:	e0bfff17 	ldw	r2,-4(fp)
}
 1009d80:	e037883a 	mov	sp,fp
 1009d84:	df000017 	ldw	fp,0(sp)
 1009d88:	dec00104 	addi	sp,sp,4
 1009d8c:	f800283a 	ret

01009d90 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1009d90:	defff904 	addi	sp,sp,-28
 1009d94:	dfc00615 	stw	ra,24(sp)
 1009d98:	df000515 	stw	fp,20(sp)
 1009d9c:	df000504 	addi	fp,sp,20
 1009da0:	e13ffc15 	stw	r4,-16(fp)
 1009da4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1009da8:	e0bffc17 	ldw	r2,-16(fp)
 1009dac:	1004803a 	cmplt	r2,r2,zero
 1009db0:	1000081e 	bne	r2,zero,1009dd4 <fstat+0x44>
 1009db4:	e0bffc17 	ldw	r2,-16(fp)
 1009db8:	10800324 	muli	r2,r2,12
 1009dbc:	1007883a 	mov	r3,r2
 1009dc0:	00804074 	movhi	r2,257
 1009dc4:	10b5e804 	addi	r2,r2,-10336
 1009dc8:	1887883a 	add	r3,r3,r2
 1009dcc:	e0ffff15 	stw	r3,-4(fp)
 1009dd0:	00000106 	br	1009dd8 <fstat+0x48>
 1009dd4:	e03fff15 	stw	zero,-4(fp)
 1009dd8:	e0bfff17 	ldw	r2,-4(fp)
 1009ddc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1009de0:	e0bffb17 	ldw	r2,-20(fp)
 1009de4:	1005003a 	cmpeq	r2,r2,zero
 1009de8:	1000121e 	bne	r2,zero,1009e34 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1009dec:	e0bffb17 	ldw	r2,-20(fp)
 1009df0:	10800017 	ldw	r2,0(r2)
 1009df4:	10800817 	ldw	r2,32(r2)
 1009df8:	1005003a 	cmpeq	r2,r2,zero
 1009dfc:	1000081e 	bne	r2,zero,1009e20 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 1009e00:	e0bffb17 	ldw	r2,-20(fp)
 1009e04:	10800017 	ldw	r2,0(r2)
 1009e08:	10800817 	ldw	r2,32(r2)
 1009e0c:	e13ffb17 	ldw	r4,-20(fp)
 1009e10:	e17ffd17 	ldw	r5,-12(fp)
 1009e14:	103ee83a 	callr	r2
 1009e18:	e0bffe15 	stw	r2,-8(fp)
 1009e1c:	00000b06 	br	1009e4c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1009e20:	e0fffd17 	ldw	r3,-12(fp)
 1009e24:	00880004 	movi	r2,8192
 1009e28:	18800115 	stw	r2,4(r3)
      return 0;
 1009e2c:	e03ffe15 	stw	zero,-8(fp)
 1009e30:	00000606 	br	1009e4c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1009e34:	1009e640 	call	1009e64 <alt_get_errno>
 1009e38:	1007883a 	mov	r3,r2
 1009e3c:	00801444 	movi	r2,81
 1009e40:	18800015 	stw	r2,0(r3)
    return -1;
 1009e44:	00bfffc4 	movi	r2,-1
 1009e48:	e0bffe15 	stw	r2,-8(fp)
 1009e4c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1009e50:	e037883a 	mov	sp,fp
 1009e54:	dfc00117 	ldw	ra,4(sp)
 1009e58:	df000017 	ldw	fp,0(sp)
 1009e5c:	dec00204 	addi	sp,sp,8
 1009e60:	f800283a 	ret

01009e64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1009e64:	defffd04 	addi	sp,sp,-12
 1009e68:	dfc00215 	stw	ra,8(sp)
 1009e6c:	df000115 	stw	fp,4(sp)
 1009e70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1009e74:	00804074 	movhi	r2,257
 1009e78:	10ba8d04 	addi	r2,r2,-5580
 1009e7c:	10800017 	ldw	r2,0(r2)
 1009e80:	1005003a 	cmpeq	r2,r2,zero
 1009e84:	1000061e 	bne	r2,zero,1009ea0 <alt_get_errno+0x3c>
 1009e88:	00804074 	movhi	r2,257
 1009e8c:	10ba8d04 	addi	r2,r2,-5580
 1009e90:	10800017 	ldw	r2,0(r2)
 1009e94:	103ee83a 	callr	r2
 1009e98:	e0bfff15 	stw	r2,-4(fp)
 1009e9c:	00000306 	br	1009eac <alt_get_errno+0x48>
 1009ea0:	00804074 	movhi	r2,257
 1009ea4:	10815104 	addi	r2,r2,1348
 1009ea8:	e0bfff15 	stw	r2,-4(fp)
 1009eac:	e0bfff17 	ldw	r2,-4(fp)
}
 1009eb0:	e037883a 	mov	sp,fp
 1009eb4:	dfc00117 	ldw	ra,4(sp)
 1009eb8:	df000017 	ldw	fp,0(sp)
 1009ebc:	dec00204 	addi	sp,sp,8
 1009ec0:	f800283a 	ret

01009ec4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1009ec4:	deffeb04 	addi	sp,sp,-84
 1009ec8:	dfc01415 	stw	ra,80(sp)
 1009ecc:	df001315 	stw	fp,76(sp)
 1009ed0:	df001304 	addi	fp,sp,76
 1009ed4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1009ed8:	e0bffd17 	ldw	r2,-12(fp)
 1009edc:	1004803a 	cmplt	r2,r2,zero
 1009ee0:	1000081e 	bne	r2,zero,1009f04 <isatty+0x40>
 1009ee4:	e0bffd17 	ldw	r2,-12(fp)
 1009ee8:	10800324 	muli	r2,r2,12
 1009eec:	1007883a 	mov	r3,r2
 1009ef0:	00804074 	movhi	r2,257
 1009ef4:	10b5e804 	addi	r2,r2,-10336
 1009ef8:	1887883a 	add	r3,r3,r2
 1009efc:	e0ffff15 	stw	r3,-4(fp)
 1009f00:	00000106 	br	1009f08 <isatty+0x44>
 1009f04:	e03fff15 	stw	zero,-4(fp)
 1009f08:	e0bfff17 	ldw	r2,-4(fp)
 1009f0c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 1009f10:	e0bfed17 	ldw	r2,-76(fp)
 1009f14:	1005003a 	cmpeq	r2,r2,zero
 1009f18:	10000f1e 	bne	r2,zero,1009f58 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1009f1c:	e0bfed17 	ldw	r2,-76(fp)
 1009f20:	10800017 	ldw	r2,0(r2)
 1009f24:	10800817 	ldw	r2,32(r2)
 1009f28:	1004c03a 	cmpne	r2,r2,zero
 1009f2c:	1000031e 	bne	r2,zero,1009f3c <isatty+0x78>
    {
      return 1;
 1009f30:	00800044 	movi	r2,1
 1009f34:	e0bffe15 	stw	r2,-8(fp)
 1009f38:	00000c06 	br	1009f6c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1009f3c:	e17fee04 	addi	r5,fp,-72
 1009f40:	e13ffd17 	ldw	r4,-12(fp)
 1009f44:	1009d900 	call	1009d90 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1009f48:	e0bfef17 	ldw	r2,-68(fp)
 1009f4c:	10880020 	cmpeqi	r2,r2,8192
 1009f50:	e0bffe15 	stw	r2,-8(fp)
 1009f54:	00000506 	br	1009f6c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1009f58:	1009f840 	call	1009f84 <alt_get_errno>
 1009f5c:	1007883a 	mov	r3,r2
 1009f60:	00801444 	movi	r2,81
 1009f64:	18800015 	stw	r2,0(r3)
    return 0;
 1009f68:	e03ffe15 	stw	zero,-8(fp)
 1009f6c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1009f70:	e037883a 	mov	sp,fp
 1009f74:	dfc00117 	ldw	ra,4(sp)
 1009f78:	df000017 	ldw	fp,0(sp)
 1009f7c:	dec00204 	addi	sp,sp,8
 1009f80:	f800283a 	ret

01009f84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1009f84:	defffd04 	addi	sp,sp,-12
 1009f88:	dfc00215 	stw	ra,8(sp)
 1009f8c:	df000115 	stw	fp,4(sp)
 1009f90:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1009f94:	00804074 	movhi	r2,257
 1009f98:	10ba8d04 	addi	r2,r2,-5580
 1009f9c:	10800017 	ldw	r2,0(r2)
 1009fa0:	1005003a 	cmpeq	r2,r2,zero
 1009fa4:	1000061e 	bne	r2,zero,1009fc0 <alt_get_errno+0x3c>
 1009fa8:	00804074 	movhi	r2,257
 1009fac:	10ba8d04 	addi	r2,r2,-5580
 1009fb0:	10800017 	ldw	r2,0(r2)
 1009fb4:	103ee83a 	callr	r2
 1009fb8:	e0bfff15 	stw	r2,-4(fp)
 1009fbc:	00000306 	br	1009fcc <alt_get_errno+0x48>
 1009fc0:	00804074 	movhi	r2,257
 1009fc4:	10815104 	addi	r2,r2,1348
 1009fc8:	e0bfff15 	stw	r2,-4(fp)
 1009fcc:	e0bfff17 	ldw	r2,-4(fp)
}
 1009fd0:	e037883a 	mov	sp,fp
 1009fd4:	dfc00117 	ldw	ra,4(sp)
 1009fd8:	df000017 	ldw	fp,0(sp)
 1009fdc:	dec00204 	addi	sp,sp,8
 1009fe0:	f800283a 	ret

01009fe4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1009fe4:	defffe04 	addi	sp,sp,-8
 1009fe8:	dfc00115 	stw	ra,4(sp)
 1009fec:	df000015 	stw	fp,0(sp)
 1009ff0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1009ff4:	01004074 	movhi	r4,257
 1009ff8:	213a9204 	addi	r4,r4,-5560
 1009ffc:	01404074 	movhi	r5,257
 100a000:	2973d904 	addi	r5,r5,-12444
 100a004:	01804074 	movhi	r6,257
 100a008:	31ba9204 	addi	r6,r6,-5560
 100a00c:	100a0640 	call	100a064 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100a010:	01004034 	movhi	r4,256
 100a014:	21000804 	addi	r4,r4,32
 100a018:	01404034 	movhi	r5,256
 100a01c:	29400804 	addi	r5,r5,32
 100a020:	01804034 	movhi	r6,256
 100a024:	31806e04 	addi	r6,r6,440
 100a028:	100a0640 	call	100a064 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100a02c:	01004074 	movhi	r4,257
 100a030:	2132b804 	addi	r4,r4,-13600
 100a034:	01404074 	movhi	r5,257
 100a038:	2972b804 	addi	r5,r5,-13600
 100a03c:	01804074 	movhi	r6,257
 100a040:	31b3d904 	addi	r6,r6,-12444
 100a044:	100a0640 	call	100a064 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100a048:	100ba040 	call	100ba04 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100a04c:	100bcb80 	call	100bcb8 <alt_icache_flush_all>
}
 100a050:	e037883a 	mov	sp,fp
 100a054:	dfc00117 	ldw	ra,4(sp)
 100a058:	df000017 	ldw	fp,0(sp)
 100a05c:	dec00204 	addi	sp,sp,8
 100a060:	f800283a 	ret

0100a064 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100a064:	defffc04 	addi	sp,sp,-16
 100a068:	df000315 	stw	fp,12(sp)
 100a06c:	df000304 	addi	fp,sp,12
 100a070:	e13ffd15 	stw	r4,-12(fp)
 100a074:	e17ffe15 	stw	r5,-8(fp)
 100a078:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100a07c:	e0fffe17 	ldw	r3,-8(fp)
 100a080:	e0bffd17 	ldw	r2,-12(fp)
 100a084:	18800e26 	beq	r3,r2,100a0c0 <alt_load_section+0x5c>
  {
    while( to != end )
 100a088:	00000a06 	br	100a0b4 <alt_load_section+0x50>
    {
      *to++ = *from++;
 100a08c:	e0bffd17 	ldw	r2,-12(fp)
 100a090:	10c00017 	ldw	r3,0(r2)
 100a094:	e0bffe17 	ldw	r2,-8(fp)
 100a098:	10c00015 	stw	r3,0(r2)
 100a09c:	e0bffe17 	ldw	r2,-8(fp)
 100a0a0:	10800104 	addi	r2,r2,4
 100a0a4:	e0bffe15 	stw	r2,-8(fp)
 100a0a8:	e0bffd17 	ldw	r2,-12(fp)
 100a0ac:	10800104 	addi	r2,r2,4
 100a0b0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100a0b4:	e0fffe17 	ldw	r3,-8(fp)
 100a0b8:	e0bfff17 	ldw	r2,-4(fp)
 100a0bc:	18bff31e 	bne	r3,r2,100a08c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100a0c0:	e037883a 	mov	sp,fp
 100a0c4:	df000017 	ldw	fp,0(sp)
 100a0c8:	dec00104 	addi	sp,sp,4
 100a0cc:	f800283a 	ret

0100a0d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100a0d0:	defff804 	addi	sp,sp,-32
 100a0d4:	dfc00715 	stw	ra,28(sp)
 100a0d8:	df000615 	stw	fp,24(sp)
 100a0dc:	df000604 	addi	fp,sp,24
 100a0e0:	e13ffc15 	stw	r4,-16(fp)
 100a0e4:	e17ffd15 	stw	r5,-12(fp)
 100a0e8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100a0ec:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a0f0:	e0bffc17 	ldw	r2,-16(fp)
 100a0f4:	1004803a 	cmplt	r2,r2,zero
 100a0f8:	1000081e 	bne	r2,zero,100a11c <lseek+0x4c>
 100a0fc:	e0bffc17 	ldw	r2,-16(fp)
 100a100:	10800324 	muli	r2,r2,12
 100a104:	1007883a 	mov	r3,r2
 100a108:	00804074 	movhi	r2,257
 100a10c:	10b5e804 	addi	r2,r2,-10336
 100a110:	1887883a 	add	r3,r3,r2
 100a114:	e0ffff15 	stw	r3,-4(fp)
 100a118:	00000106 	br	100a120 <lseek+0x50>
 100a11c:	e03fff15 	stw	zero,-4(fp)
 100a120:	e0bfff17 	ldw	r2,-4(fp)
 100a124:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100a128:	e0bffb17 	ldw	r2,-20(fp)
 100a12c:	1005003a 	cmpeq	r2,r2,zero
 100a130:	1000111e 	bne	r2,zero,100a178 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100a134:	e0bffb17 	ldw	r2,-20(fp)
 100a138:	10800017 	ldw	r2,0(r2)
 100a13c:	10800717 	ldw	r2,28(r2)
 100a140:	1005003a 	cmpeq	r2,r2,zero
 100a144:	1000091e 	bne	r2,zero,100a16c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100a148:	e0bffb17 	ldw	r2,-20(fp)
 100a14c:	10800017 	ldw	r2,0(r2)
 100a150:	10800717 	ldw	r2,28(r2)
 100a154:	e13ffb17 	ldw	r4,-20(fp)
 100a158:	e17ffd17 	ldw	r5,-12(fp)
 100a15c:	e1bffe17 	ldw	r6,-8(fp)
 100a160:	103ee83a 	callr	r2
 100a164:	e0bffa15 	stw	r2,-24(fp)
 100a168:	00000506 	br	100a180 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100a16c:	00bfde84 	movi	r2,-134
 100a170:	e0bffa15 	stw	r2,-24(fp)
 100a174:	00000206 	br	100a180 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 100a178:	00bfebc4 	movi	r2,-81
 100a17c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100a180:	e0bffa17 	ldw	r2,-24(fp)
 100a184:	1004403a 	cmpge	r2,r2,zero
 100a188:	1000071e 	bne	r2,zero,100a1a8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 100a18c:	100a1c00 	call	100a1c0 <alt_get_errno>
 100a190:	1007883a 	mov	r3,r2
 100a194:	e0bffa17 	ldw	r2,-24(fp)
 100a198:	0085c83a 	sub	r2,zero,r2
 100a19c:	18800015 	stw	r2,0(r3)
    rc = -1;
 100a1a0:	00bfffc4 	movi	r2,-1
 100a1a4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100a1a8:	e0bffa17 	ldw	r2,-24(fp)
}
 100a1ac:	e037883a 	mov	sp,fp
 100a1b0:	dfc00117 	ldw	ra,4(sp)
 100a1b4:	df000017 	ldw	fp,0(sp)
 100a1b8:	dec00204 	addi	sp,sp,8
 100a1bc:	f800283a 	ret

0100a1c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a1c0:	defffd04 	addi	sp,sp,-12
 100a1c4:	dfc00215 	stw	ra,8(sp)
 100a1c8:	df000115 	stw	fp,4(sp)
 100a1cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a1d0:	00804074 	movhi	r2,257
 100a1d4:	10ba8d04 	addi	r2,r2,-5580
 100a1d8:	10800017 	ldw	r2,0(r2)
 100a1dc:	1005003a 	cmpeq	r2,r2,zero
 100a1e0:	1000061e 	bne	r2,zero,100a1fc <alt_get_errno+0x3c>
 100a1e4:	00804074 	movhi	r2,257
 100a1e8:	10ba8d04 	addi	r2,r2,-5580
 100a1ec:	10800017 	ldw	r2,0(r2)
 100a1f0:	103ee83a 	callr	r2
 100a1f4:	e0bfff15 	stw	r2,-4(fp)
 100a1f8:	00000306 	br	100a208 <alt_get_errno+0x48>
 100a1fc:	00804074 	movhi	r2,257
 100a200:	10815104 	addi	r2,r2,1348
 100a204:	e0bfff15 	stw	r2,-4(fp)
 100a208:	e0bfff17 	ldw	r2,-4(fp)
}
 100a20c:	e037883a 	mov	sp,fp
 100a210:	dfc00117 	ldw	ra,4(sp)
 100a214:	df000017 	ldw	fp,0(sp)
 100a218:	dec00204 	addi	sp,sp,8
 100a21c:	f800283a 	ret

0100a220 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100a220:	defffd04 	addi	sp,sp,-12
 100a224:	dfc00215 	stw	ra,8(sp)
 100a228:	df000115 	stw	fp,4(sp)
 100a22c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100a230:	0009883a 	mov	r4,zero
 100a234:	100a6e80 	call	100a6e8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100a238:	100a71c0 	call	100a71c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100a23c:	01004074 	movhi	r4,257
 100a240:	2133c304 	addi	r4,r4,-12532
 100a244:	01404074 	movhi	r5,257
 100a248:	2973c304 	addi	r5,r5,-12532
 100a24c:	01804074 	movhi	r6,257
 100a250:	31b3c304 	addi	r6,r6,-12532
 100a254:	100bdac0 	call	100bdac <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100a258:	100bb5c0 	call	100bb5c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100a25c:	01004074 	movhi	r4,257
 100a260:	212ef004 	addi	r4,r4,-17472
 100a264:	100c6d40 	call	100c6d4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100a268:	d126d017 	ldw	r4,-25792(gp)
 100a26c:	d166d117 	ldw	r5,-25788(gp)
 100a270:	d1a6d217 	ldw	r6,-25784(gp)
 100a274:	10002040 	call	1000204 <main>
 100a278:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100a27c:	01000044 	movi	r4,1
 100a280:	1009c080 	call	1009c08 <close>
  exit (result);
 100a284:	e13fff17 	ldw	r4,-4(fp)
 100a288:	100c6e80 	call	100c6e8 <exit>

0100a28c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100a28c:	defffe04 	addi	sp,sp,-8
 100a290:	df000115 	stw	fp,4(sp)
 100a294:	df000104 	addi	fp,sp,4
 100a298:	e13fff15 	stw	r4,-4(fp)
}
 100a29c:	e037883a 	mov	sp,fp
 100a2a0:	df000017 	ldw	fp,0(sp)
 100a2a4:	dec00104 	addi	sp,sp,4
 100a2a8:	f800283a 	ret

0100a2ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100a2ac:	defffe04 	addi	sp,sp,-8
 100a2b0:	df000115 	stw	fp,4(sp)
 100a2b4:	df000104 	addi	fp,sp,4
 100a2b8:	e13fff15 	stw	r4,-4(fp)
}
 100a2bc:	e037883a 	mov	sp,fp
 100a2c0:	df000017 	ldw	fp,0(sp)
 100a2c4:	dec00104 	addi	sp,sp,4
 100a2c8:	f800283a 	ret

0100a2cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100a2cc:	defff704 	addi	sp,sp,-36
 100a2d0:	dfc00815 	stw	ra,32(sp)
 100a2d4:	df000715 	stw	fp,28(sp)
 100a2d8:	df000704 	addi	fp,sp,28
 100a2dc:	e13ffb15 	stw	r4,-20(fp)
 100a2e0:	e17ffc15 	stw	r5,-16(fp)
 100a2e4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a2e8:	e0bffb17 	ldw	r2,-20(fp)
 100a2ec:	1004803a 	cmplt	r2,r2,zero
 100a2f0:	1000081e 	bne	r2,zero,100a314 <read+0x48>
 100a2f4:	e0bffb17 	ldw	r2,-20(fp)
 100a2f8:	10800324 	muli	r2,r2,12
 100a2fc:	1007883a 	mov	r3,r2
 100a300:	00804074 	movhi	r2,257
 100a304:	10b5e804 	addi	r2,r2,-10336
 100a308:	1887883a 	add	r3,r3,r2
 100a30c:	e0ffff15 	stw	r3,-4(fp)
 100a310:	00000106 	br	100a318 <read+0x4c>
 100a314:	e03fff15 	stw	zero,-4(fp)
 100a318:	e0bfff17 	ldw	r2,-4(fp)
 100a31c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100a320:	e0bffa17 	ldw	r2,-24(fp)
 100a324:	1005003a 	cmpeq	r2,r2,zero
 100a328:	1000241e 	bne	r2,zero,100a3bc <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100a32c:	e0bffa17 	ldw	r2,-24(fp)
 100a330:	10800217 	ldw	r2,8(r2)
 100a334:	108000cc 	andi	r2,r2,3
 100a338:	10800060 	cmpeqi	r2,r2,1
 100a33c:	10001a1e 	bne	r2,zero,100a3a8 <read+0xdc>
 100a340:	e0bffa17 	ldw	r2,-24(fp)
 100a344:	10800017 	ldw	r2,0(r2)
 100a348:	10800517 	ldw	r2,20(r2)
 100a34c:	1005003a 	cmpeq	r2,r2,zero
 100a350:	1000151e 	bne	r2,zero,100a3a8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100a354:	e0bffa17 	ldw	r2,-24(fp)
 100a358:	10800017 	ldw	r2,0(r2)
 100a35c:	10800517 	ldw	r2,20(r2)
 100a360:	e17ffc17 	ldw	r5,-16(fp)
 100a364:	e1bffd17 	ldw	r6,-12(fp)
 100a368:	e13ffa17 	ldw	r4,-24(fp)
 100a36c:	103ee83a 	callr	r2
 100a370:	e0bff915 	stw	r2,-28(fp)
 100a374:	e0bff917 	ldw	r2,-28(fp)
 100a378:	1004403a 	cmpge	r2,r2,zero
 100a37c:	1000071e 	bne	r2,zero,100a39c <read+0xd0>
        {
          ALT_ERRNO = -rval;
 100a380:	100a3ec0 	call	100a3ec <alt_get_errno>
 100a384:	e0fff917 	ldw	r3,-28(fp)
 100a388:	00c7c83a 	sub	r3,zero,r3
 100a38c:	10c00015 	stw	r3,0(r2)
          return -1;
 100a390:	00bfffc4 	movi	r2,-1
 100a394:	e0bffe15 	stw	r2,-8(fp)
 100a398:	00000e06 	br	100a3d4 <read+0x108>
        }
        return rval;
 100a39c:	e0bff917 	ldw	r2,-28(fp)
 100a3a0:	e0bffe15 	stw	r2,-8(fp)
 100a3a4:	00000b06 	br	100a3d4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100a3a8:	100a3ec0 	call	100a3ec <alt_get_errno>
 100a3ac:	1007883a 	mov	r3,r2
 100a3b0:	00800344 	movi	r2,13
 100a3b4:	18800015 	stw	r2,0(r3)
 100a3b8:	00000406 	br	100a3cc <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100a3bc:	100a3ec0 	call	100a3ec <alt_get_errno>
 100a3c0:	1007883a 	mov	r3,r2
 100a3c4:	00801444 	movi	r2,81
 100a3c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100a3cc:	00bfffc4 	movi	r2,-1
 100a3d0:	e0bffe15 	stw	r2,-8(fp)
 100a3d4:	e0bffe17 	ldw	r2,-8(fp)
}
 100a3d8:	e037883a 	mov	sp,fp
 100a3dc:	dfc00117 	ldw	ra,4(sp)
 100a3e0:	df000017 	ldw	fp,0(sp)
 100a3e4:	dec00204 	addi	sp,sp,8
 100a3e8:	f800283a 	ret

0100a3ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a3ec:	defffd04 	addi	sp,sp,-12
 100a3f0:	dfc00215 	stw	ra,8(sp)
 100a3f4:	df000115 	stw	fp,4(sp)
 100a3f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a3fc:	00804074 	movhi	r2,257
 100a400:	10ba8d04 	addi	r2,r2,-5580
 100a404:	10800017 	ldw	r2,0(r2)
 100a408:	1005003a 	cmpeq	r2,r2,zero
 100a40c:	1000061e 	bne	r2,zero,100a428 <alt_get_errno+0x3c>
 100a410:	00804074 	movhi	r2,257
 100a414:	10ba8d04 	addi	r2,r2,-5580
 100a418:	10800017 	ldw	r2,0(r2)
 100a41c:	103ee83a 	callr	r2
 100a420:	e0bfff15 	stw	r2,-4(fp)
 100a424:	00000306 	br	100a434 <alt_get_errno+0x48>
 100a428:	00804074 	movhi	r2,257
 100a42c:	10815104 	addi	r2,r2,1348
 100a430:	e0bfff15 	stw	r2,-4(fp)
 100a434:	e0bfff17 	ldw	r2,-4(fp)
}
 100a438:	e037883a 	mov	sp,fp
 100a43c:	dfc00117 	ldw	ra,4(sp)
 100a440:	df000017 	ldw	fp,0(sp)
 100a444:	dec00204 	addi	sp,sp,8
 100a448:	f800283a 	ret

0100a44c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100a44c:	defffe04 	addi	sp,sp,-8
 100a450:	df000115 	stw	fp,4(sp)
 100a454:	df000104 	addi	fp,sp,4
 100a458:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100a45c:	e0bfff17 	ldw	r2,-4(fp)
 100a460:	108000d0 	cmplti	r2,r2,3
 100a464:	10000d1e 	bne	r2,zero,100a49c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 100a468:	e0bfff17 	ldw	r2,-4(fp)
 100a46c:	00c04074 	movhi	r3,257
 100a470:	18f5e804 	addi	r3,r3,-10336
 100a474:	10800324 	muli	r2,r2,12
 100a478:	10c5883a 	add	r2,r2,r3
 100a47c:	10800204 	addi	r2,r2,8
 100a480:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100a484:	e0bfff17 	ldw	r2,-4(fp)
 100a488:	00c04074 	movhi	r3,257
 100a48c:	18f5e804 	addi	r3,r3,-10336
 100a490:	10800324 	muli	r2,r2,12
 100a494:	10c5883a 	add	r2,r2,r3
 100a498:	10000015 	stw	zero,0(r2)
  }
}
 100a49c:	e037883a 	mov	sp,fp
 100a4a0:	df000017 	ldw	fp,0(sp)
 100a4a4:	dec00104 	addi	sp,sp,4
 100a4a8:	f800283a 	ret

0100a4ac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100a4ac:	defff804 	addi	sp,sp,-32
 100a4b0:	df000715 	stw	fp,28(sp)
 100a4b4:	df000704 	addi	fp,sp,28
 100a4b8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a4bc:	0005303a 	rdctl	r2,status
 100a4c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a4c4:	e0fffb17 	ldw	r3,-20(fp)
 100a4c8:	00bfff84 	movi	r2,-2
 100a4cc:	1884703a 	and	r2,r3,r2
 100a4d0:	1001703a 	wrctl	status,r2
  
  return context;
 100a4d4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100a4d8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100a4dc:	d0a00c17 	ldw	r2,-32720(gp)
 100a4e0:	10c000c4 	addi	r3,r2,3
 100a4e4:	00bfff04 	movi	r2,-4
 100a4e8:	1884703a 	and	r2,r3,r2
 100a4ec:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100a4f0:	d0e00c17 	ldw	r3,-32720(gp)
 100a4f4:	e0bffe17 	ldw	r2,-8(fp)
 100a4f8:	1887883a 	add	r3,r3,r2
 100a4fc:	00806034 	movhi	r2,384
 100a500:	10800004 	addi	r2,r2,0
 100a504:	10c0072e 	bgeu	r2,r3,100a524 <sbrk+0x78>
 100a508:	e0bffd17 	ldw	r2,-12(fp)
 100a50c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a510:	e0bffa17 	ldw	r2,-24(fp)
 100a514:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100a518:	00bfffc4 	movi	r2,-1
 100a51c:	e0bfff15 	stw	r2,-4(fp)
 100a520:	00000c06 	br	100a554 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100a524:	d0a00c17 	ldw	r2,-32720(gp)
 100a528:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100a52c:	d0e00c17 	ldw	r3,-32720(gp)
 100a530:	e0bffe17 	ldw	r2,-8(fp)
 100a534:	1885883a 	add	r2,r3,r2
 100a538:	d0a00c15 	stw	r2,-32720(gp)
 100a53c:	e0bffd17 	ldw	r2,-12(fp)
 100a540:	e0bff915 	stw	r2,-28(fp)
 100a544:	e0bff917 	ldw	r2,-28(fp)
 100a548:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100a54c:	e0bffc17 	ldw	r2,-16(fp)
 100a550:	e0bfff15 	stw	r2,-4(fp)
 100a554:	e0bfff17 	ldw	r2,-4(fp)
} 
 100a558:	e037883a 	mov	sp,fp
 100a55c:	df000017 	ldw	fp,0(sp)
 100a560:	dec00104 	addi	sp,sp,4
 100a564:	f800283a 	ret

0100a568 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100a568:	defff704 	addi	sp,sp,-36
 100a56c:	dfc00815 	stw	ra,32(sp)
 100a570:	df000715 	stw	fp,28(sp)
 100a574:	df000704 	addi	fp,sp,28
 100a578:	e13ffb15 	stw	r4,-20(fp)
 100a57c:	e17ffc15 	stw	r5,-16(fp)
 100a580:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a584:	e0bffb17 	ldw	r2,-20(fp)
 100a588:	1004803a 	cmplt	r2,r2,zero
 100a58c:	1000081e 	bne	r2,zero,100a5b0 <write+0x48>
 100a590:	e0bffb17 	ldw	r2,-20(fp)
 100a594:	10800324 	muli	r2,r2,12
 100a598:	1007883a 	mov	r3,r2
 100a59c:	00804074 	movhi	r2,257
 100a5a0:	10b5e804 	addi	r2,r2,-10336
 100a5a4:	1887883a 	add	r3,r3,r2
 100a5a8:	e0ffff15 	stw	r3,-4(fp)
 100a5ac:	00000106 	br	100a5b4 <write+0x4c>
 100a5b0:	e03fff15 	stw	zero,-4(fp)
 100a5b4:	e0bfff17 	ldw	r2,-4(fp)
 100a5b8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100a5bc:	e0bffa17 	ldw	r2,-24(fp)
 100a5c0:	1005003a 	cmpeq	r2,r2,zero
 100a5c4:	1000241e 	bne	r2,zero,100a658 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100a5c8:	e0bffa17 	ldw	r2,-24(fp)
 100a5cc:	10800217 	ldw	r2,8(r2)
 100a5d0:	108000cc 	andi	r2,r2,3
 100a5d4:	1005003a 	cmpeq	r2,r2,zero
 100a5d8:	10001a1e 	bne	r2,zero,100a644 <write+0xdc>
 100a5dc:	e0bffa17 	ldw	r2,-24(fp)
 100a5e0:	10800017 	ldw	r2,0(r2)
 100a5e4:	10800617 	ldw	r2,24(r2)
 100a5e8:	1005003a 	cmpeq	r2,r2,zero
 100a5ec:	1000151e 	bne	r2,zero,100a644 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100a5f0:	e0bffa17 	ldw	r2,-24(fp)
 100a5f4:	10800017 	ldw	r2,0(r2)
 100a5f8:	10800617 	ldw	r2,24(r2)
 100a5fc:	e17ffc17 	ldw	r5,-16(fp)
 100a600:	e1bffd17 	ldw	r6,-12(fp)
 100a604:	e13ffa17 	ldw	r4,-24(fp)
 100a608:	103ee83a 	callr	r2
 100a60c:	e0bff915 	stw	r2,-28(fp)
 100a610:	e0bff917 	ldw	r2,-28(fp)
 100a614:	1004403a 	cmpge	r2,r2,zero
 100a618:	1000071e 	bne	r2,zero,100a638 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 100a61c:	100a6880 	call	100a688 <alt_get_errno>
 100a620:	e0fff917 	ldw	r3,-28(fp)
 100a624:	00c7c83a 	sub	r3,zero,r3
 100a628:	10c00015 	stw	r3,0(r2)
        return -1;
 100a62c:	00bfffc4 	movi	r2,-1
 100a630:	e0bffe15 	stw	r2,-8(fp)
 100a634:	00000e06 	br	100a670 <write+0x108>
      }
      return rval;
 100a638:	e0bff917 	ldw	r2,-28(fp)
 100a63c:	e0bffe15 	stw	r2,-8(fp)
 100a640:	00000b06 	br	100a670 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100a644:	100a6880 	call	100a688 <alt_get_errno>
 100a648:	1007883a 	mov	r3,r2
 100a64c:	00800344 	movi	r2,13
 100a650:	18800015 	stw	r2,0(r3)
 100a654:	00000406 	br	100a668 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100a658:	100a6880 	call	100a688 <alt_get_errno>
 100a65c:	1007883a 	mov	r3,r2
 100a660:	00801444 	movi	r2,81
 100a664:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100a668:	00bfffc4 	movi	r2,-1
 100a66c:	e0bffe15 	stw	r2,-8(fp)
 100a670:	e0bffe17 	ldw	r2,-8(fp)
}
 100a674:	e037883a 	mov	sp,fp
 100a678:	dfc00117 	ldw	ra,4(sp)
 100a67c:	df000017 	ldw	fp,0(sp)
 100a680:	dec00204 	addi	sp,sp,8
 100a684:	f800283a 	ret

0100a688 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a688:	defffd04 	addi	sp,sp,-12
 100a68c:	dfc00215 	stw	ra,8(sp)
 100a690:	df000115 	stw	fp,4(sp)
 100a694:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a698:	00804074 	movhi	r2,257
 100a69c:	10ba8d04 	addi	r2,r2,-5580
 100a6a0:	10800017 	ldw	r2,0(r2)
 100a6a4:	1005003a 	cmpeq	r2,r2,zero
 100a6a8:	1000061e 	bne	r2,zero,100a6c4 <alt_get_errno+0x3c>
 100a6ac:	00804074 	movhi	r2,257
 100a6b0:	10ba8d04 	addi	r2,r2,-5580
 100a6b4:	10800017 	ldw	r2,0(r2)
 100a6b8:	103ee83a 	callr	r2
 100a6bc:	e0bfff15 	stw	r2,-4(fp)
 100a6c0:	00000306 	br	100a6d0 <alt_get_errno+0x48>
 100a6c4:	00804074 	movhi	r2,257
 100a6c8:	10815104 	addi	r2,r2,1348
 100a6cc:	e0bfff15 	stw	r2,-4(fp)
 100a6d0:	e0bfff17 	ldw	r2,-4(fp)
}
 100a6d4:	e037883a 	mov	sp,fp
 100a6d8:	dfc00117 	ldw	ra,4(sp)
 100a6dc:	df000017 	ldw	fp,0(sp)
 100a6e0:	dec00204 	addi	sp,sp,8
 100a6e4:	f800283a 	ret

0100a6e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100a6e8:	defffd04 	addi	sp,sp,-12
 100a6ec:	dfc00215 	stw	ra,8(sp)
 100a6f0:	df000115 	stw	fp,4(sp)
 100a6f4:	df000104 	addi	fp,sp,4
 100a6f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 100a6fc:	100c44c0 	call	100c44c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100a700:	00800044 	movi	r2,1
 100a704:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100a708:	e037883a 	mov	sp,fp
 100a70c:	dfc00117 	ldw	ra,4(sp)
 100a710:	df000017 	ldw	fp,0(sp)
 100a714:	dec00204 	addi	sp,sp,8
 100a718:	f800283a 	ret

0100a71c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100a71c:	defffe04 	addi	sp,sp,-8
 100a720:	dfc00115 	stw	ra,4(sp)
 100a724:	df000015 	stw	fp,0(sp)
 100a728:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 100a72c:	010a1004 	movi	r4,10304
 100a730:	000b883a 	mov	r5,zero
 100a734:	000d883a 	mov	r6,zero
 100a738:	01c0fa04 	movi	r7,1000
 100a73c:	100b2f80 	call	100b2f8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100a740:	01004074 	movhi	r4,257
 100a744:	21365204 	addi	r4,r4,-9912
 100a748:	000b883a 	mov	r5,zero
 100a74c:	01800144 	movi	r6,5
 100a750:	100a9240 	call	100a924 <altera_avalon_jtag_uart_init>
 100a754:	01004074 	movhi	r4,257
 100a758:	21364804 	addi	r4,r4,-9952
 100a75c:	100a7a40 	call	100a7a4 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, audio);
 100a760:	01004074 	movhi	r4,257
 100a764:	213a6004 	addi	r4,r4,-5760
 100a768:	100a7a40 	call	100a7a4 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 100a76c:	01004074 	movhi	r4,257
 100a770:	213a6c04 	addi	r4,r4,-5712
 100a774:	100b4300 	call	100b430 <alt_up_character_lcd_init>
 100a778:	01004074 	movhi	r4,257
 100a77c:	213a6c04 	addi	r4,r4,-5712
 100a780:	100a7a40 	call	100a7a4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SDCARD, sdcard);
 100a784:	01004074 	movhi	r4,257
 100a788:	213a7704 	addi	r4,r4,-5668
 100a78c:	100a7a40 	call	100a7a4 <alt_dev_reg>
}
 100a790:	e037883a 	mov	sp,fp
 100a794:	dfc00117 	ldw	ra,4(sp)
 100a798:	df000017 	ldw	fp,0(sp)
 100a79c:	dec00204 	addi	sp,sp,8
 100a7a0:	f800283a 	ret

0100a7a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100a7a4:	defffd04 	addi	sp,sp,-12
 100a7a8:	dfc00215 	stw	ra,8(sp)
 100a7ac:	df000115 	stw	fp,4(sp)
 100a7b0:	df000104 	addi	fp,sp,4
 100a7b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100a7b8:	e13fff17 	ldw	r4,-4(fp)
 100a7bc:	01404074 	movhi	r5,257
 100a7c0:	297a8a04 	addi	r5,r5,-5592
 100a7c4:	100ba480 	call	100ba48 <alt_dev_llist_insert>
}
 100a7c8:	e037883a 	mov	sp,fp
 100a7cc:	dfc00117 	ldw	ra,4(sp)
 100a7d0:	df000017 	ldw	fp,0(sp)
 100a7d4:	dec00204 	addi	sp,sp,8
 100a7d8:	f800283a 	ret

0100a7dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100a7dc:	defffa04 	addi	sp,sp,-24
 100a7e0:	dfc00515 	stw	ra,20(sp)
 100a7e4:	df000415 	stw	fp,16(sp)
 100a7e8:	df000404 	addi	fp,sp,16
 100a7ec:	e13ffd15 	stw	r4,-12(fp)
 100a7f0:	e17ffe15 	stw	r5,-8(fp)
 100a7f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100a7f8:	e0bffd17 	ldw	r2,-12(fp)
 100a7fc:	10800017 	ldw	r2,0(r2)
 100a800:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100a804:	e0bffc17 	ldw	r2,-16(fp)
 100a808:	11000a04 	addi	r4,r2,40
 100a80c:	e0bffd17 	ldw	r2,-12(fp)
 100a810:	11c00217 	ldw	r7,8(r2)
 100a814:	e17ffe17 	ldw	r5,-8(fp)
 100a818:	e1bfff17 	ldw	r6,-4(fp)
 100a81c:	100ae200 	call	100ae20 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100a820:	e037883a 	mov	sp,fp
 100a824:	dfc00117 	ldw	ra,4(sp)
 100a828:	df000017 	ldw	fp,0(sp)
 100a82c:	dec00204 	addi	sp,sp,8
 100a830:	f800283a 	ret

0100a834 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100a834:	defffa04 	addi	sp,sp,-24
 100a838:	dfc00515 	stw	ra,20(sp)
 100a83c:	df000415 	stw	fp,16(sp)
 100a840:	df000404 	addi	fp,sp,16
 100a844:	e13ffd15 	stw	r4,-12(fp)
 100a848:	e17ffe15 	stw	r5,-8(fp)
 100a84c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100a850:	e0bffd17 	ldw	r2,-12(fp)
 100a854:	10800017 	ldw	r2,0(r2)
 100a858:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100a85c:	e0bffc17 	ldw	r2,-16(fp)
 100a860:	11000a04 	addi	r4,r2,40
 100a864:	e0bffd17 	ldw	r2,-12(fp)
 100a868:	11c00217 	ldw	r7,8(r2)
 100a86c:	e17ffe17 	ldw	r5,-8(fp)
 100a870:	e1bfff17 	ldw	r6,-4(fp)
 100a874:	100b0440 	call	100b044 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100a878:	e037883a 	mov	sp,fp
 100a87c:	dfc00117 	ldw	ra,4(sp)
 100a880:	df000017 	ldw	fp,0(sp)
 100a884:	dec00204 	addi	sp,sp,8
 100a888:	f800283a 	ret

0100a88c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100a88c:	defffc04 	addi	sp,sp,-16
 100a890:	dfc00315 	stw	ra,12(sp)
 100a894:	df000215 	stw	fp,8(sp)
 100a898:	df000204 	addi	fp,sp,8
 100a89c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100a8a0:	e0bfff17 	ldw	r2,-4(fp)
 100a8a4:	10800017 	ldw	r2,0(r2)
 100a8a8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100a8ac:	e0bffe17 	ldw	r2,-8(fp)
 100a8b0:	11000a04 	addi	r4,r2,40
 100a8b4:	e0bfff17 	ldw	r2,-4(fp)
 100a8b8:	11400217 	ldw	r5,8(r2)
 100a8bc:	100acb80 	call	100acb8 <altera_avalon_jtag_uart_close>
}
 100a8c0:	e037883a 	mov	sp,fp
 100a8c4:	dfc00117 	ldw	ra,4(sp)
 100a8c8:	df000017 	ldw	fp,0(sp)
 100a8cc:	dec00204 	addi	sp,sp,8
 100a8d0:	f800283a 	ret

0100a8d4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100a8d4:	defffa04 	addi	sp,sp,-24
 100a8d8:	dfc00515 	stw	ra,20(sp)
 100a8dc:	df000415 	stw	fp,16(sp)
 100a8e0:	df000404 	addi	fp,sp,16
 100a8e4:	e13ffd15 	stw	r4,-12(fp)
 100a8e8:	e17ffe15 	stw	r5,-8(fp)
 100a8ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100a8f0:	e0bffd17 	ldw	r2,-12(fp)
 100a8f4:	10800017 	ldw	r2,0(r2)
 100a8f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100a8fc:	e0bffc17 	ldw	r2,-16(fp)
 100a900:	11000a04 	addi	r4,r2,40
 100a904:	e17ffe17 	ldw	r5,-8(fp)
 100a908:	e1bfff17 	ldw	r6,-4(fp)
 100a90c:	100ad2c0 	call	100ad2c <altera_avalon_jtag_uart_ioctl>
}
 100a910:	e037883a 	mov	sp,fp
 100a914:	dfc00117 	ldw	ra,4(sp)
 100a918:	df000017 	ldw	fp,0(sp)
 100a91c:	dec00204 	addi	sp,sp,8
 100a920:	f800283a 	ret

0100a924 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100a924:	defffb04 	addi	sp,sp,-20
 100a928:	dfc00415 	stw	ra,16(sp)
 100a92c:	df000315 	stw	fp,12(sp)
 100a930:	df000304 	addi	fp,sp,12
 100a934:	e13ffd15 	stw	r4,-12(fp)
 100a938:	e17ffe15 	stw	r5,-8(fp)
 100a93c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100a940:	e0fffd17 	ldw	r3,-12(fp)
 100a944:	00800044 	movi	r2,1
 100a948:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100a94c:	e0bffd17 	ldw	r2,-12(fp)
 100a950:	10800017 	ldw	r2,0(r2)
 100a954:	11000104 	addi	r4,r2,4
 100a958:	e0bffd17 	ldw	r2,-12(fp)
 100a95c:	10800817 	ldw	r2,32(r2)
 100a960:	1007883a 	mov	r3,r2
 100a964:	2005883a 	mov	r2,r4
 100a968:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 100a96c:	e13fff17 	ldw	r4,-4(fp)
 100a970:	e17ffd17 	ldw	r5,-12(fp)
 100a974:	01804074 	movhi	r6,257
 100a978:	31aa7704 	addi	r6,r6,-22052
 100a97c:	100be240 	call	100be24 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100a980:	e0bffd17 	ldw	r2,-12(fp)
 100a984:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100a988:	e0bffd17 	ldw	r2,-12(fp)
 100a98c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100a990:	00804074 	movhi	r2,257
 100a994:	10815604 	addi	r2,r2,1368
 100a998:	10800017 	ldw	r2,0(r2)
 100a99c:	100b883a 	mov	r5,r2
 100a9a0:	01804074 	movhi	r6,257
 100a9a4:	31ab0204 	addi	r6,r6,-21496
 100a9a8:	e1fffd17 	ldw	r7,-12(fp)
 100a9ac:	100b8b00 	call	100b8b0 <alt_alarm_start>
 100a9b0:	1004403a 	cmpge	r2,r2,zero
 100a9b4:	1000041e 	bne	r2,zero,100a9c8 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100a9b8:	e0fffd17 	ldw	r3,-12(fp)
 100a9bc:	00a00034 	movhi	r2,32768
 100a9c0:	10bfffc4 	addi	r2,r2,-1
 100a9c4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100a9c8:	e037883a 	mov	sp,fp
 100a9cc:	dfc00117 	ldw	ra,4(sp)
 100a9d0:	df000017 	ldw	fp,0(sp)
 100a9d4:	dec00204 	addi	sp,sp,8
 100a9d8:	f800283a 	ret

0100a9dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100a9dc:	defff704 	addi	sp,sp,-36
 100a9e0:	df000815 	stw	fp,32(sp)
 100a9e4:	df000804 	addi	fp,sp,32
 100a9e8:	e13ffe15 	stw	r4,-8(fp)
 100a9ec:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100a9f0:	e0bffe17 	ldw	r2,-8(fp)
 100a9f4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 100a9f8:	e0bffd17 	ldw	r2,-12(fp)
 100a9fc:	10800017 	ldw	r2,0(r2)
 100aa00:	e0bffc15 	stw	r2,-16(fp)
 100aa04:	00000006 	br	100aa08 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100aa08:	e0bffc17 	ldw	r2,-16(fp)
 100aa0c:	10800104 	addi	r2,r2,4
 100aa10:	10800037 	ldwio	r2,0(r2)
 100aa14:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100aa18:	e0bffb17 	ldw	r2,-20(fp)
 100aa1c:	1080c00c 	andi	r2,r2,768
 100aa20:	1005003a 	cmpeq	r2,r2,zero
 100aa24:	1000741e 	bne	r2,zero,100abf8 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100aa28:	e0bffb17 	ldw	r2,-20(fp)
 100aa2c:	1080400c 	andi	r2,r2,256
 100aa30:	1005003a 	cmpeq	r2,r2,zero
 100aa34:	1000351e 	bne	r2,zero,100ab0c <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100aa38:	00800074 	movhi	r2,1
 100aa3c:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100aa40:	e0bffd17 	ldw	r2,-12(fp)
 100aa44:	10800a17 	ldw	r2,40(r2)
 100aa48:	10800044 	addi	r2,r2,1
 100aa4c:	1081ffcc 	andi	r2,r2,2047
 100aa50:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 100aa54:	e0bffd17 	ldw	r2,-12(fp)
 100aa58:	10c00b17 	ldw	r3,44(r2)
 100aa5c:	e0bff917 	ldw	r2,-28(fp)
 100aa60:	18801626 	beq	r3,r2,100aabc <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100aa64:	e0bffc17 	ldw	r2,-16(fp)
 100aa68:	10800037 	ldwio	r2,0(r2)
 100aa6c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100aa70:	e0bffa17 	ldw	r2,-24(fp)
 100aa74:	10a0000c 	andi	r2,r2,32768
 100aa78:	1005003a 	cmpeq	r2,r2,zero
 100aa7c:	10000f1e 	bne	r2,zero,100aabc <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100aa80:	e0bffd17 	ldw	r2,-12(fp)
 100aa84:	10c00a17 	ldw	r3,40(r2)
 100aa88:	e0bffa17 	ldw	r2,-24(fp)
 100aa8c:	1009883a 	mov	r4,r2
 100aa90:	e0bffd17 	ldw	r2,-12(fp)
 100aa94:	1885883a 	add	r2,r3,r2
 100aa98:	10800e04 	addi	r2,r2,56
 100aa9c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100aaa0:	e0bffd17 	ldw	r2,-12(fp)
 100aaa4:	10800a17 	ldw	r2,40(r2)
 100aaa8:	10800044 	addi	r2,r2,1
 100aaac:	10c1ffcc 	andi	r3,r2,2047
 100aab0:	e0bffd17 	ldw	r2,-12(fp)
 100aab4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100aab8:	003fe106 	br	100aa40 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100aabc:	e0bffa17 	ldw	r2,-24(fp)
 100aac0:	10bfffec 	andhi	r2,r2,65535
 100aac4:	1005003a 	cmpeq	r2,r2,zero
 100aac8:	1000101e 	bne	r2,zero,100ab0c <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100aacc:	e0bffd17 	ldw	r2,-12(fp)
 100aad0:	10c00817 	ldw	r3,32(r2)
 100aad4:	00bfff84 	movi	r2,-2
 100aad8:	1886703a 	and	r3,r3,r2
 100aadc:	e0bffd17 	ldw	r2,-12(fp)
 100aae0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100aae4:	e0bffc17 	ldw	r2,-16(fp)
 100aae8:	11000104 	addi	r4,r2,4
 100aaec:	e0bffd17 	ldw	r2,-12(fp)
 100aaf0:	10800817 	ldw	r2,32(r2)
 100aaf4:	1007883a 	mov	r3,r2
 100aaf8:	2005883a 	mov	r2,r4
 100aafc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100ab00:	e0bffc17 	ldw	r2,-16(fp)
 100ab04:	10800104 	addi	r2,r2,4
 100ab08:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100ab0c:	e0bffb17 	ldw	r2,-20(fp)
 100ab10:	1080800c 	andi	r2,r2,512
 100ab14:	1005003a 	cmpeq	r2,r2,zero
 100ab18:	103fbb1e 	bne	r2,zero,100aa08 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100ab1c:	e0bffb17 	ldw	r2,-20(fp)
 100ab20:	10bfffec 	andhi	r2,r2,65535
 100ab24:	1004d43a 	srli	r2,r2,16
 100ab28:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100ab2c:	00001506 	br	100ab84 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100ab30:	e13ffc17 	ldw	r4,-16(fp)
 100ab34:	e0bffd17 	ldw	r2,-12(fp)
 100ab38:	10c00d17 	ldw	r3,52(r2)
 100ab3c:	e0bffd17 	ldw	r2,-12(fp)
 100ab40:	1885883a 	add	r2,r3,r2
 100ab44:	10820e04 	addi	r2,r2,2104
 100ab48:	10800003 	ldbu	r2,0(r2)
 100ab4c:	10c03fcc 	andi	r3,r2,255
 100ab50:	18c0201c 	xori	r3,r3,128
 100ab54:	18ffe004 	addi	r3,r3,-128
 100ab58:	2005883a 	mov	r2,r4
 100ab5c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100ab60:	e0bffd17 	ldw	r2,-12(fp)
 100ab64:	10800d17 	ldw	r2,52(r2)
 100ab68:	10800044 	addi	r2,r2,1
 100ab6c:	10c1ffcc 	andi	r3,r2,2047
 100ab70:	e0bffd17 	ldw	r2,-12(fp)
 100ab74:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100ab78:	e0bff817 	ldw	r2,-32(fp)
 100ab7c:	10bfffc4 	addi	r2,r2,-1
 100ab80:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100ab84:	e0bff817 	ldw	r2,-32(fp)
 100ab88:	1005003a 	cmpeq	r2,r2,zero
 100ab8c:	1000051e 	bne	r2,zero,100aba4 <altera_avalon_jtag_uart_irq+0x1c8>
 100ab90:	e0bffd17 	ldw	r2,-12(fp)
 100ab94:	10c00d17 	ldw	r3,52(r2)
 100ab98:	e0bffd17 	ldw	r2,-12(fp)
 100ab9c:	10800c17 	ldw	r2,48(r2)
 100aba0:	18bfe31e 	bne	r3,r2,100ab30 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100aba4:	e0bff817 	ldw	r2,-32(fp)
 100aba8:	1005003a 	cmpeq	r2,r2,zero
 100abac:	103f961e 	bne	r2,zero,100aa08 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100abb0:	e0bffd17 	ldw	r2,-12(fp)
 100abb4:	10c00817 	ldw	r3,32(r2)
 100abb8:	00bfff44 	movi	r2,-3
 100abbc:	1886703a 	and	r3,r3,r2
 100abc0:	e0bffd17 	ldw	r2,-12(fp)
 100abc4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100abc8:	e0bffd17 	ldw	r2,-12(fp)
 100abcc:	10800017 	ldw	r2,0(r2)
 100abd0:	11000104 	addi	r4,r2,4
 100abd4:	e0bffd17 	ldw	r2,-12(fp)
 100abd8:	10800817 	ldw	r2,32(r2)
 100abdc:	1007883a 	mov	r3,r2
 100abe0:	2005883a 	mov	r2,r4
 100abe4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100abe8:	e0bffc17 	ldw	r2,-16(fp)
 100abec:	10800104 	addi	r2,r2,4
 100abf0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100abf4:	003f8406 	br	100aa08 <altera_avalon_jtag_uart_irq+0x2c>
}
 100abf8:	e037883a 	mov	sp,fp
 100abfc:	df000017 	ldw	fp,0(sp)
 100ac00:	dec00104 	addi	sp,sp,4
 100ac04:	f800283a 	ret

0100ac08 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100ac08:	defffc04 	addi	sp,sp,-16
 100ac0c:	df000315 	stw	fp,12(sp)
 100ac10:	df000304 	addi	fp,sp,12
 100ac14:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100ac18:	e0bfff17 	ldw	r2,-4(fp)
 100ac1c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100ac20:	e0bffe17 	ldw	r2,-8(fp)
 100ac24:	10800017 	ldw	r2,0(r2)
 100ac28:	10800104 	addi	r2,r2,4
 100ac2c:	10800037 	ldwio	r2,0(r2)
 100ac30:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100ac34:	e0bffd17 	ldw	r2,-12(fp)
 100ac38:	1081000c 	andi	r2,r2,1024
 100ac3c:	1005003a 	cmpeq	r2,r2,zero
 100ac40:	10000c1e 	bne	r2,zero,100ac74 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100ac44:	e0bffe17 	ldw	r2,-8(fp)
 100ac48:	10800017 	ldw	r2,0(r2)
 100ac4c:	11000104 	addi	r4,r2,4
 100ac50:	e0bffe17 	ldw	r2,-8(fp)
 100ac54:	10800817 	ldw	r2,32(r2)
 100ac58:	10810014 	ori	r2,r2,1024
 100ac5c:	1007883a 	mov	r3,r2
 100ac60:	2005883a 	mov	r2,r4
 100ac64:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 100ac68:	e0bffe17 	ldw	r2,-8(fp)
 100ac6c:	10000915 	stw	zero,36(r2)
 100ac70:	00000a06 	br	100ac9c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100ac74:	e0bffe17 	ldw	r2,-8(fp)
 100ac78:	10c00917 	ldw	r3,36(r2)
 100ac7c:	00a00034 	movhi	r2,32768
 100ac80:	10bfff04 	addi	r2,r2,-4
 100ac84:	10c00536 	bltu	r2,r3,100ac9c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 100ac88:	e0bffe17 	ldw	r2,-8(fp)
 100ac8c:	10800917 	ldw	r2,36(r2)
 100ac90:	10c00044 	addi	r3,r2,1
 100ac94:	e0bffe17 	ldw	r2,-8(fp)
 100ac98:	10c00915 	stw	r3,36(r2)
 100ac9c:	00804074 	movhi	r2,257
 100aca0:	10815604 	addi	r2,r2,1368
 100aca4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100aca8:	e037883a 	mov	sp,fp
 100acac:	df000017 	ldw	fp,0(sp)
 100acb0:	dec00104 	addi	sp,sp,4
 100acb4:	f800283a 	ret

0100acb8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100acb8:	defffc04 	addi	sp,sp,-16
 100acbc:	df000315 	stw	fp,12(sp)
 100acc0:	df000304 	addi	fp,sp,12
 100acc4:	e13ffd15 	stw	r4,-12(fp)
 100acc8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100accc:	00000706 	br	100acec <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 100acd0:	e0bffe17 	ldw	r2,-8(fp)
 100acd4:	1090000c 	andi	r2,r2,16384
 100acd8:	1005003a 	cmpeq	r2,r2,zero
 100acdc:	1000031e 	bne	r2,zero,100acec <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 100ace0:	00bffd44 	movi	r2,-11
 100ace4:	e0bfff15 	stw	r2,-4(fp)
 100ace8:	00000b06 	br	100ad18 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100acec:	e0bffd17 	ldw	r2,-12(fp)
 100acf0:	10c00d17 	ldw	r3,52(r2)
 100acf4:	e0bffd17 	ldw	r2,-12(fp)
 100acf8:	10800c17 	ldw	r2,48(r2)
 100acfc:	18800526 	beq	r3,r2,100ad14 <altera_avalon_jtag_uart_close+0x5c>
 100ad00:	e0bffd17 	ldw	r2,-12(fp)
 100ad04:	10c00917 	ldw	r3,36(r2)
 100ad08:	e0bffd17 	ldw	r2,-12(fp)
 100ad0c:	10800117 	ldw	r2,4(r2)
 100ad10:	18bfef36 	bltu	r3,r2,100acd0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100ad14:	e03fff15 	stw	zero,-4(fp)
 100ad18:	e0bfff17 	ldw	r2,-4(fp)
}
 100ad1c:	e037883a 	mov	sp,fp
 100ad20:	df000017 	ldw	fp,0(sp)
 100ad24:	dec00104 	addi	sp,sp,4
 100ad28:	f800283a 	ret

0100ad2c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100ad2c:	defff804 	addi	sp,sp,-32
 100ad30:	df000715 	stw	fp,28(sp)
 100ad34:	df000704 	addi	fp,sp,28
 100ad38:	e13ffb15 	stw	r4,-20(fp)
 100ad3c:	e17ffc15 	stw	r5,-16(fp)
 100ad40:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 100ad44:	00bff9c4 	movi	r2,-25
 100ad48:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 100ad4c:	e0bffc17 	ldw	r2,-16(fp)
 100ad50:	e0bfff15 	stw	r2,-4(fp)
 100ad54:	e0ffff17 	ldw	r3,-4(fp)
 100ad58:	189a8060 	cmpeqi	r2,r3,27137
 100ad5c:	1000041e 	bne	r2,zero,100ad70 <altera_avalon_jtag_uart_ioctl+0x44>
 100ad60:	e0ffff17 	ldw	r3,-4(fp)
 100ad64:	189a80a0 	cmpeqi	r2,r3,27138
 100ad68:	10001b1e 	bne	r2,zero,100add8 <altera_avalon_jtag_uart_ioctl+0xac>
 100ad6c:	00002706 	br	100ae0c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100ad70:	e0bffb17 	ldw	r2,-20(fp)
 100ad74:	10c00117 	ldw	r3,4(r2)
 100ad78:	00a00034 	movhi	r2,32768
 100ad7c:	10bfffc4 	addi	r2,r2,-1
 100ad80:	18802226 	beq	r3,r2,100ae0c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 100ad84:	e0bffd17 	ldw	r2,-12(fp)
 100ad88:	10800017 	ldw	r2,0(r2)
 100ad8c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100ad90:	e0bff917 	ldw	r2,-28(fp)
 100ad94:	10800090 	cmplti	r2,r2,2
 100ad98:	1000071e 	bne	r2,zero,100adb8 <altera_avalon_jtag_uart_ioctl+0x8c>
 100ad9c:	e0fff917 	ldw	r3,-28(fp)
 100ada0:	00a00034 	movhi	r2,32768
 100ada4:	10bfffc4 	addi	r2,r2,-1
 100ada8:	18800326 	beq	r3,r2,100adb8 <altera_avalon_jtag_uart_ioctl+0x8c>
 100adac:	e0bff917 	ldw	r2,-28(fp)
 100adb0:	e0bffe15 	stw	r2,-8(fp)
 100adb4:	00000306 	br	100adc4 <altera_avalon_jtag_uart_ioctl+0x98>
 100adb8:	00e00034 	movhi	r3,32768
 100adbc:	18ffff84 	addi	r3,r3,-2
 100adc0:	e0fffe15 	stw	r3,-8(fp)
 100adc4:	e0bffb17 	ldw	r2,-20(fp)
 100adc8:	e0fffe17 	ldw	r3,-8(fp)
 100adcc:	10c00115 	stw	r3,4(r2)
      rc = 0;
 100add0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 100add4:	00000d06 	br	100ae0c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100add8:	e0bffb17 	ldw	r2,-20(fp)
 100addc:	10c00117 	ldw	r3,4(r2)
 100ade0:	00a00034 	movhi	r2,32768
 100ade4:	10bfffc4 	addi	r2,r2,-1
 100ade8:	18800826 	beq	r3,r2,100ae0c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100adec:	e13ffd17 	ldw	r4,-12(fp)
 100adf0:	e0bffb17 	ldw	r2,-20(fp)
 100adf4:	10c00917 	ldw	r3,36(r2)
 100adf8:	e0bffb17 	ldw	r2,-20(fp)
 100adfc:	10800117 	ldw	r2,4(r2)
 100ae00:	1885803a 	cmpltu	r2,r3,r2
 100ae04:	20800015 	stw	r2,0(r4)
      rc = 0;
 100ae08:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 100ae0c:	e0bffa17 	ldw	r2,-24(fp)
}
 100ae10:	e037883a 	mov	sp,fp
 100ae14:	df000017 	ldw	fp,0(sp)
 100ae18:	dec00104 	addi	sp,sp,4
 100ae1c:	f800283a 	ret

0100ae20 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100ae20:	defff204 	addi	sp,sp,-56
 100ae24:	dfc00d15 	stw	ra,52(sp)
 100ae28:	df000c15 	stw	fp,48(sp)
 100ae2c:	df000c04 	addi	fp,sp,48
 100ae30:	e13ffb15 	stw	r4,-20(fp)
 100ae34:	e17ffc15 	stw	r5,-16(fp)
 100ae38:	e1bffd15 	stw	r6,-12(fp)
 100ae3c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100ae40:	e0bffc17 	ldw	r2,-16(fp)
 100ae44:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100ae48:	00004806 	br	100af6c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100ae4c:	e0bffb17 	ldw	r2,-20(fp)
 100ae50:	10800a17 	ldw	r2,40(r2)
 100ae54:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100ae58:	e0bffb17 	ldw	r2,-20(fp)
 100ae5c:	10800b17 	ldw	r2,44(r2)
 100ae60:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 100ae64:	e0fff717 	ldw	r3,-36(fp)
 100ae68:	e0bff617 	ldw	r2,-40(fp)
 100ae6c:	18800536 	bltu	r3,r2,100ae84 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100ae70:	e0bff717 	ldw	r2,-36(fp)
 100ae74:	e0fff617 	ldw	r3,-40(fp)
 100ae78:	10c5c83a 	sub	r2,r2,r3
 100ae7c:	e0bff815 	stw	r2,-32(fp)
 100ae80:	00000406 	br	100ae94 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100ae84:	00820004 	movi	r2,2048
 100ae88:	e0fff617 	ldw	r3,-40(fp)
 100ae8c:	10c5c83a 	sub	r2,r2,r3
 100ae90:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100ae94:	e0bff817 	ldw	r2,-32(fp)
 100ae98:	1005003a 	cmpeq	r2,r2,zero
 100ae9c:	10001f1e 	bne	r2,zero,100af1c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 100aea0:	e0fffd17 	ldw	r3,-12(fp)
 100aea4:	e0bff817 	ldw	r2,-32(fp)
 100aea8:	1880022e 	bgeu	r3,r2,100aeb4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 100aeac:	e0bffd17 	ldw	r2,-12(fp)
 100aeb0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100aeb4:	e0bffb17 	ldw	r2,-20(fp)
 100aeb8:	10c00e04 	addi	r3,r2,56
 100aebc:	e0bff617 	ldw	r2,-40(fp)
 100aec0:	1887883a 	add	r3,r3,r2
 100aec4:	e0bffa17 	ldw	r2,-24(fp)
 100aec8:	1009883a 	mov	r4,r2
 100aecc:	180b883a 	mov	r5,r3
 100aed0:	e1bff817 	ldw	r6,-32(fp)
 100aed4:	100585c0 	call	100585c <memcpy>
      ptr   += n;
 100aed8:	e0fff817 	ldw	r3,-32(fp)
 100aedc:	e0bffa17 	ldw	r2,-24(fp)
 100aee0:	10c5883a 	add	r2,r2,r3
 100aee4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 100aee8:	e0fffd17 	ldw	r3,-12(fp)
 100aeec:	e0bff817 	ldw	r2,-32(fp)
 100aef0:	1885c83a 	sub	r2,r3,r2
 100aef4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100aef8:	e0fff617 	ldw	r3,-40(fp)
 100aefc:	e0bff817 	ldw	r2,-32(fp)
 100af00:	1885883a 	add	r2,r3,r2
 100af04:	10c1ffcc 	andi	r3,r2,2047
 100af08:	e0bffb17 	ldw	r2,-20(fp)
 100af0c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100af10:	e0bffd17 	ldw	r2,-12(fp)
 100af14:	10800048 	cmpgei	r2,r2,1
 100af18:	103fcc1e 	bne	r2,zero,100ae4c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 100af1c:	e0fffa17 	ldw	r3,-24(fp)
 100af20:	e0bffc17 	ldw	r2,-16(fp)
 100af24:	1880141e 	bne	r3,r2,100af78 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100af28:	e0bffe17 	ldw	r2,-8(fp)
 100af2c:	1090000c 	andi	r2,r2,16384
 100af30:	1004c03a 	cmpne	r2,r2,zero
 100af34:	1000101e 	bne	r2,zero,100af78 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100af38:	e0bffb17 	ldw	r2,-20(fp)
 100af3c:	10c00a17 	ldw	r3,40(r2)
 100af40:	e0bff717 	ldw	r2,-36(fp)
 100af44:	1880051e 	bne	r3,r2,100af5c <altera_avalon_jtag_uart_read+0x13c>
 100af48:	e0bffb17 	ldw	r2,-20(fp)
 100af4c:	10c00917 	ldw	r3,36(r2)
 100af50:	e0bffb17 	ldw	r2,-20(fp)
 100af54:	10800117 	ldw	r2,4(r2)
 100af58:	18bff736 	bltu	r3,r2,100af38 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100af5c:	e0bffb17 	ldw	r2,-20(fp)
 100af60:	10c00a17 	ldw	r3,40(r2)
 100af64:	e0bff717 	ldw	r2,-36(fp)
 100af68:	18800326 	beq	r3,r2,100af78 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100af6c:	e0bffd17 	ldw	r2,-12(fp)
 100af70:	10800048 	cmpgei	r2,r2,1
 100af74:	103fb51e 	bne	r2,zero,100ae4c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100af78:	e0fffa17 	ldw	r3,-24(fp)
 100af7c:	e0bffc17 	ldw	r2,-16(fp)
 100af80:	18801926 	beq	r3,r2,100afe8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100af84:	0005303a 	rdctl	r2,status
 100af88:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100af8c:	e0fff517 	ldw	r3,-44(fp)
 100af90:	00bfff84 	movi	r2,-2
 100af94:	1884703a 	and	r2,r3,r2
 100af98:	1001703a 	wrctl	status,r2
  
  return context;
 100af9c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100afa0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100afa4:	e0bffb17 	ldw	r2,-20(fp)
 100afa8:	10800817 	ldw	r2,32(r2)
 100afac:	10c00054 	ori	r3,r2,1
 100afb0:	e0bffb17 	ldw	r2,-20(fp)
 100afb4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100afb8:	e0bffb17 	ldw	r2,-20(fp)
 100afbc:	10800017 	ldw	r2,0(r2)
 100afc0:	11000104 	addi	r4,r2,4
 100afc4:	e0bffb17 	ldw	r2,-20(fp)
 100afc8:	10800817 	ldw	r2,32(r2)
 100afcc:	1007883a 	mov	r3,r2
 100afd0:	2005883a 	mov	r2,r4
 100afd4:	10c00035 	stwio	r3,0(r2)
 100afd8:	e0bff917 	ldw	r2,-28(fp)
 100afdc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100afe0:	e0bff417 	ldw	r2,-48(fp)
 100afe4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100afe8:	e0fffa17 	ldw	r3,-24(fp)
 100afec:	e0bffc17 	ldw	r2,-16(fp)
 100aff0:	18800526 	beq	r3,r2,100b008 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 100aff4:	e0fffa17 	ldw	r3,-24(fp)
 100aff8:	e0bffc17 	ldw	r2,-16(fp)
 100affc:	1887c83a 	sub	r3,r3,r2
 100b000:	e0ffff15 	stw	r3,-4(fp)
 100b004:	00000906 	br	100b02c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 100b008:	e0bffe17 	ldw	r2,-8(fp)
 100b00c:	1090000c 	andi	r2,r2,16384
 100b010:	1005003a 	cmpeq	r2,r2,zero
 100b014:	1000031e 	bne	r2,zero,100b024 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100b018:	00bffd44 	movi	r2,-11
 100b01c:	e0bfff15 	stw	r2,-4(fp)
 100b020:	00000206 	br	100b02c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 100b024:	00bffec4 	movi	r2,-5
 100b028:	e0bfff15 	stw	r2,-4(fp)
 100b02c:	e0bfff17 	ldw	r2,-4(fp)
}
 100b030:	e037883a 	mov	sp,fp
 100b034:	dfc00117 	ldw	ra,4(sp)
 100b038:	df000017 	ldw	fp,0(sp)
 100b03c:	dec00204 	addi	sp,sp,8
 100b040:	f800283a 	ret

0100b044 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100b044:	defff204 	addi	sp,sp,-56
 100b048:	dfc00d15 	stw	ra,52(sp)
 100b04c:	df000c15 	stw	fp,48(sp)
 100b050:	df000c04 	addi	fp,sp,48
 100b054:	e13ffb15 	stw	r4,-20(fp)
 100b058:	e17ffc15 	stw	r5,-16(fp)
 100b05c:	e1bffd15 	stw	r6,-12(fp)
 100b060:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100b064:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100b068:	e0bffc17 	ldw	r2,-16(fp)
 100b06c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100b070:	00003a06 	br	100b15c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100b074:	e0bffb17 	ldw	r2,-20(fp)
 100b078:	10800c17 	ldw	r2,48(r2)
 100b07c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 100b080:	e0bffb17 	ldw	r2,-20(fp)
 100b084:	10800d17 	ldw	r2,52(r2)
 100b088:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 100b08c:	e0fffa17 	ldw	r3,-24(fp)
 100b090:	e0bff917 	ldw	r2,-28(fp)
 100b094:	1880062e 	bgeu	r3,r2,100b0b0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100b098:	e0fff917 	ldw	r3,-28(fp)
 100b09c:	e0bffa17 	ldw	r2,-24(fp)
 100b0a0:	1885c83a 	sub	r2,r3,r2
 100b0a4:	10bfffc4 	addi	r2,r2,-1
 100b0a8:	e0bff815 	stw	r2,-32(fp)
 100b0ac:	00000c06 	br	100b0e0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 100b0b0:	e0bff917 	ldw	r2,-28(fp)
 100b0b4:	1005003a 	cmpeq	r2,r2,zero
 100b0b8:	1000051e 	bne	r2,zero,100b0d0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100b0bc:	00820004 	movi	r2,2048
 100b0c0:	e0fffa17 	ldw	r3,-24(fp)
 100b0c4:	10c5c83a 	sub	r2,r2,r3
 100b0c8:	e0bff815 	stw	r2,-32(fp)
 100b0cc:	00000406 	br	100b0e0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100b0d0:	0081ffc4 	movi	r2,2047
 100b0d4:	e0fffa17 	ldw	r3,-24(fp)
 100b0d8:	10c5c83a 	sub	r2,r2,r3
 100b0dc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100b0e0:	e0bff817 	ldw	r2,-32(fp)
 100b0e4:	1005003a 	cmpeq	r2,r2,zero
 100b0e8:	10001f1e 	bne	r2,zero,100b168 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 100b0ec:	e0fffd17 	ldw	r3,-12(fp)
 100b0f0:	e0bff817 	ldw	r2,-32(fp)
 100b0f4:	1880022e 	bgeu	r3,r2,100b100 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 100b0f8:	e0bffd17 	ldw	r2,-12(fp)
 100b0fc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100b100:	e0bffb17 	ldw	r2,-20(fp)
 100b104:	10c20e04 	addi	r3,r2,2104
 100b108:	e0bffa17 	ldw	r2,-24(fp)
 100b10c:	1885883a 	add	r2,r3,r2
 100b110:	e0fffc17 	ldw	r3,-16(fp)
 100b114:	1009883a 	mov	r4,r2
 100b118:	180b883a 	mov	r5,r3
 100b11c:	e1bff817 	ldw	r6,-32(fp)
 100b120:	100585c0 	call	100585c <memcpy>
      ptr   += n;
 100b124:	e0fff817 	ldw	r3,-32(fp)
 100b128:	e0bffc17 	ldw	r2,-16(fp)
 100b12c:	10c5883a 	add	r2,r2,r3
 100b130:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 100b134:	e0fffd17 	ldw	r3,-12(fp)
 100b138:	e0bff817 	ldw	r2,-32(fp)
 100b13c:	1885c83a 	sub	r2,r3,r2
 100b140:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100b144:	e0fffa17 	ldw	r3,-24(fp)
 100b148:	e0bff817 	ldw	r2,-32(fp)
 100b14c:	1885883a 	add	r2,r3,r2
 100b150:	10c1ffcc 	andi	r3,r2,2047
 100b154:	e0bffb17 	ldw	r2,-20(fp)
 100b158:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100b15c:	e0bffd17 	ldw	r2,-12(fp)
 100b160:	10800048 	cmpgei	r2,r2,1
 100b164:	103fc31e 	bne	r2,zero,100b074 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b168:	0005303a 	rdctl	r2,status
 100b16c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b170:	e0fff517 	ldw	r3,-44(fp)
 100b174:	00bfff84 	movi	r2,-2
 100b178:	1884703a 	and	r2,r3,r2
 100b17c:	1001703a 	wrctl	status,r2
  
  return context;
 100b180:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100b184:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100b188:	e0bffb17 	ldw	r2,-20(fp)
 100b18c:	10800817 	ldw	r2,32(r2)
 100b190:	10c00094 	ori	r3,r2,2
 100b194:	e0bffb17 	ldw	r2,-20(fp)
 100b198:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100b19c:	e0bffb17 	ldw	r2,-20(fp)
 100b1a0:	10800017 	ldw	r2,0(r2)
 100b1a4:	11000104 	addi	r4,r2,4
 100b1a8:	e0bffb17 	ldw	r2,-20(fp)
 100b1ac:	10800817 	ldw	r2,32(r2)
 100b1b0:	1007883a 	mov	r3,r2
 100b1b4:	2005883a 	mov	r2,r4
 100b1b8:	10c00035 	stwio	r3,0(r2)
 100b1bc:	e0bff717 	ldw	r2,-36(fp)
 100b1c0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b1c4:	e0bff417 	ldw	r2,-48(fp)
 100b1c8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100b1cc:	e0bffd17 	ldw	r2,-12(fp)
 100b1d0:	10800050 	cmplti	r2,r2,1
 100b1d4:	1000111e 	bne	r2,zero,100b21c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 100b1d8:	e0bffe17 	ldw	r2,-8(fp)
 100b1dc:	1090000c 	andi	r2,r2,16384
 100b1e0:	1004c03a 	cmpne	r2,r2,zero
 100b1e4:	1000101e 	bne	r2,zero,100b228 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100b1e8:	e0bffb17 	ldw	r2,-20(fp)
 100b1ec:	10c00d17 	ldw	r3,52(r2)
 100b1f0:	e0bff917 	ldw	r2,-28(fp)
 100b1f4:	1880051e 	bne	r3,r2,100b20c <altera_avalon_jtag_uart_write+0x1c8>
 100b1f8:	e0bffb17 	ldw	r2,-20(fp)
 100b1fc:	10c00917 	ldw	r3,36(r2)
 100b200:	e0bffb17 	ldw	r2,-20(fp)
 100b204:	10800117 	ldw	r2,4(r2)
 100b208:	18bff736 	bltu	r3,r2,100b1e8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100b20c:	e0bffb17 	ldw	r2,-20(fp)
 100b210:	10c00d17 	ldw	r3,52(r2)
 100b214:	e0bff917 	ldw	r2,-28(fp)
 100b218:	18800326 	beq	r3,r2,100b228 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 100b21c:	e0bffd17 	ldw	r2,-12(fp)
 100b220:	10800048 	cmpgei	r2,r2,1
 100b224:	103fcd1e 	bne	r2,zero,100b15c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100b228:	e0fffc17 	ldw	r3,-16(fp)
 100b22c:	e0bff617 	ldw	r2,-40(fp)
 100b230:	18800526 	beq	r3,r2,100b248 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 100b234:	e0fffc17 	ldw	r3,-16(fp)
 100b238:	e0bff617 	ldw	r2,-40(fp)
 100b23c:	1887c83a 	sub	r3,r3,r2
 100b240:	e0ffff15 	stw	r3,-4(fp)
 100b244:	00000906 	br	100b26c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 100b248:	e0bffe17 	ldw	r2,-8(fp)
 100b24c:	1090000c 	andi	r2,r2,16384
 100b250:	1005003a 	cmpeq	r2,r2,zero
 100b254:	1000031e 	bne	r2,zero,100b264 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 100b258:	00bffd44 	movi	r2,-11
 100b25c:	e0bfff15 	stw	r2,-4(fp)
 100b260:	00000206 	br	100b26c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 100b264:	00bffec4 	movi	r2,-5
 100b268:	e0bfff15 	stw	r2,-4(fp)
 100b26c:	e0bfff17 	ldw	r2,-4(fp)
}
 100b270:	e037883a 	mov	sp,fp
 100b274:	dfc00117 	ldw	ra,4(sp)
 100b278:	df000017 	ldw	fp,0(sp)
 100b27c:	dec00204 	addi	sp,sp,8
 100b280:	f800283a 	ret

0100b284 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 100b284:	defff904 	addi	sp,sp,-28
 100b288:	dfc00615 	stw	ra,24(sp)
 100b28c:	df000515 	stw	fp,20(sp)
 100b290:	df000504 	addi	fp,sp,20
 100b294:	e13ffe15 	stw	r4,-8(fp)
 100b298:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 100b29c:	e0bffe17 	ldw	r2,-8(fp)
 100b2a0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 100b2a4:	e0bffe17 	ldw	r2,-8(fp)
 100b2a8:	10800104 	addi	r2,r2,4
 100b2ac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b2b0:	0005303a 	rdctl	r2,status
 100b2b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b2b8:	e0fffc17 	ldw	r3,-16(fp)
 100b2bc:	00bfff84 	movi	r2,-2
 100b2c0:	1884703a 	and	r2,r3,r2
 100b2c4:	1001703a 	wrctl	status,r2
  
  return context;
 100b2c8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 100b2cc:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 100b2d0:	100c3400 	call	100c340 <alt_tick>
 100b2d4:	e0bffd17 	ldw	r2,-12(fp)
 100b2d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b2dc:	e0bffb17 	ldw	r2,-20(fp)
 100b2e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 100b2e4:	e037883a 	mov	sp,fp
 100b2e8:	dfc00117 	ldw	ra,4(sp)
 100b2ec:	df000017 	ldw	fp,0(sp)
 100b2f0:	dec00204 	addi	sp,sp,8
 100b2f4:	f800283a 	ret

0100b2f8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 100b2f8:	defff904 	addi	sp,sp,-28
 100b2fc:	dfc00615 	stw	ra,24(sp)
 100b300:	df000515 	stw	fp,20(sp)
 100b304:	df000504 	addi	fp,sp,20
 100b308:	e13ffc15 	stw	r4,-16(fp)
 100b30c:	e17ffd15 	stw	r5,-12(fp)
 100b310:	e1bffe15 	stw	r6,-8(fp)
 100b314:	e1ffff15 	stw	r7,-4(fp)
 100b318:	e0bfff17 	ldw	r2,-4(fp)
 100b31c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 100b320:	00804074 	movhi	r2,257
 100b324:	10815604 	addi	r2,r2,1368
 100b328:	10800017 	ldw	r2,0(r2)
 100b32c:	1004c03a 	cmpne	r2,r2,zero
 100b330:	1000041e 	bne	r2,zero,100b344 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 100b334:	00c04074 	movhi	r3,257
 100b338:	18c15604 	addi	r3,r3,1368
 100b33c:	e0bffb17 	ldw	r2,-20(fp)
 100b340:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 100b344:	e0bffc17 	ldw	r2,-16(fp)
 100b348:	10800104 	addi	r2,r2,4
 100b34c:	1007883a 	mov	r3,r2
 100b350:	008001c4 	movi	r2,7
 100b354:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 100b358:	e13ffe17 	ldw	r4,-8(fp)
 100b35c:	e17ffc17 	ldw	r5,-16(fp)
 100b360:	01804074 	movhi	r6,257
 100b364:	31aca104 	addi	r6,r6,-19836
 100b368:	100be240 	call	100be24 <alt_irq_register>
#endif  
}
 100b36c:	e037883a 	mov	sp,fp
 100b370:	dfc00117 	ldw	ra,4(sp)
 100b374:	df000017 	ldw	fp,0(sp)
 100b378:	dec00204 	addi	sp,sp,8
 100b37c:	f800283a 	ret

0100b380 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 100b380:	defffc04 	addi	sp,sp,-16
 100b384:	df000315 	stw	fp,12(sp)
 100b388:	df000304 	addi	fp,sp,12
 100b38c:	e13ffe15 	stw	r4,-8(fp)
 100b390:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 100b394:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 100b398:	e0bfff17 	ldw	r2,-4(fp)
 100b39c:	1004c03a 	cmpne	r2,r2,zero
 100b3a0:	1000061e 	bne	r2,zero,100b3bc <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 100b3a4:	e0bffe17 	ldw	r2,-8(fp)
 100b3a8:	1007883a 	mov	r3,r2
 100b3ac:	e0bffd03 	ldbu	r2,-12(fp)
 100b3b0:	10c4b03a 	or	r2,r2,r3
 100b3b4:	e0bffd05 	stb	r2,-12(fp)
 100b3b8:	00000806 	br	100b3dc <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 100b3bc:	e0bffe17 	ldw	r2,-8(fp)
 100b3c0:	1007883a 	mov	r3,r2
 100b3c4:	e0bffd03 	ldbu	r2,-12(fp)
 100b3c8:	10c4b03a 	or	r2,r2,r3
 100b3cc:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 100b3d0:	e0bffd03 	ldbu	r2,-12(fp)
 100b3d4:	10801014 	ori	r2,r2,64
 100b3d8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 100b3dc:	e0fffd03 	ldbu	r3,-12(fp)
 100b3e0:	00bfe004 	movi	r2,-128
 100b3e4:	1884b03a 	or	r2,r3,r2
 100b3e8:	10803fcc 	andi	r2,r2,255
}
 100b3ec:	e037883a 	mov	sp,fp
 100b3f0:	df000017 	ldw	fp,0(sp)
 100b3f4:	dec00104 	addi	sp,sp,4
 100b3f8:	f800283a 	ret

0100b3fc <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 100b3fc:	defffd04 	addi	sp,sp,-12
 100b400:	df000215 	stw	fp,8(sp)
 100b404:	df000204 	addi	fp,sp,8
 100b408:	e13ffe15 	stw	r4,-8(fp)
 100b40c:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 100b410:	e0bffe17 	ldw	r2,-8(fp)
 100b414:	10800a17 	ldw	r2,40(r2)
 100b418:	e0ffff03 	ldbu	r3,-4(fp)
 100b41c:	10c00025 	stbio	r3,0(r2)
}
 100b420:	e037883a 	mov	sp,fp
 100b424:	df000017 	ldw	fp,0(sp)
 100b428:	dec00104 	addi	sp,sp,4
 100b42c:	f800283a 	ret

0100b430 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 100b430:	defffe04 	addi	sp,sp,-8
 100b434:	df000115 	stw	fp,4(sp)
 100b438:	df000104 	addi	fp,sp,4
 100b43c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 100b440:	e0bfff17 	ldw	r2,-4(fp)
 100b444:	10800a17 	ldw	r2,40(r2)
 100b448:	1007883a 	mov	r3,r2
 100b44c:	00800044 	movi	r2,1
 100b450:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 100b454:	e037883a 	mov	sp,fp
 100b458:	df000017 	ldw	fp,0(sp)
 100b45c:	dec00104 	addi	sp,sp,4
 100b460:	f800283a 	ret

0100b464 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 100b464:	defffc04 	addi	sp,sp,-16
 100b468:	dfc00315 	stw	ra,12(sp)
 100b46c:	df000215 	stw	fp,8(sp)
 100b470:	df000204 	addi	fp,sp,8
 100b474:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 100b478:	e13fff17 	ldw	r4,-4(fp)
 100b47c:	01404074 	movhi	r5,257
 100b480:	297a8a04 	addi	r5,r5,-5592
 100b484:	100bc240 	call	100bc24 <alt_find_dev>
 100b488:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100b48c:	e0bffe17 	ldw	r2,-8(fp)
}
 100b490:	e037883a 	mov	sp,fp
 100b494:	dfc00117 	ldw	ra,4(sp)
 100b498:	df000017 	ldw	fp,0(sp)
 100b49c:	dec00204 	addi	sp,sp,8
 100b4a0:	f800283a 	ret

0100b4a4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 100b4a4:	defffb04 	addi	sp,sp,-20
 100b4a8:	df000415 	stw	fp,16(sp)
 100b4ac:	df000404 	addi	fp,sp,16
 100b4b0:	e13ffd15 	stw	r4,-12(fp)
 100b4b4:	e17ffe15 	stw	r5,-8(fp)
 100b4b8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 100b4bc:	e03ffc15 	stw	zero,-16(fp)
 100b4c0:	00000f06 	br	100b500 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 100b4c4:	e0bffd17 	ldw	r2,-12(fp)
 100b4c8:	10800a17 	ldw	r2,40(r2)
 100b4cc:	11000044 	addi	r4,r2,1
 100b4d0:	e0fffc17 	ldw	r3,-16(fp)
 100b4d4:	e0bffe17 	ldw	r2,-8(fp)
 100b4d8:	1885883a 	add	r2,r3,r2
 100b4dc:	10800003 	ldbu	r2,0(r2)
 100b4e0:	10c03fcc 	andi	r3,r2,255
 100b4e4:	18c0201c 	xori	r3,r3,128
 100b4e8:	18ffe004 	addi	r3,r3,-128
 100b4ec:	2005883a 	mov	r2,r4
 100b4f0:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 100b4f4:	e0bffc17 	ldw	r2,-16(fp)
 100b4f8:	10800044 	addi	r2,r2,1
 100b4fc:	e0bffc15 	stw	r2,-16(fp)
 100b500:	e0fffc17 	ldw	r3,-16(fp)
 100b504:	e0bfff17 	ldw	r2,-4(fp)
 100b508:	18bfee36 	bltu	r3,r2,100b4c4 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 100b50c:	e037883a 	mov	sp,fp
 100b510:	df000017 	ldw	fp,0(sp)
 100b514:	dec00104 	addi	sp,sp,4
 100b518:	f800283a 	ret

0100b51c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 100b51c:	defffd04 	addi	sp,sp,-12
 100b520:	df000215 	stw	fp,8(sp)
 100b524:	df000204 	addi	fp,sp,8
 100b528:	e13ffe15 	stw	r4,-8(fp)
 100b52c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 100b530:	00000d06 	br	100b568 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 100b534:	e0bffe17 	ldw	r2,-8(fp)
 100b538:	10800a17 	ldw	r2,40(r2)
 100b53c:	11000044 	addi	r4,r2,1
 100b540:	e0bfff17 	ldw	r2,-4(fp)
 100b544:	10800003 	ldbu	r2,0(r2)
 100b548:	10c03fcc 	andi	r3,r2,255
 100b54c:	18c0201c 	xori	r3,r3,128
 100b550:	18ffe004 	addi	r3,r3,-128
 100b554:	2005883a 	mov	r2,r4
 100b558:	10c00025 	stbio	r3,0(r2)
		++ptr;
 100b55c:	e0bfff17 	ldw	r2,-4(fp)
 100b560:	10800044 	addi	r2,r2,1
 100b564:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 100b568:	e0bfff17 	ldw	r2,-4(fp)
 100b56c:	10800003 	ldbu	r2,0(r2)
 100b570:	10803fcc 	andi	r2,r2,255
 100b574:	1080201c 	xori	r2,r2,128
 100b578:	10bfe004 	addi	r2,r2,-128
 100b57c:	1004c03a 	cmpne	r2,r2,zero
 100b580:	103fec1e 	bne	r2,zero,100b534 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 100b584:	e037883a 	mov	sp,fp
 100b588:	df000017 	ldw	fp,0(sp)
 100b58c:	dec00104 	addi	sp,sp,4
 100b590:	f800283a 	ret

0100b594 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 100b594:	defffb04 	addi	sp,sp,-20
 100b598:	dfc00415 	stw	ra,16(sp)
 100b59c:	df000315 	stw	fp,12(sp)
 100b5a0:	df000304 	addi	fp,sp,12
 100b5a4:	e13ffd15 	stw	r4,-12(fp)
 100b5a8:	e17ffe15 	stw	r5,-8(fp)
 100b5ac:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 100b5b0:	e0bffd17 	ldw	r2,-12(fp)
 100b5b4:	10800017 	ldw	r2,0(r2)
 100b5b8:	1009883a 	mov	r4,r2
 100b5bc:	e1bfff17 	ldw	r6,-4(fp)
 100b5c0:	e17ffe17 	ldw	r5,-8(fp)
 100b5c4:	100b4a40 	call	100b4a4 <alt_up_character_lcd_write>
	return 0;
 100b5c8:	0005883a 	mov	r2,zero
}
 100b5cc:	e037883a 	mov	sp,fp
 100b5d0:	dfc00117 	ldw	ra,4(sp)
 100b5d4:	df000017 	ldw	fp,0(sp)
 100b5d8:	dec00204 	addi	sp,sp,8
 100b5dc:	f800283a 	ret

0100b5e0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 100b5e0:	defff904 	addi	sp,sp,-28
 100b5e4:	dfc00615 	stw	ra,24(sp)
 100b5e8:	df000515 	stw	fp,20(sp)
 100b5ec:	df000504 	addi	fp,sp,20
 100b5f0:	e13ffc15 	stw	r4,-16(fp)
 100b5f4:	e17ffd15 	stw	r5,-12(fp)
 100b5f8:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 100b5fc:	e0bffd17 	ldw	r2,-12(fp)
 100b600:	10800a28 	cmpgeui	r2,r2,40
 100b604:	1000031e 	bne	r2,zero,100b614 <alt_up_character_lcd_set_cursor_pos+0x34>
 100b608:	e0bffe17 	ldw	r2,-8(fp)
 100b60c:	108000b0 	cmpltui	r2,r2,2
 100b610:	1000031e 	bne	r2,zero,100b620 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 100b614:	00bfffc4 	movi	r2,-1
 100b618:	e0bfff15 	stw	r2,-4(fp)
 100b61c:	00000806 	br	100b640 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100b620:	e13ffd17 	ldw	r4,-12(fp)
 100b624:	e17ffe17 	ldw	r5,-8(fp)
 100b628:	100b3800 	call	100b380 <get_DDRAM_addr>
 100b62c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 100b630:	e17ffb03 	ldbu	r5,-20(fp)
 100b634:	e13ffc17 	ldw	r4,-16(fp)
 100b638:	100b3fc0 	call	100b3fc <alt_up_character_lcd_send_cmd>
	return 0;
 100b63c:	e03fff15 	stw	zero,-4(fp)
 100b640:	e0bfff17 	ldw	r2,-4(fp)
}
 100b644:	e037883a 	mov	sp,fp
 100b648:	dfc00117 	ldw	ra,4(sp)
 100b64c:	df000017 	ldw	fp,0(sp)
 100b650:	dec00204 	addi	sp,sp,8
 100b654:	f800283a 	ret

0100b658 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100b658:	defff904 	addi	sp,sp,-28
 100b65c:	dfc00615 	stw	ra,24(sp)
 100b660:	df000515 	stw	fp,20(sp)
 100b664:	df000504 	addi	fp,sp,20
 100b668:	e13ffc15 	stw	r4,-16(fp)
 100b66c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100b670:	e0bffd17 	ldw	r2,-12(fp)
 100b674:	1005003a 	cmpeq	r2,r2,zero
 100b678:	10001e1e 	bne	r2,zero,100b6f4 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 100b67c:	e0bffd17 	ldw	r2,-12(fp)
 100b680:	10800050 	cmplti	r2,r2,1
 100b684:	1000031e 	bne	r2,zero,100b694 <alt_up_character_lcd_shift_cursor+0x3c>
 100b688:	00800504 	movi	r2,20
 100b68c:	e0bfff05 	stb	r2,-4(fp)
 100b690:	00000206 	br	100b69c <alt_up_character_lcd_shift_cursor+0x44>
 100b694:	00c00404 	movi	r3,16
 100b698:	e0ffff05 	stb	r3,-4(fp)
 100b69c:	e0bfff03 	ldbu	r2,-4(fp)
 100b6a0:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100b6a4:	e0fffd17 	ldw	r3,-12(fp)
 100b6a8:	e0fffe15 	stw	r3,-8(fp)
 100b6ac:	e0fffe17 	ldw	r3,-8(fp)
 100b6b0:	1804403a 	cmpge	r2,r3,zero
 100b6b4:	1000031e 	bne	r2,zero,100b6c4 <alt_up_character_lcd_shift_cursor+0x6c>
 100b6b8:	e0bffe17 	ldw	r2,-8(fp)
 100b6bc:	0085c83a 	sub	r2,zero,r2
 100b6c0:	e0bffe15 	stw	r2,-8(fp)
 100b6c4:	e0fffe17 	ldw	r3,-8(fp)
 100b6c8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100b6cc:	00000306 	br	100b6dc <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100b6d0:	e17ffb43 	ldbu	r5,-19(fp)
 100b6d4:	e13ffc17 	ldw	r4,-16(fp)
 100b6d8:	100b3fc0 	call	100b3fc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100b6dc:	e0bffb03 	ldbu	r2,-20(fp)
 100b6e0:	10bfffc4 	addi	r2,r2,-1
 100b6e4:	e0bffb05 	stb	r2,-20(fp)
 100b6e8:	e0bffb03 	ldbu	r2,-20(fp)
 100b6ec:	10803fd8 	cmpnei	r2,r2,255
 100b6f0:	103ff71e 	bne	r2,zero,100b6d0 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100b6f4:	e037883a 	mov	sp,fp
 100b6f8:	dfc00117 	ldw	ra,4(sp)
 100b6fc:	df000017 	ldw	fp,0(sp)
 100b700:	dec00204 	addi	sp,sp,8
 100b704:	f800283a 	ret

0100b708 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100b708:	defff904 	addi	sp,sp,-28
 100b70c:	dfc00615 	stw	ra,24(sp)
 100b710:	df000515 	stw	fp,20(sp)
 100b714:	df000504 	addi	fp,sp,20
 100b718:	e13ffc15 	stw	r4,-16(fp)
 100b71c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100b720:	e0bffd17 	ldw	r2,-12(fp)
 100b724:	1005003a 	cmpeq	r2,r2,zero
 100b728:	10001e1e 	bne	r2,zero,100b7a4 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 100b72c:	e0bffd17 	ldw	r2,-12(fp)
 100b730:	10800050 	cmplti	r2,r2,1
 100b734:	1000031e 	bne	r2,zero,100b744 <alt_up_character_lcd_shift_display+0x3c>
 100b738:	00800704 	movi	r2,28
 100b73c:	e0bfff05 	stb	r2,-4(fp)
 100b740:	00000206 	br	100b74c <alt_up_character_lcd_shift_display+0x44>
 100b744:	00c00604 	movi	r3,24
 100b748:	e0ffff05 	stb	r3,-4(fp)
 100b74c:	e0bfff03 	ldbu	r2,-4(fp)
 100b750:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100b754:	e0fffd17 	ldw	r3,-12(fp)
 100b758:	e0fffe15 	stw	r3,-8(fp)
 100b75c:	e0fffe17 	ldw	r3,-8(fp)
 100b760:	1804403a 	cmpge	r2,r3,zero
 100b764:	1000031e 	bne	r2,zero,100b774 <alt_up_character_lcd_shift_display+0x6c>
 100b768:	e0bffe17 	ldw	r2,-8(fp)
 100b76c:	0085c83a 	sub	r2,zero,r2
 100b770:	e0bffe15 	stw	r2,-8(fp)
 100b774:	e0fffe17 	ldw	r3,-8(fp)
 100b778:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100b77c:	00000306 	br	100b78c <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100b780:	e17ffb43 	ldbu	r5,-19(fp)
 100b784:	e13ffc17 	ldw	r4,-16(fp)
 100b788:	100b3fc0 	call	100b3fc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100b78c:	e0bffb03 	ldbu	r2,-20(fp)
 100b790:	10bfffc4 	addi	r2,r2,-1
 100b794:	e0bffb05 	stb	r2,-20(fp)
 100b798:	e0bffb03 	ldbu	r2,-20(fp)
 100b79c:	10803fd8 	cmpnei	r2,r2,255
 100b7a0:	103ff71e 	bne	r2,zero,100b780 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100b7a4:	e037883a 	mov	sp,fp
 100b7a8:	dfc00117 	ldw	ra,4(sp)
 100b7ac:	df000017 	ldw	fp,0(sp)
 100b7b0:	dec00204 	addi	sp,sp,8
 100b7b4:	f800283a 	ret

0100b7b8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 100b7b8:	defff904 	addi	sp,sp,-28
 100b7bc:	dfc00615 	stw	ra,24(sp)
 100b7c0:	df000515 	stw	fp,20(sp)
 100b7c4:	df000504 	addi	fp,sp,20
 100b7c8:	e13ffc15 	stw	r4,-16(fp)
 100b7cc:	e17ffd15 	stw	r5,-12(fp)
 100b7d0:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 100b7d4:	e0bffd17 	ldw	r2,-12(fp)
 100b7d8:	10800a28 	cmpgeui	r2,r2,40
 100b7dc:	1000031e 	bne	r2,zero,100b7ec <alt_up_character_lcd_erase_pos+0x34>
 100b7e0:	e0bffe17 	ldw	r2,-8(fp)
 100b7e4:	108000b0 	cmpltui	r2,r2,2
 100b7e8:	1000031e 	bne	r2,zero,100b7f8 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 100b7ec:	00bfffc4 	movi	r2,-1
 100b7f0:	e0bfff15 	stw	r2,-4(fp)
 100b7f4:	00000e06 	br	100b830 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100b7f8:	e13ffd17 	ldw	r4,-12(fp)
 100b7fc:	e17ffe17 	ldw	r5,-8(fp)
 100b800:	100b3800 	call	100b380 <get_DDRAM_addr>
 100b804:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 100b808:	e17ffb03 	ldbu	r5,-20(fp)
 100b80c:	e13ffc17 	ldw	r4,-16(fp)
 100b810:	100b3fc0 	call	100b3fc <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 100b814:	e0bffc17 	ldw	r2,-16(fp)
 100b818:	10800a17 	ldw	r2,40(r2)
 100b81c:	10800044 	addi	r2,r2,1
 100b820:	1007883a 	mov	r3,r2
 100b824:	00800084 	movi	r2,2
 100b828:	18800025 	stbio	r2,0(r3)
	return 0;
 100b82c:	e03fff15 	stw	zero,-4(fp)
 100b830:	e0bfff17 	ldw	r2,-4(fp)
}
 100b834:	e037883a 	mov	sp,fp
 100b838:	dfc00117 	ldw	ra,4(sp)
 100b83c:	df000017 	ldw	fp,0(sp)
 100b840:	dec00204 	addi	sp,sp,8
 100b844:	f800283a 	ret

0100b848 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 100b848:	defffd04 	addi	sp,sp,-12
 100b84c:	dfc00215 	stw	ra,8(sp)
 100b850:	df000115 	stw	fp,4(sp)
 100b854:	df000104 	addi	fp,sp,4
 100b858:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 100b85c:	e13fff17 	ldw	r4,-4(fp)
 100b860:	01400304 	movi	r5,12
 100b864:	100b3fc0 	call	100b3fc <alt_up_character_lcd_send_cmd>
}
 100b868:	e037883a 	mov	sp,fp
 100b86c:	dfc00117 	ldw	ra,4(sp)
 100b870:	df000017 	ldw	fp,0(sp)
 100b874:	dec00204 	addi	sp,sp,8
 100b878:	f800283a 	ret

0100b87c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 100b87c:	defffd04 	addi	sp,sp,-12
 100b880:	dfc00215 	stw	ra,8(sp)
 100b884:	df000115 	stw	fp,4(sp)
 100b888:	df000104 	addi	fp,sp,4
 100b88c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 100b890:	e13fff17 	ldw	r4,-4(fp)
 100b894:	014003c4 	movi	r5,15
 100b898:	100b3fc0 	call	100b3fc <alt_up_character_lcd_send_cmd>
}
 100b89c:	e037883a 	mov	sp,fp
 100b8a0:	dfc00117 	ldw	ra,4(sp)
 100b8a4:	df000017 	ldw	fp,0(sp)
 100b8a8:	dec00204 	addi	sp,sp,8
 100b8ac:	f800283a 	ret

0100b8b0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100b8b0:	defff404 	addi	sp,sp,-48
 100b8b4:	df000b15 	stw	fp,44(sp)
 100b8b8:	df000b04 	addi	fp,sp,44
 100b8bc:	e13ffb15 	stw	r4,-20(fp)
 100b8c0:	e17ffc15 	stw	r5,-16(fp)
 100b8c4:	e1bffd15 	stw	r6,-12(fp)
 100b8c8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100b8cc:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100b8d0:	00804074 	movhi	r2,257
 100b8d4:	10815604 	addi	r2,r2,1368
 100b8d8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 100b8dc:	1005003a 	cmpeq	r2,r2,zero
 100b8e0:	1000411e 	bne	r2,zero,100b9e8 <alt_alarm_start+0x138>
  {
    if (alarm)
 100b8e4:	e0bffb17 	ldw	r2,-20(fp)
 100b8e8:	1005003a 	cmpeq	r2,r2,zero
 100b8ec:	10003b1e 	bne	r2,zero,100b9dc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 100b8f0:	e0fffb17 	ldw	r3,-20(fp)
 100b8f4:	e0bffd17 	ldw	r2,-12(fp)
 100b8f8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 100b8fc:	e0fffb17 	ldw	r3,-20(fp)
 100b900:	e0bffe17 	ldw	r2,-8(fp)
 100b904:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b908:	0005303a 	rdctl	r2,status
 100b90c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b910:	e0fff817 	ldw	r3,-32(fp)
 100b914:	00bfff84 	movi	r2,-2
 100b918:	1884703a 	and	r2,r3,r2
 100b91c:	1001703a 	wrctl	status,r2
  
  return context;
 100b920:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 100b924:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100b928:	00804074 	movhi	r2,257
 100b92c:	10815704 	addi	r2,r2,1372
 100b930:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 100b934:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100b938:	e0fffc17 	ldw	r3,-16(fp)
 100b93c:	e0bff917 	ldw	r2,-28(fp)
 100b940:	1885883a 	add	r2,r3,r2
 100b944:	10c00044 	addi	r3,r2,1
 100b948:	e0bffb17 	ldw	r2,-20(fp)
 100b94c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100b950:	e0bffb17 	ldw	r2,-20(fp)
 100b954:	10c00217 	ldw	r3,8(r2)
 100b958:	e0bff917 	ldw	r2,-28(fp)
 100b95c:	1880042e 	bgeu	r3,r2,100b970 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 100b960:	e0fffb17 	ldw	r3,-20(fp)
 100b964:	00800044 	movi	r2,1
 100b968:	18800405 	stb	r2,16(r3)
 100b96c:	00000206 	br	100b978 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 100b970:	e0bffb17 	ldw	r2,-20(fp)
 100b974:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 100b978:	e0fffb17 	ldw	r3,-20(fp)
 100b97c:	00804074 	movhi	r2,257
 100b980:	10ba9004 	addi	r2,r2,-5568
 100b984:	e0bff615 	stw	r2,-40(fp)
 100b988:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100b98c:	e0fff717 	ldw	r3,-36(fp)
 100b990:	e0bff617 	ldw	r2,-40(fp)
 100b994:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100b998:	e0bff617 	ldw	r2,-40(fp)
 100b99c:	10c00017 	ldw	r3,0(r2)
 100b9a0:	e0bff717 	ldw	r2,-36(fp)
 100b9a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100b9a8:	e0bff617 	ldw	r2,-40(fp)
 100b9ac:	10c00017 	ldw	r3,0(r2)
 100b9b0:	e0bff717 	ldw	r2,-36(fp)
 100b9b4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100b9b8:	e0fff617 	ldw	r3,-40(fp)
 100b9bc:	e0bff717 	ldw	r2,-36(fp)
 100b9c0:	18800015 	stw	r2,0(r3)
 100b9c4:	e0bffa17 	ldw	r2,-24(fp)
 100b9c8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b9cc:	e0bff517 	ldw	r2,-44(fp)
 100b9d0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100b9d4:	e03fff15 	stw	zero,-4(fp)
 100b9d8:	00000506 	br	100b9f0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 100b9dc:	00bffa84 	movi	r2,-22
 100b9e0:	e0bfff15 	stw	r2,-4(fp)
 100b9e4:	00000206 	br	100b9f0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 100b9e8:	00bfde84 	movi	r2,-134
 100b9ec:	e0bfff15 	stw	r2,-4(fp)
 100b9f0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 100b9f4:	e037883a 	mov	sp,fp
 100b9f8:	df000017 	ldw	fp,0(sp)
 100b9fc:	dec00104 	addi	sp,sp,4
 100ba00:	f800283a 	ret

0100ba04 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 100ba04:	defffe04 	addi	sp,sp,-8
 100ba08:	df000115 	stw	fp,4(sp)
 100ba0c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100ba10:	e03fff15 	stw	zero,-4(fp)
 100ba14:	00000506 	br	100ba2c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 100ba18:	e0bfff17 	ldw	r2,-4(fp)
 100ba1c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100ba20:	e0bfff17 	ldw	r2,-4(fp)
 100ba24:	10800804 	addi	r2,r2,32
 100ba28:	e0bfff15 	stw	r2,-4(fp)
 100ba2c:	e0bfff17 	ldw	r2,-4(fp)
 100ba30:	10820030 	cmpltui	r2,r2,2048
 100ba34:	103ff81e 	bne	r2,zero,100ba18 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 100ba38:	e037883a 	mov	sp,fp
 100ba3c:	df000017 	ldw	fp,0(sp)
 100ba40:	dec00104 	addi	sp,sp,4
 100ba44:	f800283a 	ret

0100ba48 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 100ba48:	defff904 	addi	sp,sp,-28
 100ba4c:	dfc00615 	stw	ra,24(sp)
 100ba50:	df000515 	stw	fp,20(sp)
 100ba54:	df000504 	addi	fp,sp,20
 100ba58:	e13ffd15 	stw	r4,-12(fp)
 100ba5c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 100ba60:	e0bffd17 	ldw	r2,-12(fp)
 100ba64:	1005003a 	cmpeq	r2,r2,zero
 100ba68:	1000041e 	bne	r2,zero,100ba7c <alt_dev_llist_insert+0x34>
 100ba6c:	e0bffd17 	ldw	r2,-12(fp)
 100ba70:	10800217 	ldw	r2,8(r2)
 100ba74:	1004c03a 	cmpne	r2,r2,zero
 100ba78:	1000071e 	bne	r2,zero,100ba98 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 100ba7c:	100bafc0 	call	100bafc <alt_get_errno>
 100ba80:	1007883a 	mov	r3,r2
 100ba84:	00800584 	movi	r2,22
 100ba88:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 100ba8c:	00bffa84 	movi	r2,-22
 100ba90:	e0bfff15 	stw	r2,-4(fp)
 100ba94:	00001306 	br	100bae4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 100ba98:	e0fffd17 	ldw	r3,-12(fp)
 100ba9c:	e0bffe17 	ldw	r2,-8(fp)
 100baa0:	e0bffb15 	stw	r2,-20(fp)
 100baa4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100baa8:	e0fffc17 	ldw	r3,-16(fp)
 100baac:	e0bffb17 	ldw	r2,-20(fp)
 100bab0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100bab4:	e0bffb17 	ldw	r2,-20(fp)
 100bab8:	10c00017 	ldw	r3,0(r2)
 100babc:	e0bffc17 	ldw	r2,-16(fp)
 100bac0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100bac4:	e0bffb17 	ldw	r2,-20(fp)
 100bac8:	10c00017 	ldw	r3,0(r2)
 100bacc:	e0bffc17 	ldw	r2,-16(fp)
 100bad0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100bad4:	e0fffb17 	ldw	r3,-20(fp)
 100bad8:	e0bffc17 	ldw	r2,-16(fp)
 100badc:	18800015 	stw	r2,0(r3)

  return 0;  
 100bae0:	e03fff15 	stw	zero,-4(fp)
 100bae4:	e0bfff17 	ldw	r2,-4(fp)
}
 100bae8:	e037883a 	mov	sp,fp
 100baec:	dfc00117 	ldw	ra,4(sp)
 100baf0:	df000017 	ldw	fp,0(sp)
 100baf4:	dec00204 	addi	sp,sp,8
 100baf8:	f800283a 	ret

0100bafc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100bafc:	defffd04 	addi	sp,sp,-12
 100bb00:	dfc00215 	stw	ra,8(sp)
 100bb04:	df000115 	stw	fp,4(sp)
 100bb08:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100bb0c:	00804074 	movhi	r2,257
 100bb10:	10ba8d04 	addi	r2,r2,-5580
 100bb14:	10800017 	ldw	r2,0(r2)
 100bb18:	1005003a 	cmpeq	r2,r2,zero
 100bb1c:	1000061e 	bne	r2,zero,100bb38 <alt_get_errno+0x3c>
 100bb20:	00804074 	movhi	r2,257
 100bb24:	10ba8d04 	addi	r2,r2,-5580
 100bb28:	10800017 	ldw	r2,0(r2)
 100bb2c:	103ee83a 	callr	r2
 100bb30:	e0bfff15 	stw	r2,-4(fp)
 100bb34:	00000306 	br	100bb44 <alt_get_errno+0x48>
 100bb38:	00804074 	movhi	r2,257
 100bb3c:	10815104 	addi	r2,r2,1348
 100bb40:	e0bfff15 	stw	r2,-4(fp)
 100bb44:	e0bfff17 	ldw	r2,-4(fp)
}
 100bb48:	e037883a 	mov	sp,fp
 100bb4c:	dfc00117 	ldw	ra,4(sp)
 100bb50:	df000017 	ldw	fp,0(sp)
 100bb54:	dec00204 	addi	sp,sp,8
 100bb58:	f800283a 	ret

0100bb5c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 100bb5c:	defffd04 	addi	sp,sp,-12
 100bb60:	dfc00215 	stw	ra,8(sp)
 100bb64:	df000115 	stw	fp,4(sp)
 100bb68:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100bb6c:	00bfff04 	movi	r2,-4
 100bb70:	00c04074 	movhi	r3,257
 100bb74:	18f2b804 	addi	r3,r3,-13600
 100bb78:	1885883a 	add	r2,r3,r2
 100bb7c:	e0bfff15 	stw	r2,-4(fp)
 100bb80:	00000606 	br	100bb9c <_do_ctors+0x40>
        (*ctor) (); 
 100bb84:	e0bfff17 	ldw	r2,-4(fp)
 100bb88:	10800017 	ldw	r2,0(r2)
 100bb8c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100bb90:	e0bfff17 	ldw	r2,-4(fp)
 100bb94:	10bfff04 	addi	r2,r2,-4
 100bb98:	e0bfff15 	stw	r2,-4(fp)
 100bb9c:	e0ffff17 	ldw	r3,-4(fp)
 100bba0:	00804074 	movhi	r2,257
 100bba4:	10b2b704 	addi	r2,r2,-13604
 100bba8:	18bff62e 	bgeu	r3,r2,100bb84 <_do_ctors+0x28>
        (*ctor) (); 
}
 100bbac:	e037883a 	mov	sp,fp
 100bbb0:	dfc00117 	ldw	ra,4(sp)
 100bbb4:	df000017 	ldw	fp,0(sp)
 100bbb8:	dec00204 	addi	sp,sp,8
 100bbbc:	f800283a 	ret

0100bbc0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 100bbc0:	defffd04 	addi	sp,sp,-12
 100bbc4:	dfc00215 	stw	ra,8(sp)
 100bbc8:	df000115 	stw	fp,4(sp)
 100bbcc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100bbd0:	00bfff04 	movi	r2,-4
 100bbd4:	00c04074 	movhi	r3,257
 100bbd8:	18f2b804 	addi	r3,r3,-13600
 100bbdc:	1885883a 	add	r2,r3,r2
 100bbe0:	e0bfff15 	stw	r2,-4(fp)
 100bbe4:	00000606 	br	100bc00 <_do_dtors+0x40>
        (*dtor) (); 
 100bbe8:	e0bfff17 	ldw	r2,-4(fp)
 100bbec:	10800017 	ldw	r2,0(r2)
 100bbf0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100bbf4:	e0bfff17 	ldw	r2,-4(fp)
 100bbf8:	10bfff04 	addi	r2,r2,-4
 100bbfc:	e0bfff15 	stw	r2,-4(fp)
 100bc00:	e0ffff17 	ldw	r3,-4(fp)
 100bc04:	00804074 	movhi	r2,257
 100bc08:	10b2b804 	addi	r2,r2,-13600
 100bc0c:	18bff62e 	bgeu	r3,r2,100bbe8 <_do_dtors+0x28>
        (*dtor) (); 
}
 100bc10:	e037883a 	mov	sp,fp
 100bc14:	dfc00117 	ldw	ra,4(sp)
 100bc18:	df000017 	ldw	fp,0(sp)
 100bc1c:	dec00204 	addi	sp,sp,8
 100bc20:	f800283a 	ret

0100bc24 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 100bc24:	defff904 	addi	sp,sp,-28
 100bc28:	dfc00615 	stw	ra,24(sp)
 100bc2c:	df000515 	stw	fp,20(sp)
 100bc30:	df000504 	addi	fp,sp,20
 100bc34:	e13ffd15 	stw	r4,-12(fp)
 100bc38:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 100bc3c:	e0bffe17 	ldw	r2,-8(fp)
 100bc40:	10800017 	ldw	r2,0(r2)
 100bc44:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 100bc48:	e13ffd17 	ldw	r4,-12(fp)
 100bc4c:	10005f00 	call	10005f0 <strlen>
 100bc50:	10800044 	addi	r2,r2,1
 100bc54:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100bc58:	00000d06 	br	100bc90 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 100bc5c:	e0bffc17 	ldw	r2,-16(fp)
 100bc60:	11000217 	ldw	r4,8(r2)
 100bc64:	e1bffb17 	ldw	r6,-20(fp)
 100bc68:	e17ffd17 	ldw	r5,-12(fp)
 100bc6c:	100c7200 	call	100c720 <memcmp>
 100bc70:	1004c03a 	cmpne	r2,r2,zero
 100bc74:	1000031e 	bne	r2,zero,100bc84 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 100bc78:	e0bffc17 	ldw	r2,-16(fp)
 100bc7c:	e0bfff15 	stw	r2,-4(fp)
 100bc80:	00000706 	br	100bca0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 100bc84:	e0bffc17 	ldw	r2,-16(fp)
 100bc88:	10800017 	ldw	r2,0(r2)
 100bc8c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100bc90:	e0fffe17 	ldw	r3,-8(fp)
 100bc94:	e0bffc17 	ldw	r2,-16(fp)
 100bc98:	10fff01e 	bne	r2,r3,100bc5c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 100bc9c:	e03fff15 	stw	zero,-4(fp)
 100bca0:	e0bfff17 	ldw	r2,-4(fp)
}
 100bca4:	e037883a 	mov	sp,fp
 100bca8:	dfc00117 	ldw	ra,4(sp)
 100bcac:	df000017 	ldw	fp,0(sp)
 100bcb0:	dec00204 	addi	sp,sp,8
 100bcb4:	f800283a 	ret

0100bcb8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 100bcb8:	defffe04 	addi	sp,sp,-8
 100bcbc:	dfc00115 	stw	ra,4(sp)
 100bcc0:	df000015 	stw	fp,0(sp)
 100bcc4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 100bcc8:	0009883a 	mov	r4,zero
 100bccc:	01440004 	movi	r5,4096
 100bcd0:	100c6440 	call	100c644 <alt_icache_flush>
#endif
}
 100bcd4:	e037883a 	mov	sp,fp
 100bcd8:	dfc00117 	ldw	ra,4(sp)
 100bcdc:	df000017 	ldw	fp,0(sp)
 100bce0:	dec00204 	addi	sp,sp,8
 100bce4:	f800283a 	ret

0100bce8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100bce8:	defff904 	addi	sp,sp,-28
 100bcec:	dfc00615 	stw	ra,24(sp)
 100bcf0:	df000515 	stw	fp,20(sp)
 100bcf4:	df000504 	addi	fp,sp,20
 100bcf8:	e13ffc15 	stw	r4,-16(fp)
 100bcfc:	e17ffd15 	stw	r5,-12(fp)
 100bd00:	e1bffe15 	stw	r6,-8(fp)
 100bd04:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 100bd08:	e13ffd17 	ldw	r4,-12(fp)
 100bd0c:	e17ffe17 	ldw	r5,-8(fp)
 100bd10:	e1bfff17 	ldw	r6,-4(fp)
 100bd14:	100c0c00 	call	100c0c0 <open>
 100bd18:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 100bd1c:	e0bffb17 	ldw	r2,-20(fp)
 100bd20:	1004803a 	cmplt	r2,r2,zero
 100bd24:	10001c1e 	bne	r2,zero,100bd98 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 100bd28:	e0bffb17 	ldw	r2,-20(fp)
 100bd2c:	00c04074 	movhi	r3,257
 100bd30:	18f5e804 	addi	r3,r3,-10336
 100bd34:	10800324 	muli	r2,r2,12
 100bd38:	10c5883a 	add	r2,r2,r3
 100bd3c:	10c00017 	ldw	r3,0(r2)
 100bd40:	e0bffc17 	ldw	r2,-16(fp)
 100bd44:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 100bd48:	e0bffb17 	ldw	r2,-20(fp)
 100bd4c:	00c04074 	movhi	r3,257
 100bd50:	18f5e804 	addi	r3,r3,-10336
 100bd54:	10800324 	muli	r2,r2,12
 100bd58:	10c5883a 	add	r2,r2,r3
 100bd5c:	10800104 	addi	r2,r2,4
 100bd60:	10c00017 	ldw	r3,0(r2)
 100bd64:	e0bffc17 	ldw	r2,-16(fp)
 100bd68:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 100bd6c:	e0bffb17 	ldw	r2,-20(fp)
 100bd70:	00c04074 	movhi	r3,257
 100bd74:	18f5e804 	addi	r3,r3,-10336
 100bd78:	10800324 	muli	r2,r2,12
 100bd7c:	10c5883a 	add	r2,r2,r3
 100bd80:	10800204 	addi	r2,r2,8
 100bd84:	10c00017 	ldw	r3,0(r2)
 100bd88:	e0bffc17 	ldw	r2,-16(fp)
 100bd8c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 100bd90:	e13ffb17 	ldw	r4,-20(fp)
 100bd94:	100a44c0 	call	100a44c <alt_release_fd>
  }
} 
 100bd98:	e037883a 	mov	sp,fp
 100bd9c:	dfc00117 	ldw	ra,4(sp)
 100bda0:	df000017 	ldw	fp,0(sp)
 100bda4:	dec00204 	addi	sp,sp,8
 100bda8:	f800283a 	ret

0100bdac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 100bdac:	defffb04 	addi	sp,sp,-20
 100bdb0:	dfc00415 	stw	ra,16(sp)
 100bdb4:	df000315 	stw	fp,12(sp)
 100bdb8:	df000304 	addi	fp,sp,12
 100bdbc:	e13ffd15 	stw	r4,-12(fp)
 100bdc0:	e17ffe15 	stw	r5,-8(fp)
 100bdc4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 100bdc8:	01004074 	movhi	r4,257
 100bdcc:	2135eb04 	addi	r4,r4,-10324
 100bdd0:	e17ffd17 	ldw	r5,-12(fp)
 100bdd4:	01800044 	movi	r6,1
 100bdd8:	01c07fc4 	movi	r7,511
 100bddc:	100bce80 	call	100bce8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 100bde0:	01004074 	movhi	r4,257
 100bde4:	2135e804 	addi	r4,r4,-10336
 100bde8:	e17ffe17 	ldw	r5,-8(fp)
 100bdec:	000d883a 	mov	r6,zero
 100bdf0:	01c07fc4 	movi	r7,511
 100bdf4:	100bce80 	call	100bce8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 100bdf8:	01004074 	movhi	r4,257
 100bdfc:	2135ee04 	addi	r4,r4,-10312
 100be00:	e17fff17 	ldw	r5,-4(fp)
 100be04:	01800044 	movi	r6,1
 100be08:	01c07fc4 	movi	r7,511
 100be0c:	100bce80 	call	100bce8 <alt_open_fd>
}  
 100be10:	e037883a 	mov	sp,fp
 100be14:	dfc00117 	ldw	ra,4(sp)
 100be18:	df000017 	ldw	fp,0(sp)
 100be1c:	dec00204 	addi	sp,sp,8
 100be20:	f800283a 	ret

0100be24 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 100be24:	deffef04 	addi	sp,sp,-68
 100be28:	df001015 	stw	fp,64(sp)
 100be2c:	df001004 	addi	fp,sp,64
 100be30:	e13ffc15 	stw	r4,-16(fp)
 100be34:	e17ffd15 	stw	r5,-12(fp)
 100be38:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 100be3c:	00bffa84 	movi	r2,-22
 100be40:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100be44:	e0bffc17 	ldw	r2,-16(fp)
 100be48:	10800828 	cmpgeui	r2,r2,32
 100be4c:	1000601e 	bne	r2,zero,100bfd0 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100be50:	0005303a 	rdctl	r2,status
 100be54:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100be58:	e0fff917 	ldw	r3,-28(fp)
 100be5c:	00bfff84 	movi	r2,-2
 100be60:	1884703a 	and	r2,r3,r2
 100be64:	1001703a 	wrctl	status,r2
  
  return context;
 100be68:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 100be6c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 100be70:	e0bffc17 	ldw	r2,-16(fp)
 100be74:	00c04074 	movhi	r3,257
 100be78:	18c16204 	addi	r3,r3,1416
 100be7c:	100490fa 	slli	r2,r2,3
 100be80:	10c7883a 	add	r3,r2,r3
 100be84:	e0bffe17 	ldw	r2,-8(fp)
 100be88:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 100be8c:	e0bffc17 	ldw	r2,-16(fp)
 100be90:	00c04074 	movhi	r3,257
 100be94:	18c16204 	addi	r3,r3,1416
 100be98:	100490fa 	slli	r2,r2,3
 100be9c:	10c5883a 	add	r2,r2,r3
 100bea0:	10c00104 	addi	r3,r2,4
 100bea4:	e0bffd17 	ldw	r2,-12(fp)
 100bea8:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 100beac:	e0bffe17 	ldw	r2,-8(fp)
 100beb0:	1005003a 	cmpeq	r2,r2,zero
 100beb4:	1000201e 	bne	r2,zero,100bf38 <alt_irq_register+0x114>
 100beb8:	e0bffc17 	ldw	r2,-16(fp)
 100bebc:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bec0:	0005303a 	rdctl	r2,status
 100bec4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bec8:	e0fff617 	ldw	r3,-40(fp)
 100becc:	00bfff84 	movi	r2,-2
 100bed0:	1884703a 	and	r2,r3,r2
 100bed4:	1001703a 	wrctl	status,r2
  
  return context;
 100bed8:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100bedc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 100bee0:	e0fff717 	ldw	r3,-36(fp)
 100bee4:	00800044 	movi	r2,1
 100bee8:	10c4983a 	sll	r2,r2,r3
 100beec:	1007883a 	mov	r3,r2
 100bef0:	00804074 	movhi	r2,257
 100bef4:	10815504 	addi	r2,r2,1364
 100bef8:	10800017 	ldw	r2,0(r2)
 100befc:	1886b03a 	or	r3,r3,r2
 100bf00:	00804074 	movhi	r2,257
 100bf04:	10815504 	addi	r2,r2,1364
 100bf08:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100bf0c:	00804074 	movhi	r2,257
 100bf10:	10815504 	addi	r2,r2,1364
 100bf14:	10800017 	ldw	r2,0(r2)
 100bf18:	100170fa 	wrctl	ienable,r2
 100bf1c:	e0bff817 	ldw	r2,-32(fp)
 100bf20:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bf24:	e0bff517 	ldw	r2,-44(fp)
 100bf28:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100bf2c:	0005883a 	mov	r2,zero
 100bf30:	e0bfff15 	stw	r2,-4(fp)
 100bf34:	00002006 	br	100bfb8 <alt_irq_register+0x194>
 100bf38:	e0bffc17 	ldw	r2,-16(fp)
 100bf3c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bf40:	0005303a 	rdctl	r2,status
 100bf44:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bf48:	e0fff217 	ldw	r3,-56(fp)
 100bf4c:	00bfff84 	movi	r2,-2
 100bf50:	1884703a 	and	r2,r3,r2
 100bf54:	1001703a 	wrctl	status,r2
  
  return context;
 100bf58:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100bf5c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 100bf60:	e0fff317 	ldw	r3,-52(fp)
 100bf64:	00800044 	movi	r2,1
 100bf68:	10c4983a 	sll	r2,r2,r3
 100bf6c:	0084303a 	nor	r2,zero,r2
 100bf70:	1007883a 	mov	r3,r2
 100bf74:	00804074 	movhi	r2,257
 100bf78:	10815504 	addi	r2,r2,1364
 100bf7c:	10800017 	ldw	r2,0(r2)
 100bf80:	1886703a 	and	r3,r3,r2
 100bf84:	00804074 	movhi	r2,257
 100bf88:	10815504 	addi	r2,r2,1364
 100bf8c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100bf90:	00804074 	movhi	r2,257
 100bf94:	10815504 	addi	r2,r2,1364
 100bf98:	10800017 	ldw	r2,0(r2)
 100bf9c:	100170fa 	wrctl	ienable,r2
 100bfa0:	e0bff417 	ldw	r2,-48(fp)
 100bfa4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bfa8:	e0bff117 	ldw	r2,-60(fp)
 100bfac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100bfb0:	0005883a 	mov	r2,zero
 100bfb4:	e0bfff15 	stw	r2,-4(fp)
 100bfb8:	e0bfff17 	ldw	r2,-4(fp)
 100bfbc:	e0bffb15 	stw	r2,-20(fp)
 100bfc0:	e0bffa17 	ldw	r2,-24(fp)
 100bfc4:	e0bff015 	stw	r2,-64(fp)
 100bfc8:	e0bff017 	ldw	r2,-64(fp)
 100bfcc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 100bfd0:	e0bffb17 	ldw	r2,-20(fp)
}
 100bfd4:	e037883a 	mov	sp,fp
 100bfd8:	df000017 	ldw	fp,0(sp)
 100bfdc:	dec00104 	addi	sp,sp,4
 100bfe0:	f800283a 	ret

0100bfe4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100bfe4:	defffc04 	addi	sp,sp,-16
 100bfe8:	df000315 	stw	fp,12(sp)
 100bfec:	df000304 	addi	fp,sp,12
 100bff0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100bff4:	e0bffe17 	ldw	r2,-8(fp)
 100bff8:	10800217 	ldw	r2,8(r2)
 100bffc:	10d00034 	orhi	r3,r2,16384
 100c000:	e0bffe17 	ldw	r2,-8(fp)
 100c004:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100c008:	e03ffd15 	stw	zero,-12(fp)
 100c00c:	00002006 	br	100c090 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100c010:	e0bffd17 	ldw	r2,-12(fp)
 100c014:	00c04074 	movhi	r3,257
 100c018:	18f5e804 	addi	r3,r3,-10336
 100c01c:	10800324 	muli	r2,r2,12
 100c020:	10c5883a 	add	r2,r2,r3
 100c024:	10c00017 	ldw	r3,0(r2)
 100c028:	e0bffe17 	ldw	r2,-8(fp)
 100c02c:	10800017 	ldw	r2,0(r2)
 100c030:	1880141e 	bne	r3,r2,100c084 <alt_file_locked+0xa0>
 100c034:	e0bffd17 	ldw	r2,-12(fp)
 100c038:	00c04074 	movhi	r3,257
 100c03c:	18f5e804 	addi	r3,r3,-10336
 100c040:	10800324 	muli	r2,r2,12
 100c044:	10c5883a 	add	r2,r2,r3
 100c048:	10800204 	addi	r2,r2,8
 100c04c:	10800017 	ldw	r2,0(r2)
 100c050:	1004403a 	cmpge	r2,r2,zero
 100c054:	10000b1e 	bne	r2,zero,100c084 <alt_file_locked+0xa0>
 100c058:	e0bffd17 	ldw	r2,-12(fp)
 100c05c:	10800324 	muli	r2,r2,12
 100c060:	1007883a 	mov	r3,r2
 100c064:	00804074 	movhi	r2,257
 100c068:	10b5e804 	addi	r2,r2,-10336
 100c06c:	1887883a 	add	r3,r3,r2
 100c070:	e0bffe17 	ldw	r2,-8(fp)
 100c074:	18800326 	beq	r3,r2,100c084 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 100c078:	00bffcc4 	movi	r2,-13
 100c07c:	e0bfff15 	stw	r2,-4(fp)
 100c080:	00000a06 	br	100c0ac <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100c084:	e0bffd17 	ldw	r2,-12(fp)
 100c088:	10800044 	addi	r2,r2,1
 100c08c:	e0bffd15 	stw	r2,-12(fp)
 100c090:	00804074 	movhi	r2,257
 100c094:	10ba8c04 	addi	r2,r2,-5584
 100c098:	10800017 	ldw	r2,0(r2)
 100c09c:	1007883a 	mov	r3,r2
 100c0a0:	e0bffd17 	ldw	r2,-12(fp)
 100c0a4:	18bfda2e 	bgeu	r3,r2,100c010 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 100c0a8:	e03fff15 	stw	zero,-4(fp)
 100c0ac:	e0bfff17 	ldw	r2,-4(fp)
}
 100c0b0:	e037883a 	mov	sp,fp
 100c0b4:	df000017 	ldw	fp,0(sp)
 100c0b8:	dec00104 	addi	sp,sp,4
 100c0bc:	f800283a 	ret

0100c0c0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100c0c0:	defff404 	addi	sp,sp,-48
 100c0c4:	dfc00b15 	stw	ra,44(sp)
 100c0c8:	df000a15 	stw	fp,40(sp)
 100c0cc:	df000a04 	addi	fp,sp,40
 100c0d0:	e13ffb15 	stw	r4,-20(fp)
 100c0d4:	e17ffc15 	stw	r5,-16(fp)
 100c0d8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 100c0dc:	00bfffc4 	movi	r2,-1
 100c0e0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 100c0e4:	00bffb44 	movi	r2,-19
 100c0e8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 100c0ec:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100c0f0:	e13ffb17 	ldw	r4,-20(fp)
 100c0f4:	01404074 	movhi	r5,257
 100c0f8:	297a8a04 	addi	r5,r5,-5592
 100c0fc:	100bc240 	call	100bc24 <alt_find_dev>
 100c100:	e0bffa15 	stw	r2,-24(fp)
 100c104:	e0bffa17 	ldw	r2,-24(fp)
 100c108:	1004c03a 	cmpne	r2,r2,zero
 100c10c:	1000051e 	bne	r2,zero,100c124 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100c110:	e13ffb17 	ldw	r4,-20(fp)
 100c114:	100c46c0 	call	100c46c <alt_find_file>
 100c118:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 100c11c:	00800044 	movi	r2,1
 100c120:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100c124:	e0bffa17 	ldw	r2,-24(fp)
 100c128:	1005003a 	cmpeq	r2,r2,zero
 100c12c:	1000301e 	bne	r2,zero,100c1f0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100c130:	e13ffa17 	ldw	r4,-24(fp)
 100c134:	100c58c0 	call	100c58c <alt_get_fd>
 100c138:	e0bff815 	stw	r2,-32(fp)
 100c13c:	e0bff817 	ldw	r2,-32(fp)
 100c140:	1004403a 	cmpge	r2,r2,zero
 100c144:	1000031e 	bne	r2,zero,100c154 <open+0x94>
    {
      status = index;
 100c148:	e0bff817 	ldw	r2,-32(fp)
 100c14c:	e0bff715 	stw	r2,-36(fp)
 100c150:	00002906 	br	100c1f8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 100c154:	e0bff817 	ldw	r2,-32(fp)
 100c158:	10800324 	muli	r2,r2,12
 100c15c:	1007883a 	mov	r3,r2
 100c160:	00804074 	movhi	r2,257
 100c164:	10b5e804 	addi	r2,r2,-10336
 100c168:	1885883a 	add	r2,r3,r2
 100c16c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100c170:	e0fffc17 	ldw	r3,-16(fp)
 100c174:	00900034 	movhi	r2,16384
 100c178:	10bfffc4 	addi	r2,r2,-1
 100c17c:	1886703a 	and	r3,r3,r2
 100c180:	e0bff917 	ldw	r2,-28(fp)
 100c184:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100c188:	e0bff617 	ldw	r2,-40(fp)
 100c18c:	1004c03a 	cmpne	r2,r2,zero
 100c190:	1000061e 	bne	r2,zero,100c1ac <open+0xec>
 100c194:	e13ff917 	ldw	r4,-28(fp)
 100c198:	100bfe40 	call	100bfe4 <alt_file_locked>
 100c19c:	e0bff715 	stw	r2,-36(fp)
 100c1a0:	e0bff717 	ldw	r2,-36(fp)
 100c1a4:	1004803a 	cmplt	r2,r2,zero
 100c1a8:	1000131e 	bne	r2,zero,100c1f8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100c1ac:	e0bffa17 	ldw	r2,-24(fp)
 100c1b0:	10800317 	ldw	r2,12(r2)
 100c1b4:	1005003a 	cmpeq	r2,r2,zero
 100c1b8:	1000091e 	bne	r2,zero,100c1e0 <open+0x120>
 100c1bc:	e0bffa17 	ldw	r2,-24(fp)
 100c1c0:	10800317 	ldw	r2,12(r2)
 100c1c4:	e13ff917 	ldw	r4,-28(fp)
 100c1c8:	e17ffb17 	ldw	r5,-20(fp)
 100c1cc:	e1bffc17 	ldw	r6,-16(fp)
 100c1d0:	e1fffd17 	ldw	r7,-12(fp)
 100c1d4:	103ee83a 	callr	r2
 100c1d8:	e0bfff15 	stw	r2,-4(fp)
 100c1dc:	00000106 	br	100c1e4 <open+0x124>
 100c1e0:	e03fff15 	stw	zero,-4(fp)
 100c1e4:	e0bfff17 	ldw	r2,-4(fp)
 100c1e8:	e0bff715 	stw	r2,-36(fp)
 100c1ec:	00000206 	br	100c1f8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100c1f0:	00bffb44 	movi	r2,-19
 100c1f4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100c1f8:	e0bff717 	ldw	r2,-36(fp)
 100c1fc:	1004403a 	cmpge	r2,r2,zero
 100c200:	1000091e 	bne	r2,zero,100c228 <open+0x168>
  {
    alt_release_fd (index);  
 100c204:	e13ff817 	ldw	r4,-32(fp)
 100c208:	100a44c0 	call	100a44c <alt_release_fd>
    ALT_ERRNO = -status;
 100c20c:	100c2480 	call	100c248 <alt_get_errno>
 100c210:	e0fff717 	ldw	r3,-36(fp)
 100c214:	00c7c83a 	sub	r3,zero,r3
 100c218:	10c00015 	stw	r3,0(r2)
    return -1;
 100c21c:	00bfffc4 	movi	r2,-1
 100c220:	e0bffe15 	stw	r2,-8(fp)
 100c224:	00000206 	br	100c230 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 100c228:	e0bff817 	ldw	r2,-32(fp)
 100c22c:	e0bffe15 	stw	r2,-8(fp)
 100c230:	e0bffe17 	ldw	r2,-8(fp)
}
 100c234:	e037883a 	mov	sp,fp
 100c238:	dfc00117 	ldw	ra,4(sp)
 100c23c:	df000017 	ldw	fp,0(sp)
 100c240:	dec00204 	addi	sp,sp,8
 100c244:	f800283a 	ret

0100c248 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100c248:	defffd04 	addi	sp,sp,-12
 100c24c:	dfc00215 	stw	ra,8(sp)
 100c250:	df000115 	stw	fp,4(sp)
 100c254:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100c258:	00804074 	movhi	r2,257
 100c25c:	10ba8d04 	addi	r2,r2,-5580
 100c260:	10800017 	ldw	r2,0(r2)
 100c264:	1005003a 	cmpeq	r2,r2,zero
 100c268:	1000061e 	bne	r2,zero,100c284 <alt_get_errno+0x3c>
 100c26c:	00804074 	movhi	r2,257
 100c270:	10ba8d04 	addi	r2,r2,-5580
 100c274:	10800017 	ldw	r2,0(r2)
 100c278:	103ee83a 	callr	r2
 100c27c:	e0bfff15 	stw	r2,-4(fp)
 100c280:	00000306 	br	100c290 <alt_get_errno+0x48>
 100c284:	00804074 	movhi	r2,257
 100c288:	10815104 	addi	r2,r2,1348
 100c28c:	e0bfff15 	stw	r2,-4(fp)
 100c290:	e0bfff17 	ldw	r2,-4(fp)
}
 100c294:	e037883a 	mov	sp,fp
 100c298:	dfc00117 	ldw	ra,4(sp)
 100c29c:	df000017 	ldw	fp,0(sp)
 100c2a0:	dec00204 	addi	sp,sp,8
 100c2a4:	f800283a 	ret

0100c2a8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100c2a8:	defffa04 	addi	sp,sp,-24
 100c2ac:	df000515 	stw	fp,20(sp)
 100c2b0:	df000504 	addi	fp,sp,20
 100c2b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c2b8:	0005303a 	rdctl	r2,status
 100c2bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c2c0:	e0fffd17 	ldw	r3,-12(fp)
 100c2c4:	00bfff84 	movi	r2,-2
 100c2c8:	1884703a 	and	r2,r3,r2
 100c2cc:	1001703a 	wrctl	status,r2
  
  return context;
 100c2d0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100c2d4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 100c2d8:	e0bfff17 	ldw	r2,-4(fp)
 100c2dc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100c2e0:	e0bffc17 	ldw	r2,-16(fp)
 100c2e4:	10c00017 	ldw	r3,0(r2)
 100c2e8:	e0bffc17 	ldw	r2,-16(fp)
 100c2ec:	10800117 	ldw	r2,4(r2)
 100c2f0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 100c2f4:	e0bffc17 	ldw	r2,-16(fp)
 100c2f8:	10c00117 	ldw	r3,4(r2)
 100c2fc:	e0bffc17 	ldw	r2,-16(fp)
 100c300:	10800017 	ldw	r2,0(r2)
 100c304:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100c308:	e0fffc17 	ldw	r3,-16(fp)
 100c30c:	e0bffc17 	ldw	r2,-16(fp)
 100c310:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 100c314:	e0fffc17 	ldw	r3,-16(fp)
 100c318:	e0bffc17 	ldw	r2,-16(fp)
 100c31c:	18800015 	stw	r2,0(r3)
 100c320:	e0bffe17 	ldw	r2,-8(fp)
 100c324:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c328:	e0bffb17 	ldw	r2,-20(fp)
 100c32c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 100c330:	e037883a 	mov	sp,fp
 100c334:	df000017 	ldw	fp,0(sp)
 100c338:	dec00104 	addi	sp,sp,4
 100c33c:	f800283a 	ret

0100c340 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100c340:	defffb04 	addi	sp,sp,-20
 100c344:	dfc00415 	stw	ra,16(sp)
 100c348:	df000315 	stw	fp,12(sp)
 100c34c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100c350:	d0a00e17 	ldw	r2,-32712(gp)
 100c354:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100c358:	d0a6d517 	ldw	r2,-25772(gp)
 100c35c:	10800044 	addi	r2,r2,1
 100c360:	d0a6d515 	stw	r2,-25772(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100c364:	00003106 	br	100c42c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 100c368:	e0bffe17 	ldw	r2,-8(fp)
 100c36c:	10800017 	ldw	r2,0(r2)
 100c370:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100c374:	e0bffe17 	ldw	r2,-8(fp)
 100c378:	10800403 	ldbu	r2,16(r2)
 100c37c:	10803fcc 	andi	r2,r2,255
 100c380:	1005003a 	cmpeq	r2,r2,zero
 100c384:	1000051e 	bne	r2,zero,100c39c <alt_tick+0x5c>
 100c388:	d0a6d517 	ldw	r2,-25772(gp)
 100c38c:	1004c03a 	cmpne	r2,r2,zero
 100c390:	1000021e 	bne	r2,zero,100c39c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 100c394:	e0bffe17 	ldw	r2,-8(fp)
 100c398:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100c39c:	e0bffe17 	ldw	r2,-8(fp)
 100c3a0:	10c00217 	ldw	r3,8(r2)
 100c3a4:	d0a6d517 	ldw	r2,-25772(gp)
 100c3a8:	10c01e36 	bltu	r2,r3,100c424 <alt_tick+0xe4>
 100c3ac:	e0bffe17 	ldw	r2,-8(fp)
 100c3b0:	10800403 	ldbu	r2,16(r2)
 100c3b4:	10803fcc 	andi	r2,r2,255
 100c3b8:	1004c03a 	cmpne	r2,r2,zero
 100c3bc:	1000191e 	bne	r2,zero,100c424 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 100c3c0:	e0bffe17 	ldw	r2,-8(fp)
 100c3c4:	10c00317 	ldw	r3,12(r2)
 100c3c8:	e0bffe17 	ldw	r2,-8(fp)
 100c3cc:	11000517 	ldw	r4,20(r2)
 100c3d0:	183ee83a 	callr	r3
 100c3d4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100c3d8:	e0bffd17 	ldw	r2,-12(fp)
 100c3dc:	1004c03a 	cmpne	r2,r2,zero
 100c3e0:	1000031e 	bne	r2,zero,100c3f0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 100c3e4:	e13ffe17 	ldw	r4,-8(fp)
 100c3e8:	100c2a80 	call	100c2a8 <alt_alarm_stop>
 100c3ec:	00000d06 	br	100c424 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 100c3f0:	e0bffe17 	ldw	r2,-8(fp)
 100c3f4:	10c00217 	ldw	r3,8(r2)
 100c3f8:	e0bffd17 	ldw	r2,-12(fp)
 100c3fc:	1887883a 	add	r3,r3,r2
 100c400:	e0bffe17 	ldw	r2,-8(fp)
 100c404:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100c408:	e0bffe17 	ldw	r2,-8(fp)
 100c40c:	10c00217 	ldw	r3,8(r2)
 100c410:	d0a6d517 	ldw	r2,-25772(gp)
 100c414:	1880032e 	bgeu	r3,r2,100c424 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 100c418:	e0fffe17 	ldw	r3,-8(fp)
 100c41c:	00800044 	movi	r2,1
 100c420:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 100c424:	e0bfff17 	ldw	r2,-4(fp)
 100c428:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100c42c:	d0e00e04 	addi	r3,gp,-32712
 100c430:	e0bffe17 	ldw	r2,-8(fp)
 100c434:	10ffcc1e 	bne	r2,r3,100c368 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 100c438:	e037883a 	mov	sp,fp
 100c43c:	dfc00117 	ldw	ra,4(sp)
 100c440:	df000017 	ldw	fp,0(sp)
 100c444:	dec00204 	addi	sp,sp,8
 100c448:	f800283a 	ret

0100c44c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 100c44c:	deffff04 	addi	sp,sp,-4
 100c450:	df000015 	stw	fp,0(sp)
 100c454:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 100c458:	000170fa 	wrctl	ienable,zero
}
 100c45c:	e037883a 	mov	sp,fp
 100c460:	df000017 	ldw	fp,0(sp)
 100c464:	dec00104 	addi	sp,sp,4
 100c468:	f800283a 	ret

0100c46c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100c46c:	defffa04 	addi	sp,sp,-24
 100c470:	dfc00515 	stw	ra,20(sp)
 100c474:	df000415 	stw	fp,16(sp)
 100c478:	df000404 	addi	fp,sp,16
 100c47c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 100c480:	00804074 	movhi	r2,257
 100c484:	10ba8804 	addi	r2,r2,-5600
 100c488:	10800017 	ldw	r2,0(r2)
 100c48c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100c490:	00003306 	br	100c560 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 100c494:	e0bffd17 	ldw	r2,-12(fp)
 100c498:	11000217 	ldw	r4,8(r2)
 100c49c:	10005f00 	call	10005f0 <strlen>
 100c4a0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 100c4a4:	e0bffd17 	ldw	r2,-12(fp)
 100c4a8:	10c00217 	ldw	r3,8(r2)
 100c4ac:	e0bffc17 	ldw	r2,-16(fp)
 100c4b0:	1885883a 	add	r2,r3,r2
 100c4b4:	10bfffc4 	addi	r2,r2,-1
 100c4b8:	10800003 	ldbu	r2,0(r2)
 100c4bc:	10803fcc 	andi	r2,r2,255
 100c4c0:	1080201c 	xori	r2,r2,128
 100c4c4:	10bfe004 	addi	r2,r2,-128
 100c4c8:	10800bd8 	cmpnei	r2,r2,47
 100c4cc:	1000031e 	bne	r2,zero,100c4dc <alt_find_file+0x70>
    {
      len -= 1;
 100c4d0:	e0bffc17 	ldw	r2,-16(fp)
 100c4d4:	10bfffc4 	addi	r2,r2,-1
 100c4d8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100c4dc:	e0bffc17 	ldw	r2,-16(fp)
 100c4e0:	1007883a 	mov	r3,r2
 100c4e4:	e0bffe17 	ldw	r2,-8(fp)
 100c4e8:	1885883a 	add	r2,r3,r2
 100c4ec:	10800003 	ldbu	r2,0(r2)
 100c4f0:	10803fcc 	andi	r2,r2,255
 100c4f4:	1080201c 	xori	r2,r2,128
 100c4f8:	10bfe004 	addi	r2,r2,-128
 100c4fc:	10800be0 	cmpeqi	r2,r2,47
 100c500:	10000a1e 	bne	r2,zero,100c52c <alt_find_file+0xc0>
 100c504:	e0bffc17 	ldw	r2,-16(fp)
 100c508:	1007883a 	mov	r3,r2
 100c50c:	e0bffe17 	ldw	r2,-8(fp)
 100c510:	1885883a 	add	r2,r3,r2
 100c514:	10800003 	ldbu	r2,0(r2)
 100c518:	10803fcc 	andi	r2,r2,255
 100c51c:	1080201c 	xori	r2,r2,128
 100c520:	10bfe004 	addi	r2,r2,-128
 100c524:	1004c03a 	cmpne	r2,r2,zero
 100c528:	10000a1e 	bne	r2,zero,100c554 <alt_find_file+0xe8>
 100c52c:	e0bffd17 	ldw	r2,-12(fp)
 100c530:	11000217 	ldw	r4,8(r2)
 100c534:	e1bffc17 	ldw	r6,-16(fp)
 100c538:	e17ffe17 	ldw	r5,-8(fp)
 100c53c:	100c7200 	call	100c720 <memcmp>
 100c540:	1004c03a 	cmpne	r2,r2,zero
 100c544:	1000031e 	bne	r2,zero,100c554 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 100c548:	e0bffd17 	ldw	r2,-12(fp)
 100c54c:	e0bfff15 	stw	r2,-4(fp)
 100c550:	00000806 	br	100c574 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 100c554:	e0bffd17 	ldw	r2,-12(fp)
 100c558:	10800017 	ldw	r2,0(r2)
 100c55c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100c560:	00c04074 	movhi	r3,257
 100c564:	18fa8804 	addi	r3,r3,-5600
 100c568:	e0bffd17 	ldw	r2,-12(fp)
 100c56c:	10ffc91e 	bne	r2,r3,100c494 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 100c570:	e03fff15 	stw	zero,-4(fp)
 100c574:	e0bfff17 	ldw	r2,-4(fp)
}
 100c578:	e037883a 	mov	sp,fp
 100c57c:	dfc00117 	ldw	ra,4(sp)
 100c580:	df000017 	ldw	fp,0(sp)
 100c584:	dec00204 	addi	sp,sp,8
 100c588:	f800283a 	ret

0100c58c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100c58c:	defffc04 	addi	sp,sp,-16
 100c590:	df000315 	stw	fp,12(sp)
 100c594:	df000304 	addi	fp,sp,12
 100c598:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 100c59c:	00bffa04 	movi	r2,-24
 100c5a0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100c5a4:	e03ffe15 	stw	zero,-8(fp)
 100c5a8:	00001e06 	br	100c624 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 100c5ac:	e0bffe17 	ldw	r2,-8(fp)
 100c5b0:	00c04074 	movhi	r3,257
 100c5b4:	18f5e804 	addi	r3,r3,-10336
 100c5b8:	10800324 	muli	r2,r2,12
 100c5bc:	10c5883a 	add	r2,r2,r3
 100c5c0:	10800017 	ldw	r2,0(r2)
 100c5c4:	1004c03a 	cmpne	r2,r2,zero
 100c5c8:	1000131e 	bne	r2,zero,100c618 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 100c5cc:	e0bffe17 	ldw	r2,-8(fp)
 100c5d0:	00c04074 	movhi	r3,257
 100c5d4:	18f5e804 	addi	r3,r3,-10336
 100c5d8:	10800324 	muli	r2,r2,12
 100c5dc:	10c7883a 	add	r3,r2,r3
 100c5e0:	e0bfff17 	ldw	r2,-4(fp)
 100c5e4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 100c5e8:	00804074 	movhi	r2,257
 100c5ec:	10ba8c04 	addi	r2,r2,-5584
 100c5f0:	10c00017 	ldw	r3,0(r2)
 100c5f4:	e0bffe17 	ldw	r2,-8(fp)
 100c5f8:	1880040e 	bge	r3,r2,100c60c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 100c5fc:	00c04074 	movhi	r3,257
 100c600:	18fa8c04 	addi	r3,r3,-5584
 100c604:	e0bffe17 	ldw	r2,-8(fp)
 100c608:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 100c60c:	e0bffe17 	ldw	r2,-8(fp)
 100c610:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 100c614:	00000606 	br	100c630 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100c618:	e0bffe17 	ldw	r2,-8(fp)
 100c61c:	10800044 	addi	r2,r2,1
 100c620:	e0bffe15 	stw	r2,-8(fp)
 100c624:	e0bffe17 	ldw	r2,-8(fp)
 100c628:	10800810 	cmplti	r2,r2,32
 100c62c:	103fdf1e 	bne	r2,zero,100c5ac <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 100c630:	e0bffd17 	ldw	r2,-12(fp)
}
 100c634:	e037883a 	mov	sp,fp
 100c638:	df000017 	ldw	fp,0(sp)
 100c63c:	dec00104 	addi	sp,sp,4
 100c640:	f800283a 	ret

0100c644 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 100c644:	defffb04 	addi	sp,sp,-20
 100c648:	df000415 	stw	fp,16(sp)
 100c64c:	df000404 	addi	fp,sp,16
 100c650:	e13ffe15 	stw	r4,-8(fp)
 100c654:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 100c658:	e0bfff17 	ldw	r2,-4(fp)
 100c65c:	10840070 	cmpltui	r2,r2,4097
 100c660:	1000021e 	bne	r2,zero,100c66c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 100c664:	00840004 	movi	r2,4096
 100c668:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 100c66c:	e0fffe17 	ldw	r3,-8(fp)
 100c670:	e0bfff17 	ldw	r2,-4(fp)
 100c674:	1885883a 	add	r2,r3,r2
 100c678:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100c67c:	e0bffe17 	ldw	r2,-8(fp)
 100c680:	e0bffd15 	stw	r2,-12(fp)
 100c684:	00000506 	br	100c69c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 100c688:	e0bffd17 	ldw	r2,-12(fp)
 100c68c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100c690:	e0bffd17 	ldw	r2,-12(fp)
 100c694:	10800804 	addi	r2,r2,32
 100c698:	e0bffd15 	stw	r2,-12(fp)
 100c69c:	e0fffd17 	ldw	r3,-12(fp)
 100c6a0:	e0bffc17 	ldw	r2,-16(fp)
 100c6a4:	18bff836 	bltu	r3,r2,100c688 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 100c6a8:	e0bffe17 	ldw	r2,-8(fp)
 100c6ac:	108007cc 	andi	r2,r2,31
 100c6b0:	1005003a 	cmpeq	r2,r2,zero
 100c6b4:	1000021e 	bne	r2,zero,100c6c0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 100c6b8:	e0bffd17 	ldw	r2,-12(fp)
 100c6bc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 100c6c0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 100c6c4:	e037883a 	mov	sp,fp
 100c6c8:	df000017 	ldw	fp,0(sp)
 100c6cc:	dec00104 	addi	sp,sp,4
 100c6d0:	f800283a 	ret

0100c6d4 <atexit>:
 100c6d4:	200b883a 	mov	r5,r4
 100c6d8:	000d883a 	mov	r6,zero
 100c6dc:	0009883a 	mov	r4,zero
 100c6e0:	000f883a 	mov	r7,zero
 100c6e4:	100c7941 	jmpi	100c794 <__register_exitproc>

0100c6e8 <exit>:
 100c6e8:	defffe04 	addi	sp,sp,-8
 100c6ec:	000b883a 	mov	r5,zero
 100c6f0:	dc000015 	stw	r16,0(sp)
 100c6f4:	dfc00115 	stw	ra,4(sp)
 100c6f8:	2021883a 	mov	r16,r4
 100c6fc:	100c8cc0 	call	100c8cc <__call_exitprocs>
 100c700:	00804074 	movhi	r2,257
 100c704:	10ba8304 	addi	r2,r2,-5620
 100c708:	11000017 	ldw	r4,0(r2)
 100c70c:	20800f17 	ldw	r2,60(r4)
 100c710:	10000126 	beq	r2,zero,100c718 <exit+0x30>
 100c714:	103ee83a 	callr	r2
 100c718:	8009883a 	mov	r4,r16
 100c71c:	100cabc0 	call	100cabc <_exit>

0100c720 <memcmp>:
 100c720:	00c000c4 	movi	r3,3
 100c724:	1980032e 	bgeu	r3,r6,100c734 <memcmp+0x14>
 100c728:	2144b03a 	or	r2,r4,r5
 100c72c:	10c4703a 	and	r2,r2,r3
 100c730:	10000f26 	beq	r2,zero,100c770 <memcmp+0x50>
 100c734:	31ffffc4 	addi	r7,r6,-1
 100c738:	3000061e 	bne	r6,zero,100c754 <memcmp+0x34>
 100c73c:	00000a06 	br	100c768 <memcmp+0x48>
 100c740:	39ffffc4 	addi	r7,r7,-1
 100c744:	00bfffc4 	movi	r2,-1
 100c748:	21000044 	addi	r4,r4,1
 100c74c:	29400044 	addi	r5,r5,1
 100c750:	38800526 	beq	r7,r2,100c768 <memcmp+0x48>
 100c754:	20c00003 	ldbu	r3,0(r4)
 100c758:	28800003 	ldbu	r2,0(r5)
 100c75c:	18bff826 	beq	r3,r2,100c740 <memcmp+0x20>
 100c760:	1885c83a 	sub	r2,r3,r2
 100c764:	f800283a 	ret
 100c768:	0005883a 	mov	r2,zero
 100c76c:	f800283a 	ret
 100c770:	180f883a 	mov	r7,r3
 100c774:	20c00017 	ldw	r3,0(r4)
 100c778:	28800017 	ldw	r2,0(r5)
 100c77c:	18bfed1e 	bne	r3,r2,100c734 <memcmp+0x14>
 100c780:	31bfff04 	addi	r6,r6,-4
 100c784:	21000104 	addi	r4,r4,4
 100c788:	29400104 	addi	r5,r5,4
 100c78c:	39bff936 	bltu	r7,r6,100c774 <memcmp+0x54>
 100c790:	003fe806 	br	100c734 <memcmp+0x14>

0100c794 <__register_exitproc>:
 100c794:	defffa04 	addi	sp,sp,-24
 100c798:	00804074 	movhi	r2,257
 100c79c:	10ba8304 	addi	r2,r2,-5620
 100c7a0:	dc000015 	stw	r16,0(sp)
 100c7a4:	14000017 	ldw	r16,0(r2)
 100c7a8:	dd000415 	stw	r20,16(sp)
 100c7ac:	2829883a 	mov	r20,r5
 100c7b0:	81405217 	ldw	r5,328(r16)
 100c7b4:	dcc00315 	stw	r19,12(sp)
 100c7b8:	dc800215 	stw	r18,8(sp)
 100c7bc:	dc400115 	stw	r17,4(sp)
 100c7c0:	dfc00515 	stw	ra,20(sp)
 100c7c4:	2023883a 	mov	r17,r4
 100c7c8:	3027883a 	mov	r19,r6
 100c7cc:	3825883a 	mov	r18,r7
 100c7d0:	28002526 	beq	r5,zero,100c868 <__register_exitproc+0xd4>
 100c7d4:	29000117 	ldw	r4,4(r5)
 100c7d8:	008007c4 	movi	r2,31
 100c7dc:	11002716 	blt	r2,r4,100c87c <__register_exitproc+0xe8>
 100c7e0:	8800101e 	bne	r17,zero,100c824 <__register_exitproc+0x90>
 100c7e4:	2105883a 	add	r2,r4,r4
 100c7e8:	1085883a 	add	r2,r2,r2
 100c7ec:	20c00044 	addi	r3,r4,1
 100c7f0:	1145883a 	add	r2,r2,r5
 100c7f4:	0009883a 	mov	r4,zero
 100c7f8:	15000215 	stw	r20,8(r2)
 100c7fc:	28c00115 	stw	r3,4(r5)
 100c800:	2005883a 	mov	r2,r4
 100c804:	dfc00517 	ldw	ra,20(sp)
 100c808:	dd000417 	ldw	r20,16(sp)
 100c80c:	dcc00317 	ldw	r19,12(sp)
 100c810:	dc800217 	ldw	r18,8(sp)
 100c814:	dc400117 	ldw	r17,4(sp)
 100c818:	dc000017 	ldw	r16,0(sp)
 100c81c:	dec00604 	addi	sp,sp,24
 100c820:	f800283a 	ret
 100c824:	29802204 	addi	r6,r5,136
 100c828:	00800044 	movi	r2,1
 100c82c:	110e983a 	sll	r7,r2,r4
 100c830:	30c04017 	ldw	r3,256(r6)
 100c834:	2105883a 	add	r2,r4,r4
 100c838:	1085883a 	add	r2,r2,r2
 100c83c:	1185883a 	add	r2,r2,r6
 100c840:	19c6b03a 	or	r3,r3,r7
 100c844:	14802015 	stw	r18,128(r2)
 100c848:	14c00015 	stw	r19,0(r2)
 100c84c:	00800084 	movi	r2,2
 100c850:	30c04015 	stw	r3,256(r6)
 100c854:	88bfe31e 	bne	r17,r2,100c7e4 <__register_exitproc+0x50>
 100c858:	30804117 	ldw	r2,260(r6)
 100c85c:	11c4b03a 	or	r2,r2,r7
 100c860:	30804115 	stw	r2,260(r6)
 100c864:	003fdf06 	br	100c7e4 <__register_exitproc+0x50>
 100c868:	00804074 	movhi	r2,257
 100c86c:	1081a204 	addi	r2,r2,1672
 100c870:	100b883a 	mov	r5,r2
 100c874:	80805215 	stw	r2,328(r16)
 100c878:	003fd606 	br	100c7d4 <__register_exitproc+0x40>
 100c87c:	00800034 	movhi	r2,0
 100c880:	10800004 	addi	r2,r2,0
 100c884:	1000021e 	bne	r2,zero,100c890 <__register_exitproc+0xfc>
 100c888:	013fffc4 	movi	r4,-1
 100c88c:	003fdc06 	br	100c800 <__register_exitproc+0x6c>
 100c890:	01006404 	movi	r4,400
 100c894:	103ee83a 	callr	r2
 100c898:	1007883a 	mov	r3,r2
 100c89c:	103ffa26 	beq	r2,zero,100c888 <__register_exitproc+0xf4>
 100c8a0:	80805217 	ldw	r2,328(r16)
 100c8a4:	180b883a 	mov	r5,r3
 100c8a8:	18000115 	stw	zero,4(r3)
 100c8ac:	18800015 	stw	r2,0(r3)
 100c8b0:	80c05215 	stw	r3,328(r16)
 100c8b4:	18006215 	stw	zero,392(r3)
 100c8b8:	18006315 	stw	zero,396(r3)
 100c8bc:	0009883a 	mov	r4,zero
 100c8c0:	883fc826 	beq	r17,zero,100c7e4 <__register_exitproc+0x50>
 100c8c4:	003fd706 	br	100c824 <__register_exitproc+0x90>

0100c8c8 <register_fini>:
 100c8c8:	f800283a 	ret

0100c8cc <__call_exitprocs>:
 100c8cc:	00804074 	movhi	r2,257
 100c8d0:	10ba8304 	addi	r2,r2,-5620
 100c8d4:	10800017 	ldw	r2,0(r2)
 100c8d8:	defff304 	addi	sp,sp,-52
 100c8dc:	df000b15 	stw	fp,44(sp)
 100c8e0:	d8800115 	stw	r2,4(sp)
 100c8e4:	00800034 	movhi	r2,0
 100c8e8:	10800004 	addi	r2,r2,0
 100c8ec:	1005003a 	cmpeq	r2,r2,zero
 100c8f0:	d8800215 	stw	r2,8(sp)
 100c8f4:	d8800117 	ldw	r2,4(sp)
 100c8f8:	dd400815 	stw	r21,32(sp)
 100c8fc:	dd000715 	stw	r20,28(sp)
 100c900:	10805204 	addi	r2,r2,328
 100c904:	dfc00c15 	stw	ra,48(sp)
 100c908:	ddc00a15 	stw	r23,40(sp)
 100c90c:	dd800915 	stw	r22,36(sp)
 100c910:	dcc00615 	stw	r19,24(sp)
 100c914:	dc800515 	stw	r18,20(sp)
 100c918:	dc400415 	stw	r17,16(sp)
 100c91c:	dc000315 	stw	r16,12(sp)
 100c920:	282b883a 	mov	r21,r5
 100c924:	2039883a 	mov	fp,r4
 100c928:	d8800015 	stw	r2,0(sp)
 100c92c:	2829003a 	cmpeq	r20,r5,zero
 100c930:	d8800117 	ldw	r2,4(sp)
 100c934:	14405217 	ldw	r17,328(r2)
 100c938:	88001026 	beq	r17,zero,100c97c <__call_exitprocs+0xb0>
 100c93c:	ddc00017 	ldw	r23,0(sp)
 100c940:	88800117 	ldw	r2,4(r17)
 100c944:	8c802204 	addi	r18,r17,136
 100c948:	143fffc4 	addi	r16,r2,-1
 100c94c:	80000916 	blt	r16,zero,100c974 <__call_exitprocs+0xa8>
 100c950:	05bfffc4 	movi	r22,-1
 100c954:	a000151e 	bne	r20,zero,100c9ac <__call_exitprocs+0xe0>
 100c958:	8409883a 	add	r4,r16,r16
 100c95c:	2105883a 	add	r2,r4,r4
 100c960:	1485883a 	add	r2,r2,r18
 100c964:	10c02017 	ldw	r3,128(r2)
 100c968:	a8c01126 	beq	r21,r3,100c9b0 <__call_exitprocs+0xe4>
 100c96c:	843fffc4 	addi	r16,r16,-1
 100c970:	85bff81e 	bne	r16,r22,100c954 <__call_exitprocs+0x88>
 100c974:	d8800217 	ldw	r2,8(sp)
 100c978:	10003126 	beq	r2,zero,100ca40 <__call_exitprocs+0x174>
 100c97c:	dfc00c17 	ldw	ra,48(sp)
 100c980:	df000b17 	ldw	fp,44(sp)
 100c984:	ddc00a17 	ldw	r23,40(sp)
 100c988:	dd800917 	ldw	r22,36(sp)
 100c98c:	dd400817 	ldw	r21,32(sp)
 100c990:	dd000717 	ldw	r20,28(sp)
 100c994:	dcc00617 	ldw	r19,24(sp)
 100c998:	dc800517 	ldw	r18,20(sp)
 100c99c:	dc400417 	ldw	r17,16(sp)
 100c9a0:	dc000317 	ldw	r16,12(sp)
 100c9a4:	dec00d04 	addi	sp,sp,52
 100c9a8:	f800283a 	ret
 100c9ac:	8409883a 	add	r4,r16,r16
 100c9b0:	88c00117 	ldw	r3,4(r17)
 100c9b4:	2105883a 	add	r2,r4,r4
 100c9b8:	1445883a 	add	r2,r2,r17
 100c9bc:	18ffffc4 	addi	r3,r3,-1
 100c9c0:	11800217 	ldw	r6,8(r2)
 100c9c4:	1c001526 	beq	r3,r16,100ca1c <__call_exitprocs+0x150>
 100c9c8:	10000215 	stw	zero,8(r2)
 100c9cc:	303fe726 	beq	r6,zero,100c96c <__call_exitprocs+0xa0>
 100c9d0:	00c00044 	movi	r3,1
 100c9d4:	1c06983a 	sll	r3,r3,r16
 100c9d8:	90804017 	ldw	r2,256(r18)
 100c9dc:	8cc00117 	ldw	r19,4(r17)
 100c9e0:	1884703a 	and	r2,r3,r2
 100c9e4:	10001426 	beq	r2,zero,100ca38 <__call_exitprocs+0x16c>
 100c9e8:	90804117 	ldw	r2,260(r18)
 100c9ec:	1884703a 	and	r2,r3,r2
 100c9f0:	10000c1e 	bne	r2,zero,100ca24 <__call_exitprocs+0x158>
 100c9f4:	2105883a 	add	r2,r4,r4
 100c9f8:	1485883a 	add	r2,r2,r18
 100c9fc:	11400017 	ldw	r5,0(r2)
 100ca00:	e009883a 	mov	r4,fp
 100ca04:	303ee83a 	callr	r6
 100ca08:	88800117 	ldw	r2,4(r17)
 100ca0c:	98bfc81e 	bne	r19,r2,100c930 <__call_exitprocs+0x64>
 100ca10:	b8800017 	ldw	r2,0(r23)
 100ca14:	147fd526 	beq	r2,r17,100c96c <__call_exitprocs+0xa0>
 100ca18:	003fc506 	br	100c930 <__call_exitprocs+0x64>
 100ca1c:	8c000115 	stw	r16,4(r17)
 100ca20:	003fea06 	br	100c9cc <__call_exitprocs+0x100>
 100ca24:	2105883a 	add	r2,r4,r4
 100ca28:	1485883a 	add	r2,r2,r18
 100ca2c:	11000017 	ldw	r4,0(r2)
 100ca30:	303ee83a 	callr	r6
 100ca34:	003ff406 	br	100ca08 <__call_exitprocs+0x13c>
 100ca38:	303ee83a 	callr	r6
 100ca3c:	003ff206 	br	100ca08 <__call_exitprocs+0x13c>
 100ca40:	88800117 	ldw	r2,4(r17)
 100ca44:	1000081e 	bne	r2,zero,100ca68 <__call_exitprocs+0x19c>
 100ca48:	89000017 	ldw	r4,0(r17)
 100ca4c:	20000726 	beq	r4,zero,100ca6c <__call_exitprocs+0x1a0>
 100ca50:	b9000015 	stw	r4,0(r23)
 100ca54:	8809883a 	mov	r4,r17
 100ca58:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 100ca5c:	bc400017 	ldw	r17,0(r23)
 100ca60:	883fb71e 	bne	r17,zero,100c940 <__call_exitprocs+0x74>
 100ca64:	003fc506 	br	100c97c <__call_exitprocs+0xb0>
 100ca68:	89000017 	ldw	r4,0(r17)
 100ca6c:	882f883a 	mov	r23,r17
 100ca70:	2023883a 	mov	r17,r4
 100ca74:	883fb21e 	bne	r17,zero,100c940 <__call_exitprocs+0x74>
 100ca78:	003fc006 	br	100c97c <__call_exitprocs+0xb0>

0100ca7c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 100ca7c:	defffd04 	addi	sp,sp,-12
 100ca80:	df000215 	stw	fp,8(sp)
 100ca84:	df000204 	addi	fp,sp,8
 100ca88:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 100ca8c:	e0bfff17 	ldw	r2,-4(fp)
 100ca90:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100ca94:	e0bffe17 	ldw	r2,-8(fp)
 100ca98:	1005003a 	cmpeq	r2,r2,zero
 100ca9c:	1000021e 	bne	r2,zero,100caa8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 100caa0:	002af070 	cmpltui	zero,zero,43969
 100caa4:	00000106 	br	100caac <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 100caa8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 100caac:	e037883a 	mov	sp,fp
 100cab0:	df000017 	ldw	fp,0(sp)
 100cab4:	dec00104 	addi	sp,sp,4
 100cab8:	f800283a 	ret

0100cabc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100cabc:	defffd04 	addi	sp,sp,-12
 100cac0:	dfc00215 	stw	ra,8(sp)
 100cac4:	df000115 	stw	fp,4(sp)
 100cac8:	df000104 	addi	fp,sp,4
 100cacc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 100cad0:	e13fff17 	ldw	r4,-4(fp)
 100cad4:	100ca7c0 	call	100ca7c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 100cad8:	003fff06 	br	100cad8 <_exit+0x1c>
 100cadc:	0100c8c8 	cmpgei	r4,zero,803
